head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* ODEINT.C
   Integrate a set of ordinary differential equations. */

#include <math.h>
#include "cmath.h"

int odeint (f, ystart, nvar, x1, x2, eps, h1, hmin, nok, nbad,
            work1, work2, work3, work4, work5, work6,
            yscal, y, dydx, flag)

int (*f)();                    /* pointer to derivative function */
double ystart[];
int nvar;
double x1, *x2, eps, h1, hmin;
int *nok, *nbad;
double yscal[], y[], dydx[];       /* internal work arrays for OdeInt */
double work1[], work2[], work3[];  /* internal work arrays for rk4    */
double work4[], work5[], work6[];  /* internal work arrays for rkqc   */
int *flag;


/* Purpose :
   -------
  Runge-Kutta driver with adaptive step size control. Integrate the NVAR
  starting values YSTART from X1 to X2 with accuracy EPS.

  This routine has been adapted from the text
  Press, W.H., Flannery, B.P., Teukolsky, S.A. & Vettering, W.T (1986)
  "Numerical Recipes : The Art of Scientific Computing"
  Cambridge University Press
  by P. Jacobs  Department of Mechanical Engineering
                University of Queensland

  Input:
  ------
      h1 : guessed first step size
    hmin : minimum allowed step size (can be zero)
  ystart : initial condition (at x1)
  f : a function returning the derivatives
    nvar : number of equations
           (arrays must be dimensioned at least nvar)
      x1 : start value for independent variable
      x2 : finish value for independent variable

  Output:
  -------
  ystart : values at the end of the integration domain
     nok : number of good steps taken
    nbad : number of bad (but retried and fixed) steps taken
    flag : status on exit 0 = success
                          1 = step size too small
                          2 = too many steps required

  Version : 1.1  -- 2-Dec-1987
  -------

  Notes:
  ------
  (1) Programs using routine OdeInt must provide an integer
      function f(x, y, dydx);  (the name is passed)
      which returns the derivatives dydx[] at location x, given both x
      and the function values y[].
  (2) They must also define the arrays
      work1[nvar] thru work6[nvar], yscal[nvar], y[nvar]
      and dydx[nvar].
  (3) The procedures rk4 and rkqc are used by OdeInt to take the
      incremental steps and if the user is happy to use OdeInt "as-is"
      then there is no need to understand their interfaces.
  (4) On exit, the most recent solution point is returned even if
      the routine has not successfully reached the end point x2.
  */

/*--------------------------------------------------------------------*/

{   /* --- function odeint --- */

int nstp, i, maxstp;
double x, hnext, hdid, h, zero, tiny;
int qflag;        /* status flag from rkqc */

qflag = 0;
*flag = 0;
maxstp = 10000;    /* --- change this to suit the application */
zero = 0.0;
tiny = 1.0e-30;

x = x1;
if (*x2 > x1) h = fabs(h1); else h = -fabs(h1); 
*nok = 0;
*nbad = 0;
for (i = 0; i < nvar; i ++)  y[i] = ystart[i];

/* take at most maxstp steps */
for (nstp = 1; nstp <= maxstp; nstp ++)
   {  /* --- take a step */

   /* --- scaling used to monitor accuracy
     This general purpose choice can be modified if desired. */
   (*f) (x, y, dydx);
   for (i = 0; i < nvar; i ++)
      yscal[i] = fabs(y[i]) + fabs(dydx[i] * h) + tiny;

   /* --- If step can overshoot end then cut down the stepsize */
   if (((x+h-(*x2)) * (x+h-x1)) > zero) h = *x2 - x;
   rkqc (f, y, dydx, nvar, &x, h, eps, yscal, &hdid, &hnext,
         work1, work2, work3, work4, work5, work6, &qflag);
   if (hdid == h)
      *nok = *nok + 1;
   else
      *nbad = *nbad + 1;

   /* --- we are done ? */
   if (((x-(*x2))*((*x2)-x1)) >= zero)
      {
      /* --- normal exit, successful return --- */
      *flag = 0;
      goto OdeExit;
      }

   if ((fabs(hnext) < hmin) || (qflag != 0))
      {
      /* --- abnormal exit --- */
      *flag = 1;
      goto OdeExit;
      } 

   h = hnext;
   }  /* --- take a step */

/* --- If we have arrived here then we have exceeded the allowable
   number of steps. */
*flag = 2;

OdeExit:
/* --- Return the current solution */
for (i = 0; i < nvar; i ++) ystart[i] = y[i];
*x2 = x;
return (0);
}    /* end of function odeint() */

/*--------------------------------------------------------------------*/
int rk4 (f, y, dydx, n, x, h, yout, dym, dyt, yt)

int (*f) ();
double y[], dydx[], yout[];
int n;
double x, h;
double dym[], dyt[], yt[];   /* internal work arrays */

/* Purpose :
   -------
  Given the values of the n variables y and their derivatives
  dydx known at x, use the fourth order Runge-Kutta method
  to advance the solution over an interval h and return the
  incremented varaibles as yout.  The array yout may be the
  same array as y.  The user supplies the procedure
  f(x, y, dydx) which returns the derivatives dydx at x.

  Notes :
  -----
  (1) The function must be called to determine dydx at x
      prior to entry to this routine.
*/

{  /* --- procedure rk4 --- */
int i;
double xh, hh, h6;

hh = h * 0.5;
h6 = h / 6.0;
xh = x + hh;
for (i = 0; i < n; i ++)
   yt[i] = y[i] + hh * dydx[i];
(*f) (xh, yt, dyt);
for (i = 0; i < n; i ++)
   yt[i] = y[i] + hh * dyt[i];
(*f) (xh, yt, dym);
for (i = 0; i < n; i ++)
   {
   yt[i] = y[i] + h * dym[i];
   dym[i] = dyt[i] + dym[i];
   }
(*f) (x+h, yt, dyt);
for (i = 0; i < n; i ++)
   yout[i] = y[i] + h6 * (dydx[i] + dyt[i] + 2.0 * dym[i]);

return (0);
}   /* --- end of function rk4 --- */

/*--------------------------------------------------------------------*/
int rkqc(f, y, dydx, n, x, htry, eps, yscal, hdid, hnext,
         work1, work2, work3, dysav, ysav, ytemp, qflag)

int (*f) ();
double y[], dydx[];
int n;
double *x, htry, eps;
double yscal[];
double *hdid, *hnext;
double dysav[], ysav[], ytemp[];   /* internal work arrays for rkqc */
double work1[], work2[], work3[];  /* internal work arrays for rk4  */
int *qflag;

/* Purpose :
   -------
  Fifth-order Runge-Kutta step with monitoring of local truncation error
  to ensure accuracy and adjust stepsize.

  Input:
  ------
       y : dependent variable vector
       x : starting value of independent variable
    dydx : derivative of dependent variable at x
    htry : stepsize to be tried
     eps : required accuracy
   yscal : vector against which the error is scaled
  f : function returning derivatives
       n : number of equations

  Output:
  -------
      y : dependent variable vector (solution at x)
      x : new value of dependent variable
   hdid : stepsize that was actually accomplished
  hnext : estimated next stepsize

  Notes:
  ------
  (1) Needs a user supplied routine f(x, y, dydx) that computes
      the right hand side derivatives.
  (2) The function f must be called to determine dydx at x
      prior to entry to this routine.
*/

{    /* --- begin procedure rkqc --- */
int i;
double xx, xsav, hh, h, temp, errmax;
double pgrow, pshrnk, fcor, one, safety, errcon;

pgrow  = -0.20;
pshrnk = -0.25;
fcor   =  1.0 / 15.0;
one    =  1.0;
safety =  0.9;
errcon =  6.0e-4;
*qflag =  0;

/* --- save the initial values --- */
xsav = *x;
for (i = 0; i < n; i ++)
   {
   ysav[i] = y[i];
   dysav[i] = dydx[i];
   }
h = htry;

Step:  /* --- Take two half sized steps --- */
hh = 0.5 * h;
rk4 (f, ysav, dysav, n, xsav, hh, ytemp, work1, work2, work3);
*x = xsav + hh;
xx = *x;
(*f) (xx, ytemp, dydx);
rk4 (f, ytemp, dydx, n, xx, hh, y, work1, work2, work3);
*x = xsav + h;
if (*x == xsav)
   {
   *qflag = 1;
   }
/* --- take the large step */
rk4 (f, ysav, dysav, n, xsav, h, ytemp, work1, work2, work3);

/* --- Evaluate the accuracy --- */
errmax = 0.0;
for (i = 0; i < n; i ++)
   {
   ytemp[i] = y[i] - ytemp[i];
   /* --- ytemp now contains the error estimate */
   temp = fabs(ytemp[i] / yscal[i]);
   if (errmax < temp) errmax = temp;
   }
errmax = errmax / eps;   /* --- scale relative to required tolerance */
if (errmax > one)
   {
   /* --- truncation error too large, reduce step size */
   h = safety * h * exp(pshrnk * log(errmax));
   goto Step;  /* for another try */
   }
else
   {
   /* --- Step succeeded. Compute the next step size */
   *hdid = h;
   if (errmax > errcon)
      *hnext = safety * h * exp(pgrow * log(errmax));
   else
      *hnext = 4.0 * h;
   }

/* --- Mop up the fifth-order truncation error --- */
for (i = 1; i < n; i ++)
   y[i] = y[i] + ytemp[i] * fcor;

return (0);
}   /* --- end procedure rkqc --- */
@
