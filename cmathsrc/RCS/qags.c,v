head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* qags.c
   Computation of a definite integral using adaptive
   Gaussian quadrature. */

/************************************************/
/*                                              */
/*  CMATH.  Copyright (c) 1989 Design Software  */
/*                                              */
/************************************************/

#include "cmath.h"
#include <math.h>

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int qags (double (*f)(double x), double a, double b,
          double epsabs, double epsrel,
          double *result, double *abserr,
          int *neval, int *ier)

#else

int qags (f, a, b, epsabs, epsrel, result, abserr, neval, ier)

double (*f)();
double a, b;
double epsabs, epsrel;
double *result, *abserr;
int    *neval, *ier;

#endif

/* Purpose ...
   -------
   This routine calculates an approximate result to a given
   definite integral I = integral of f over (a, b), hopefully
   satisfying the following claim for accuracy
   fabs(I - result) <= MAX(epsabs, epsrel * fabs(I)).
   Individual panels are integrated using the Gaussian rule
   coded in qk21().  This type of quadrature has the advantage
   of avoiding the computation of the integrand at the end points
   of the domain.

   Input ...
   -----
   (*f)() : function defining the integrand function f(x).
   a      : lower limit of integration.
   b      : upper limit of integration.
   epsabs : absolute accuracy requested.
   epsrel : relative accuracy requested.
            If epsabs < 0 and epsrel < 0, the routine will end
	    with ier = 6.

   Output ...
   ------
   result : approximation to the integral.
   abserr : estimate of the modulus of the absolute error,
            which should equal or exceed abs(I - result).
   neval  : number of integrand evaluations.
   ier    : ier = 0 normal and reliable termination of the routine.
		    It is assumed that the requested accuracy has
		    been achieved.
            ier > 0 abnormal termination of the routine.
                    The estimates for the integral and error are
                    less reliable.  It is assumed that the requested
		    accuracy has not been achieved.
                = 1 maximum number of subdivisions allowed has been
		    achieved.  One can allow more subdivisions by
		    increasing the value of "limit" in the definition
		    below.  However, if this yields no improvement
                    it is advised to analyse the integrand in order to
		    determine the integration difficulties.  If the
		    position of a local difficulty can be determined
		    (e.g. singularity, discontinuity within the
		    interval) one will probably gain from splitting
		    up the interval at this point and calling the
		    integrator on the the subranges.  If possible,
		    an appropriate special purpose integrator should
		    be used, which is designed for handling the type
                    of difficulty involved.
                = 2 the occurrence of roundoff error is detected,
		    which prevents the requested tolerance from being
		    achieved.  The error may be under-estimated.
                = 3 extremely bad integrand behaviour occurs at some
		    points of the integration interval.
                = 4 the algorithm does not converge.  Roundoff
                    error is detected in the extrapolation table.
		    It is presumed that the requested tolerance
		    cannot be achieved, and that the returned result
		    is the best which can be obtained.
                = 5 the integral is probably divergent, or slowly
		    convergent.  It must be noted that divergence
		    can occur with any other value of ier.
                = 6 the input is invalid, because
                    epsabs < 0 and epsrel < 0,
                    result, abserr and neval are set to zero.

   This C code written by ...  Peter & Nigel,
   ----------------------      Design Software,
                               42 Gubberley St,
                               Kenmore, 4069,
                               Australia.

   Version ... 1.0,  May   1988
   -------     1.1,  April 1989

   Notes ...
   -----
   (1) The original FORTRAN code by
       Piessens, R., De Donker-Kapenga, E., Uberhuber, C.W. and
       Kahaner, D.K. (1983) : "Quadpack : a subroutine package for
       automatic integration."  Springer Series in Computational
       Mathematics 1.  qa299.3.q36 1983.

   (2) Other functions required ...
       qk21()     : basic quadrature rule.  The user may find it
	            useful to call this function directly, especially
                    if the function evaluations fot the integrand are
                    well behaved but expensive.
       qk21init() : coefficients for qk21
       qqsort()   : included in this file
       qextn()    : included in this file

   (3) Major variables ...
       alist       : list of left end points of all subintervals
                     considered up to now.
       blist       : list of right end points of all subintervals
                     considered up to now.
       rlist[i]    : approximation to the integral over
                     (alist[i], blist[i])
       rlist2      : array of dimension at least limexp + 2
                     containing the part of the epsilon table
                     which is still needed for further computations.
       elist[i]    : error estimate applying to rlist[i].
       maxerr      : pointer to the interval with largest error estimate.
       errmax      : elist[maxerr]
       erlast      : error on the interval currently subdivided
                     (before that subdivision has taken place).
       area        : sum of the integrals over the subintervals.
       errsum      : sum of the errors over the subintervals.
       errbnd      : requested accuracy max(epsabs, epsrel * fabs(result)).
       *****1      : variable for the left interval.
       *****2      : variable for the right interval.
       last        : index for subdivision.
       nres        : number of calls to the extrapolation routine
       numrl2      : number of elements currently in rlist2. If an
                     appropriate approximation to the compounded
                     integral has been obtained it is put in
                     rlist[numrl2] after numrl2 has been increased by one.
       small       : length of the smallest interval considered
                     up to now, multiplied by 1.5.
       erlarg      : sum of the errors over the intervals larger
                     than the smallest interval considered up to no
       extrap      : logical variable denoting that the routine is
                     attempting to perform extrapolation i.e. before
                     subdividing the smallest interval we try to
                     decrease the value of erlarg.
       noext       : logical variable denoting that extrapolation
                     is no longer allowed (true value).

   (4) machine dependent constants.
       epmach is the largest relative spacing.
       uflow  is the smallest positive magnitude.
       oflow  is the largest positive magnitude.
*/

/*----------------------------------------------------------------*/

/* Some global definitions used in this file ...  */

#define    zero       0.0
#define    half       0.5
#define    one        1.0
#define    MAX(a,b)   ((a>b) ? a : b)
#define    MIN(a,b)   ((a<b) ? a : b)
#define    TRUE       1
#define    FALSE      0

/*  epmach - the largest relative spacing.
    uflow  - the smallest positive magnitude.
    oflow  - the largest positive magnitude.  */
#define    epmach     EPSILON
#define    uflow      UNDRFLOW
#define    oflow      OVRFLOW

/* The dimension of rlist2 is determined by the value of limexp
   in subroutine qextn (rlist2 should be of dimension (limexp + 2)
   at least).  */
#define    limexp     50

/* limit is the maximum number of subintervals allowed in the
   subdivision process.  take care that limit >= 1. */
#define    limit      500

/*-----------------------------------------------------------------*/

{ /* Start of qags() */

static double abseps, alist[limit+1], area, area1, area12, area2;
static double a1, a2, blist[limit+1], b1, b2, correc, defabs, defab1;
static double defab2, dres, elist[limit+1], erlarg;
static double erlast, errbnd, errmax, error1, error2, erro12, errsum;
static double ertest, resabs, reseps, res3la[4];
static double rlist[limit+1], rlist2[limexp+3], small;
static double temp1, temp2;

static int    id, ierro, iord[limit+1], iroff1, iroff2, iroff3, jupbnd;
static int    k, ksgn, ktmin, last, maxerr, nres;
static int    nrmax, numrl2, itemp;

static int    extrap, noext;


/* test validity of parameters. */

*ier = 0;
*neval = 0;
last = 0;
*result = zero;
*abserr = zero;
alist[1] = a;
blist[1] = b;
rlist[1] = zero;
elist[1] = zero;
if (epsabs < zero && epsrel < zero) *ier = 6;
if (*ier == 6) goto BailOut;

/*  first approximation to the integral.  */

ierro = 0;
qk21init ();
qk21 (f, a, b, result, abserr, &defabs, &resabs);

/* test on accuracy. */

dres = fabs(*result);
temp1 = epsrel * dres;
errbnd = MAX(epsabs, temp1);
last = 1;
rlist[1] = *result;
elist[1] = *abserr;
iord[1] = 1;
if ((*abserr) <= (100.0 * epmach * defabs) && (*abserr > errbnd))
   *ier = 2;
itemp = limit;
if (itemp == 1) *ier = 1;
if (*ier != 0 || (*abserr <= errbnd &&
    *abserr != resabs) || *abserr == zero) goto L140;

/* initialization. */

rlist2[1] = *result;
errmax = *abserr;
maxerr = 1;
area = *result;
errsum = *abserr;
*abserr = oflow;
nrmax = 1;
nres = 0;
numrl2 = 2;
ktmin = 0;
extrap = FALSE;
noext = FALSE;
iroff1 = 0;
iroff2 = 0;
iroff3 = 0;
ksgn = -1;
if (dres >= (one - 50.0 * epmach) * defabs) ksgn = 1;

/* --- main loop. --- */

for (last = 2; last <= limit; ++last)
   {
   /* bisect the subinterval with the nrmax-th largest error estimate. */
   a1 = alist[maxerr];
   b1 = half * (alist[maxerr] + blist[maxerr]);
   a2 = b1;
   b2 = blist[maxerr];
   erlast = errmax;
   qk21 (f, a1, b1, &area1, &error1, &resabs, &defab1);
   qk21 (f, a2, b2, &area2, &error2, &resabs, &defab2);

   /* improve previous approximations to integral and error
      and test for accuracy.  */

   area12 = area1 + area2;
   erro12 = error1 + error2;
   errsum += erro12 - errmax;
   area += area12 - rlist[maxerr];
   if (defab1 != error1 && defab2 != error2)
      {
      if (fabs(rlist[maxerr] - area12) <= 1.0e-05 * fabs(area12)
         && erro12 >= 0.99 * errmax)
         {
         if (extrap) ++iroff2;
         else ++iroff1;
         }
      if (last > 10 && erro12 > errmax) ++iroff3;
      }
   rlist[maxerr] = area1;
   rlist[last] = area2;
   temp1 = epsrel * fabs(area);
   errbnd = MAX(epsabs, temp1);

   /* test for roundoff error and eventually set error flag. */
   if (iroff1 + iroff2 >= 10  || iroff3 >= 20) *ier = 2;
   if (iroff2 >= 5) ierro = 3;

   /* set error flag in the case that the number of subintervals
      equals limit. */
   if (last == limit) *ier = 1;

   /* set error flag in the case of bad integrand behaviour
      at a point of the integration range. */
   temp1 = fabs(a1);
   temp2 = fabs(b2);
   temp1 = MAX(temp1, temp2);
   temp2 = (one + 1000.0 * epmach) * (fabs(a2) + 1000.0 * uflow);
   if (temp1 <= temp2) *ier = 4;

   /* append the newly-created intervals to the list. */

   if (error2 <= error1)
      {
      alist[last] = a2;
      blist[maxerr] = b1;
      blist[last] = b2;
      elist[maxerr] = error1;
      elist[last] = error2;
      }
   else
      {
      alist[maxerr] = a2;
      alist[last] = a1;
      blist[last] = b1;
      rlist[maxerr] = area2;
      rlist[last] = area1;
      elist[maxerr] = error2;
      elist[last] = error1;
      }

   /* call subroutine qqsort to maintain the decending ordering
      in the list of error estimates and select the subinterval
      with nrmax-th largest error estimate (to be bisected next).
   */
   qqsort(limit, last, &maxerr, &errmax, elist, iord, &nrmax);
   if (errsum <= errbnd) goto L115;    /* jump out of do loop. */
   if (*ier != 0 ) break;              /* jump out of do loop. */
   if (last == 2)
      {
      small = fabs(b - a) * 3.75e-01;
      erlarg = errsum;
      ertest = errbnd;
      rlist2[2] = area;
      }
   if (noext) continue;                /* with next iteration */
   erlarg -= erlast;
   if (fabs(b1 - a1) > small) erlarg += erro12;
   if (!extrap)
      {
      /* test whether the interval to be bisected next is the
         smallest interval.  */
      if (fabs(blist[maxerr] - alist[maxerr]) > small) continue;
      extrap = TRUE;
      nrmax = 2;
      }

   if (ierro != 3 && erlarg > ertest)
      {
      /* The smallest interval has the largest error.
         Before bisecting, decrease the sum of the errors over the
         larger intervals (erlarg) and preform extrapolation.  */
      id = nrmax;
      jupbnd = last;
      if (last > (2 + limit / 2)) jupbnd = limit + 3 - last;
      for (k = id; k <= jupbnd; ++k)
         {
         maxerr = iord[nrmax];
         errmax = elist[maxerr];
         if (fabs(blist[maxerr] - alist[maxerr]) > small)
            goto L90;        /* jump out of do loop.  */
         ++nrmax;
         }
      }

   /* perform extrapolation. */
   ++numrl2;
   rlist2[numrl2] = area;
   qextn (&numrl2, rlist2, &reseps, &abseps, res3la, &nres);
   ++ktmin;
   if ((ktmin > 5) && (*abserr < (1.0e-03 * errsum))) *ier = 5;
   if (abseps < *abserr)
      {
      ktmin = 0;
      *abserr = abseps;
      *result = reseps;
      correc = erlarg;
      temp1 = epsrel * fabs(reseps);
      ertest = MAX(epsabs, temp1);
      if (*abserr <= ertest) break;     /* jump out of do loop.  */
      }

   /* prepare bisection of the smallest interval.  */
   if (numrl2 == 1) noext = TRUE;
   if (*ier == 5) break;
   maxerr = iord[1];
   errmax = elist[maxerr];
   nrmax = 1;
   extrap = FALSE;
   small *= half;
   erlarg = errsum;

   L90: /* just continue on with the next iteration */;
   }  /* end of main loop */

/* set final result and error estimate.  */
if (*abserr == oflow) goto L115;
if ((*ier + ierro) == 0) goto L110;
if (ierro == 3) *abserr += correc;
if (*ier == 0) *ier = 3;
if (*result != zero && area != zero) goto L105;
if (*abserr > errsum) goto L115;
if (area == zero) goto L130;
goto L110;

L105:
if ((*abserr / fabs(*result)) > (errsum / fabs(area))) goto L115;

/* test on divergence.  */
L110:
temp1 = fabs(*result);
temp2 = fabs(area);
temp1 = MAX(temp1, temp2);
if (ksgn == (-1) && temp1 <= defabs * 0.01) goto L130;
if (0.01 > (*result/area) || (*result/area) > 100.0
    || errsum > fabs(area)) *ier = 6;
goto L130;

/*  compute global integral sum.  */
L115:
*result = zero;
for (k = 1; k <= last; ++k)  *result += rlist[k];
*abserr = errsum;

L130:
if (*ier > 2) --(*ier);
L140:
*neval = 42 * last - 21;

BailOut: return (0);
}   /* end of qags() */

/*------------------------------------------------------------------*/

#if (PROTOTYPE)

int qextn (int *n, double epstab[], double *result,
           double *abserr, double res3la[], int *nres)

#else

int qextn (n, epstab, result, abserr, res3la, nres)

int    *n;
double epstab[];
double *result, *abserr;
double res3la[];
int    *nres;

#endif

/* Purpose ...
   -------
   The routine determines the limit of a given sequence of
   approximations, by means of the epsilon algorithm of P. Wynn.
   An estimate of the absolute error is also given.  The condensed
   epsilon table is computed.  Only those elements needed for the
   computation of the next diagonal are preserved.

   Parameters ...
   ----------
   n      : epstab[n] contains the new element in the first column
	    of the epsilon table.
   epstab : vector of dimension 52 containing the elements of the
	    two lower diagonals of the triangular epsilon table.
            The elements are numbered starting at the right-hand
	    corner of the triangle.
   result : resulting approximation to the integral.
   abserr : estimate of the absolute error computed from result
	    and the 3 previous results.
   res3la : vector of dimension 3 containing the last 3 results.
   nres   : number of calls to the routine. (Should be zero at
	    first call.)

   Major variables ...
   ---------------
   e0     : the 4 elements on which the
   e1       computation of a new elemint in
   e2       the epsilon table is based.
   e3                 e0
                e3    e1    new
                      e2
   newelm : number of elements to be computed in the new diagonal.
   error  : error = abs(e1-e0)+abs(e2-e1)+abs(new-e2)
   result : the element in the new diagonal with least value of error

   machine dependent constants ...
   epmach is the largest relative spacing.
   uflow is the smallest positive magnitude.
   oflow is the largest positive magnitude.

   limexp is the maximum number of elements the epsilon table
   can contain.  If this number is reached, the upper diagonal
   of the epsilon table is deleted.
*/

{  /* begin function qextn */

static double delta1, delta2, delta3, epsinf;
static double error, err1, err2, err3, e0, e1, e1abs, e2, e3;
static double res, ss, tol1, tol2, tol3, temp1;

static int i, ib, ib2, ie, indx, k1, k2, k3, newelm;
static int num;

++(*nres);
*abserr = oflow;
*result = epstab[*n];
if (*n < 3) goto L100;
epstab[*n + 2] = epstab[*n];
newelm = (*n - 1) / 2;
epstab[*n] = oflow;
num = *n;
k1 = *n;
for (i = 1; i <= newelm; ++i)
   {
   k2 = k1 - 1;
   k3 = k1 - 2;
   res = epstab[k1 + 2];
   e0 = epstab[k3];
   e1 = epstab[k2];
   e2 = res;
   e1abs = fabs(e1);
   delta2 = e2 - e1;
   err2 = fabs(delta2);
   tol2 = MAX(fabs(e2), e1abs) * epmach;
   delta3 = e1 - e0;
   err3 = fabs(delta3);
   temp1 = fabs(e0);
   tol3 = MAX(e1abs, temp1) * epmach;
   if (err2 <= tol2 && err3 <= tol3)
      {
      /* if e0, e1 and e2 are equal to within machine accuracy,
         convergence is assumed.
         *result = e2;
         *abserr = fabs(e1 - e0) + fabs(e2 - e1);
      */
      *result = res;
      *abserr = err2 + err3;
      goto L100;     /* jump out of do-loop  */
      }
   e3 = epstab[k1];
   epstab[k1] = e1;
   delta1 = e1 - e3;
   err1 = fabs(delta1);
   temp1 = fabs(e3);
   tol1 = MAX(e1abs, temp1) * epmach;

   /* if two elements are very close to each other, omit a part
      of the table by adjusting the value of n.  */

   if (err1 <= tol1 || err2 <= tol2 || err3 <= tol3)
      {
      *n = i + i - 1;
      break;      /* jump out of do-loop.  */
      }
   ss = 1.0 / delta1 + 1.0 / delta2 - 1.0 / delta3;
   epsinf = fabs(ss * e1);

   /* test to detect irregular behaviour in the table, and
      eventually omit a part of the table adjusting the value
      of n.  */
   if (epsinf <= 1.0e-04)
      {
      *n = i + i - 1;
      break;      /* jump out of do-loop.  */
      }

   /* compute a new element and eventually adjust the value of
      result.  */
   res = e1 + 1.0 / ss;
   epstab[k1] = res;
   k1 = k1 - 2;
   error = err2 + fabs(res - e2) + err3;
   if (error > *abserr) continue;
   *abserr = error;
   *result = res;
   }

/* shift the table. */
if (*n == limexp) *n = 2 * (limexp / 2) - 1;
ib = 1;
if ((num / 2) * 2 == num) ib = 2;
ie = newelm + 1;
for (i = 1; i <= ie; ++i)
   {
   ib2 = ib + 2;
   epstab[ib] = epstab[ib2];
   ib = ib2;
   }
if (num != *n)
   {
   indx = num - *n + 1;
   for (i = 1; i <= *n; ++i)
      {
      epstab[i] = epstab[indx];
      ++indx;
      }
   }

if (*nres < 4)
   {
   res3la[*nres] = *result;
   *abserr = oflow;
   }
else
   {
   /* compute the error estimate. */
   *abserr = fabs(*result - res3la[3]) + fabs(*result - res3la[2]) +
             fabs(*result - res3la[1]);
   res3la[1] = res3la[2];
   res3la[2] = res3la[3];
   res3la[3] = *result;
   }

L100:
temp1 = half * epmach * fabs(*result);
*abserr = MAX(*abserr, temp1);

return (0);
}  /* end of qextn() */

/*------------------------------------------------------------------*/

#if (PROTOTYPE)

int qqsort (int limitl, int last, int *maxerr,
            double *ermax, double elist[], int iord[], int *nrmax)

#else

int qqsort (limitl, last, maxerr, ermax, elist, iord, nrmax)

int    limitl;
int    last;
int    *maxerr;
double *ermax;
double elist[];
int    iord[];
int    *nrmax;

#endif

/* Purpose ...
   -------
   This routine maintains the decending ordering in the list of
   local error estimates resulting from the interval subdivision
   process.  At each call two error estimates are inserted using
   the sequential search top-down for the largest error estimate
   and bottom-up for the smallest estimate.

   Parameters ... (meaning at output)
   ----------
   limitl : maximum number of error estimates the list can contain.
   last   : number of error estimates currently in the list.
   maxerr : maxerr points to the the nrmax-th largest error
            estimate currently in the list.
   ermax  : nrmax-th largest error estimate. ermax = elist [maxerr]
   elist  : vector of dimension last containing the error estimates.
   iord   : vector of dimension last, the first k elements of which
	    contain pointers to the error estimates such that
	    elist[iord[1]], ... , elist[iord[k]]
            form a decreasing sequence, with k = last if
	    last <= (limitl/2+2), and k = limitl + 1 - last otherwise.
   nrmax  : maxerr = iord[nrmax]

*/

{  /* begin qqsort() */

static double errmax, errmin;

static int i, ibeg, ido, isucc, j, jbnd, jupbn, k;

/*  check whether the list contains more than two error estimates.  */
if (last <= 2)
   {
   iord[1] = 1;
   iord[2] = 2;
   }

/* This part of the routine is only executed if, due to a
   difficult integrand, subdivision increased the error
   estimate.  In the normal case the insert procedure should
   start after the nrmax-th largest error estimate.  */
errmax = elist[*maxerr];
if (*nrmax != 1)
   {
   ido = *nrmax - 1;
   for (i = 1; i <= ido; ++i)
      {
      isucc = iord[*nrmax - 1];
      if (errmax <= elist[isucc]) break;  /* jump out of do-loop  */
      iord[*nrmax] = isucc;
      --(*nrmax);
      }
   }

/* Compute the number of elements in the list to be maintained
   in decending order.  This number depends on the number of
   subdivisions still allowed.  */

jupbn = last;
if (last > (limitl / 2 + 2)) jupbn = limitl + 3 - last;
errmin = elist[last];

/* Insert errmax by traversing the list top-down, starting
   comparison from the element elist(iord(nrmax+1)).  */

jbnd = jupbn - 1;
ibeg = *nrmax + 1;
if (ibeg <= jbnd)
   {
   for (i = ibeg; i <= jbnd; ++i)
      {
      isucc = iord[i];
      if (errmax >= elist[isucc]) goto L60;   /* jump out of do-loop */
      iord[i - 1] = isucc;
      }
   }
iord[jbnd] = *maxerr;
iord[jupbn] = last;
goto L90;

/* insert errmin by traversing the list bottom-up. */

L60:
iord[i - 1] = *maxerr;
k = jbnd;
for (j = i; j <= jbnd; ++j)
   {
   isucc = iord[k];
   if (errmin < elist[isucc])
      {  /* jump out of do-loop  */
      iord[k + 1] = last;
      goto L90;
      }
   iord[k + 1] = isucc;
   --k;
   }
iord[i] = last;

/*  set maxerr and ermax.  */
L90:
*maxerr = iord[*nrmax];
*ermax = elist[*maxerr];

return (0);
}  /* end of function qqsort()  */

/*------------------------------------------------------------------*/

@
