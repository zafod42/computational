head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* chebyd.c
   Exercise the Chebyshev polynomial routines.  */

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
#define  ndim  60
static double a, b, c[ndim], cder[ndim], cint[ndim];
double x, expx, df, fint;
int    j, n, m, flag;
#if (PROTOTYPE)
double f(double x);
#else
double f();
#endif

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nExercise the Chebyshev polynomial functions.\n");

n = ndim;
a = 0.0;
b = 1.0;
chebyc (f, a, b, c, n, &flag);                 /* fit coefficients */
printf ("\n%s\n", cmathmsg(CHEBYC_C, flag));

if (flag == 0)
   {
   printf ("\nChebyshev series coefficients for exp(x), 0 <= x <= 1\n");
   printf ("  j       c[j]           j       c[j]\n");
   for (j = 0; j < 20; j+=2)
      printf ("%3d %16.10e,  %3d %16.10e\n", j, c[j], j+1, c[j+1]);

   m = 15;
   chebyd (a, b, c, cder, m, &flag);              /* differentiate    */
   printf ("\n%s\n", cmathmsg(CHEBYD_C, flag));
   chebyi (a, b, c, cint, m, &flag);              /* integrate        */
   printf ("\n%s\n", cmathmsg(CHEBYI_C, flag));

   printf ("\nSample evaluations ...\n");
   printf ("     x       exp(x)    derivative   integral\n");
   printf ("----------------------------------------------\n");
   for (j = 0; j < 6; ++j)
      {
      x = 0.2 * (double) j;
      expx = cheby (x, a, b, c, m, &flag);
      df   = cheby (x, a, b, cder, m, &flag);
      fint = cheby (x, a, b, cint, m, &flag);
      printf ("%8.3f %11.6f %11.6f %11.6f\n", x, expx, df, fint);
      }
   }

return (0);
}


double f (x)
double x;
{
#define  kdim  30
int j, k;
double term[kdim], sum;

/* evaluate individual terms for exp(x) */
j = 0;
term[0] = 1.0;
do {
   ++j;
   term[j] = term[j-1] * x / (double) j;
   } while ((term[j] > 0.01 * EPSILON) && j < kdim-1);

/* now sum the terms from the smallest */
sum = 0.0;
for (k = j; k >= 0; --k) sum += term[k];

return (sum);
}
@
