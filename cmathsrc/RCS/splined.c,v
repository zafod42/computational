head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* splined.c
   Sample driver for the cubic spline routines. */

#include <stdio.h>
#include <math.h>
#include "cmath.h"

main()
{
#define ndim 20
double x[ndim], y[ndim];
double b[ndim], c[ndim], d[ndim];
double xx, f, dfdxx, intfx;
int    n, i, last, flag;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nSample driver for spline(), seval() & deriv()\n\n");
printf ("Fit a spline to f(x) = e**x, x = 0, 0.1, ... 1.0.\n");

n = 11;
for (i = 0; i < n; ++i)
   {
   x[i] = 0.1 * (double) i;
   y[i] = exp(x[i]);
   }

spline (n, 1, 1, 1.0, exp(1.0), x, y, b, c, d, &flag);
printf ("%s\n\n", cmathmsg (SPLINE_C, flag));

if (flag == 0)
   {
   printf ("Now evaluate spline and derivative at sample points ...\n");
   printf ("\n     x           f          dfdx       integral\n");
   printf ("--------------------------------------------------\n");

   last = 0;
   xx   = x[n-1];
   while (xx >= x[0])
      {
      f     = seval (n, xx, x, y, b, c, d, &last);
      dfdxx = deriv (n, xx, x, b, c, d, &last);
      intfx = 1.0 + sinteg(n, xx, x, y, b, c, d, &last);
      printf ("%10.5f  %10.5f  %10.5f  %10.5f\n", xx, f, dfdxx, intfx);
      xx   -= 0.25;
      }
   }

return (0);
}  /* end of splined() */
@
