head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* nelmind.c
   Sample driver to exercise the function minimizer nelmin().
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{

double xmin[10], step[10];
double fmin, reqmin, reltol, abstol;
double object();
int    n, konvge, maxfe, numres, flag, nfe;

n       = 2;
reqmin  = 1.0e-16;
abstol  = 1.0e-12;
reltol  = 1.0e-12;
konvge  = 5;
maxfe   = 1000;
step[0] = 0.1;
step[1] = 0.1;
xmin[0] = -1.0;
xmin[1] =  1.0;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nExercise the function minimizer nelmin().\n\n");

nelmin (object, n, xmin, &fmin, reqmin, step,
	konvge, &nfe, maxfe, &numres, &flag,
	reltol, abstol);
printf ("%s\n\n", cmathmsg(NELMIN_C, flag));

if (flag == 0 || flag == 2)
   {
   printf ("Minimum objective value of ");
   printf ("%e", fmin);
   printf ("  found at ..\n");
   printf ("x[0] = %f  .. x[1] = %f\n\n", xmin[0], xmin[1]);
   printf ("Statistics ... ");
   printf ("nfe = %d .. numres = %d\n\n",
            nfe, numres);

   printf ("Expected solution ...\n");
   printf ("x0 = 0.5   x1 = -1.0   objective = 0.0\n");
   }

return (0);
}  /* end of nelmind */


double object (n, x)
int    n;
double x[];
/* test function to minimize
   This function is taken from the text
   "Practical Optimization"  by P.E. Gill et al.
   It is also the example used in the NAG manuals.
   */
{
double r;
r = 4.0 * x[0] * (x[0] + x[1]) + 2.0 * x[1] * (x[1] + 1.0) + 1.0;
r *= exp(x[0]);
return (r);
}
@
