head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* stintt.c
   Sample driver for stiff ODE integrator.
   */

#include <stdio.h>
#include <math.h>
#include "cmath.h"
#if (ANSII)
#include <stdlib.h>
#endif


main ()
{
int    n, mf, flag, nfe, nje;
double t, tout, hi, error, y[10];
int    f (), jacob ();
int    j;

n     = 3;
mf    = 1;
hi    = 2.9e-4;
error = 1.0e-4;
y[0]  = 1.0;
y[1]  = 1.0;
y[2]  = 0.0;

printf ("\n*** test for stint ***\n");
printf ("           t                    y\n");
t    = 0.0;
tout = 50.0;

stint0 (n, &flag);
if (flag != 0)
   {
   printf ("\nProblems in stint0()\n");
   exit(1);
   }

stint1 (n, y, &t, tout, hi, error, mf,
        &nfe, &nje, &flag, f, jacob);

stint3 ();

if (flag < 0)
   {
   printf ("flag = %d\n", flag);
   exit(0);
   }
for (j = 0; j < n; ++j) printf ("     %10.5f          %10.5f\n",
                                 t, y[j]);
printf ("\nnfe = %d,  nje = %d\n", nfe, nje);
printf ("\ncorrect answer is ???\n");
}



int f (n, t, y, ydot)
int    n;
double t,
       y[],
       ydot[];

{
ydot[0] = -0.013 * y[0] - 1000.0 * y[0] * y[2];
ydot[1] = -2500.0 * y[1] * y[2];
ydot[2] = -0.013 * y[0] - 1000.0 * y[0] * y[2] - 2500.0 * y[1] * y[2];
return (0);
}



int jacob(n, t, y, p0)
int    n;
double t,
       y[],
       p0[];
{
p0[0 * n + 0] = -0.013 - 1000.0 * y[2];
p0[0 * n + 1] = 0.0;
p0[0 * n + 2] = -1000.0 * y[0];

p0[1 * n + 0] = 0.0;
p0[1 * n + 1] = -2500.0 * y[2];
p0[1 * n + 2] = -2500.0 * y[1];

p0[2 * n + 0] = -0.013 - 1000.0 * y[2];
p0[2 * n + 1] = -2500.0 * y[2];
p0[2 * n + 2] = -1000.0 * y[0] - 2500.0 * y[1];

return (0);
}
@
