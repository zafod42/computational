head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* qags.c
   Computation of a definite integral using adaptive
   Gaussian quadrature. */

/************************************************/
/*                                              */
/*  CMATH.  Copyright (c) 1989 Design Software  */
/*                                              */
/************************************************/

#include "cmath.h"
#include <math.h>

/*-----------------------------------------------------------------*/

/* some global definitions ... */
static double alimit;       /* finite limit of integration */
static int    glimit;       /* flag to indicate domain */

#if (PROTOTYPE)
double (*userfun) (double x);  /* another name for the user's fn */
#else
double (*userfun) ();
#endif

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int qinf (double (*f)(double x), double a, int inf,
          double epsabs, double epsrel,
          double *result, double *errest,
          int *nfe, int *flag)

#else

int qinf (f, a, inf, epsabs, epsrel, result, errest, nfe, flag)

double (*f)();
double a;
int    inf;
double epsabs, epsrel;
double *result, *errest;
int    *nfe, *flag;

#endif

/* Purpose ...
   -------
   This routine calculates an approximate result to a given
   definite integral I = integral of f over
   inf = -1:  (-infinity, a),
   inf = +1:  (a, +infinity) or
   inf = +2:  (-infinity, +infinity),
   hopefully satisfying the following claim for accuracy
   fabs(I - result) <= MAX(epsabs, epsrel * fabs(I)).

   Input ...
   -----
   (*f)() : function defining the integrand function f(x).
   a      : limit of integration (has no meaning for inf == 2).
   inf    : domain selector.
            inf = -1:  (-infinity, a),
            inf = +1:  (a, +infinity) or
            inf = +2:  (-infinity, +infinity),
   epsabs : absolute accuracy requested.
   epsrel : relative accuracy requested.
            If epsabs < 0 and epsrel < 0, the routine will end
	    with ier = 6.

   Output ...
   ------
   result : approximation to the integral.
   errest : estimate of the modulus of the absolute error,
            which should equal or exceed abs(I - result).
   nfe    : number of integrand evaluations.
   flag   : flag = 0 normal and reliable termination of the routine.
	       It is assumed that the requested accuracy has
	       been achieved.
            flag > 0 abnormal termination of the routine.
               The estimates for the integral and error are
               less reliable.  It is assumed that the requested
	       accuracy has not been achieved.
            = 1 maximum number of subdivisions allowed has been
		achieved.  Refer to this flag in qags().
            = 2 the occurrence of roundoff error is detected,
	        which prevents the requested tolerance from being
		achieved.  The error may be under-estimated.
            = 3 extremely bad integrand behaviour occurs at some
		points of the integration interval.
            = 4 the algorithm does not converge.  Roundoff
                error is detected in the extrapolation table.
		It is presumed that the requested tolerance
		cannot be achieved, and that the returned result
		is the best which can be obtained.
            = 5 the integral is probably divergent, or slowly
		convergent.  It must be noted that divergence
		can occur with any other value of ier.
            = 6 the input is invalid, because
                epsabs < 0 and epsrel < 0,
                result, abserr and nfe are set to zero.

   This C code written by ...  Peter & Nigel,
   ----------------------      Design Software,
                               42 Gubberley St,
                               Kenmore, 4069,
                               Australia.

   Version ... 1.0,  Sept  1988
   -------

   Notes ...
   -----
   (1) The infinite domain is transformed to (0, 1] and qags()
       is used to integrate the transformed function.

   (2) Other functions required ...
       qags()     : adaptive Gaussian quadrature routine.
       qk21()     : basic quadrature rule.  The user may find it
	            useful to call this function directly, especially
                    if the function evaluations for the integrand are
                    well behaved but expensive.
       qk21init() : coefficients for qk21
       qqsort()   : included with qags()
       qextn()    : included with qags()

*/

{  /* begin qinf() ... */

/* check user input */
if ( (epsrel < 0.0 && epsabs < 0.0) ||
     (inf != -1 && inf != 1 && inf != 2) )
   {
   *flag = 6;
   *nfe = 0;
   *result = 0.0;
   return (0);
   }

/* set up info for transformed function */
userfun = f;                             /* find user's function */
if (inf == -1 || inf == 1) alimit = a;   /* finite limit   */
glimit = inf;                            /* specify domain */

/* now call qags() to integrate the transformed function over
   the range (0, 1]  */
qags (ftrnsfm, 0.0, 1.0, epsabs, epsrel, result, errest, nfe, flag);

return (0);
}  /* end of qinf() ... */

/*----------------------------------------------------------------*/

#if (PROTOTYPE)

double ftrnsfm (double t)

#else

double ftrnsfm (t)
double t;

#endif

{  /* begin ftrnsfm() ... */
double x, onet, fn;

onet = 1.0 / t;

/* transform variable */
switch (glimit)
   {
   case -1 : x = alimit - (1.0 - t) * onet;
             fn = (*userfun) (x);
             fn *= (onet * onet);
             break;
   case  1 : x = alimit + (1.0 - t) * onet;
             fn = (*userfun) (x);
             fn *= (onet * onet);
             break;
   case  2 : x = (1.0 - t) * onet;
             fn = (*userfun) (x);
             fn += (*userfun) (-x);
             fn *= (onet * onet);
             break;
   default : fn = 0.0;
   }

return (fn);
}  /* end of ftrnsfm() ... */

/*----------------------------------------------------------------*/
@
