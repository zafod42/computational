head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/*  multim.c
    Multidimensional minimization using function derivatives.  */

int multim (f, df, p, n,
            ftol, fret, flag,
	    itmax, xmax,
	    iter, nfe, nje,
	    uvect, g, h, xi)

double (*f) ();
int    (*df) ();
double p[];
int    n;
double ftol, *fret;
int    *flag, itmax;
double xmax;
int    *iter, *nfe, *nje;
double uvect[], g[], h[], xi[];

/* Purpose ...
   -------
   Given a starting point P, Fletcher-Reeves-Polak-Ribiere
   minimization is performed on a function F, using its gradient
   as calculated by a routine DF.

   Input...
   -----
   f     : user defined objective function
   df    : routine for evaluating derivatives
   p     : starting point in n-dimensional space
   n     : number of elements in p
   ftol  : convergence tolerance on the function value
   itmax : maximum allowed number of iterations
   xmax  : bounds on parameter values for 1D minimization

   Output...
   ------
   fret  : minimum of f
   iter  : number of iterations performed
   nfe   : number of function evaluations
   jfe   : number of derivative evaluations
   flag  : = 0, normal return
           = 1, did not converge within itmax iterations
           = 2, could not bracket a minimum in a line minimization

   Workspace...
   ---------
   uvect    : vector of dimension n
   g, h, xi : vectors of dimension n

   Version... 1.0, October 1988
   -------

   Notes ...
   -----
   (1) Uses routines LINEM() and BRAKET() to perform the one-
       dimensional minimizations.
   (2) Adapted from the FORTRAN code FRPRMN in
       W.H. Press et al
       Numerical Recipes. The art of scientific computing.
       by
       P.A. Jacobs & N.J. Lott
       Department of Mechanical Engineering
       University of Queensland
---------------------------------------------------------------------*/

#define   eps   1.0e-16

{  /* begin multim() ... */
int    j, Lflag, its, braket();
double fp, gg, dgg, gam, xmin, linem();

*nfe = 0;
*nje = 0;
fp = (*f) (p);
++(*nfe);
(*df) (p, xi);
++(*nje);

for (j = 0; j < n; ++j)
   {
   g[j] = -xi[j];
   h[j] = g[j];
   xi[j] = h[j];
   }

/* Iterate !  */

for (its = 1; its <= itmax; ++its)
   {
   *iter = its;
   /* Search along direction xi  */
   *fret = linem (f, p, xi, n, ftol, 100, &xmin, xmax, uvect,
                  nfe, &Lflag);
   if (Lflag != 0)
      { /* one dimensional search failed */
      *flag = 2;
      return (0);
      }

   /* Check convergence. */
   if ((2.0 * fabs((*fret)-fp)) <= (ftol * (fabs(*fret)+fabs(fp)+eps)))
      {
      /* Normal return */
      *flag = 0;
      return (0);
      }

   fp = (*f) (p);
   ++(*nfe);
   (*df) (p, xi);
   ++(*nje);
   gg = 0.0;
   dgg = 0.0;

   for (j = 0; j < n; ++j)
      {
      gg += g[j]*g[j];
      /* The following statement for Fletcher-Reeves */
      /* dgg += xi[j]*xi[j]; */
      /* The following statement for Polak-Ribiere */
      dgg += (xi[j] + g[j]) * xi[j];
      }

   if (gg == 0.0)
      {
      /* Unlikely, but if the gradients are zero then we are done. */
      *flag = 0;
      return (0);
      }

   /* Determine a new direction */
   gam = dgg / gg;
   for (j = 0; j < n; ++j)
      {
      g[j] = -xi[j];
      h[j] = g[j] + gam * h[j];
      xi[j] = h[j];
      }

   }

/* Too many iterations without convergence. */
*flag = 1;
return (0);
}
@
