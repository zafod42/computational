head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* qsplin.c
   Quadratic spline routines.

*/

int QSplin (y, v, n, flag, d)
double y[];
double v[];
int    n;
int    *flag;
double d[];

/* Purpose ...
   -------
   Fit a quadratic spline to the data vector y.  The data points
   are assumed to be equally spaced and in ascending order of x
   (the independent variable).

   Input ...
   -----
   y -- vector of data points with y[0] .. y[n-1]
   n -- number of data points

   Output ...
   ------
   v -- vector of break points such that the general subinterval j
	is defined on v[j-1], y[j+1], v[j].  The equation on each
	general subinterval is
	s(e) = a * e * e + b * e + y[j]
	where e = 2 (x - x[j+1]) / h
	      h = x[j+1] - x[j]
	      a = (v[j-1] - 2 y[j+1] + v[j]) / 2
	      b = (v[j] - v[j-1]) / 2
              x is the independent variable (not explicitly used)
   flag -- = 0, normal return
           = 1, n < 4.  There is not much point in fitting a
                spline to this vector.

   Workspace ...
   ---------
   d, -- internal workspace with same dimension as y[] and v[]

   Version ... 1.0, may 1988
   -------

   Notes ...
   -----
   (1) Written by
       P.A. Jacobs    Department of Mechanical Engineering
		      University of Queensland
   (2) Uses the function fabs() from the standard math library.

*/
{  /* begin function qsplin ... */
int j, nm4;
double ratio, offdiag;

*flag = 0;
if (n < 4) { *flag = 2; return; }
nm4 = n - 4;

/* The unknown v[j], j = 0 .. n-4 are determined by solving the
   set of linear equations thet force the derivative s'(x) to be
   continuous at each of the v[j] breakpoints.  */

/* --- set up matrix and right-hand-side ---
   This is a symmetric tridiagonal matrix of order n-3.  */

offdiag = 0.5;
for (j = 2; j <= nm4; ++j)
   {   /* equation for general segment j */
   d[j-1] = 3.0;                     /* diagonal        */
   v[j-1] = 2.0 * (y[j] + y[j+1]);   /* right-hand-side */
   }
d[0] = 17.0 / 6.0;
v[0] = -y[0] / 6.0 + 1.5 * y[1] + 2.0 * y[2];
d[nm4] = d[0];
v[nm4] = -y[n-1] / 6.0 + 1.5 * y[n-2] + 2.0 * y[n-3];

/* --- reduce matrix to an upper triangular system using
   Gaussian elimination without pivoting ---            */

for (j = 1; j <= nm4; ++j)
   {
   /* use row j-1 to eliminate the lower off-diagonal on
      row j.  The upper diagonal is left unchanged.
   */
   ratio = offdiag / d[j-1];
   d[j] -= offdiag * ratio;
   v[j] -= v[j-1] * ratio;
   }

/* --- back substitution --- */

v[nm4] = v[nm4] / d[nm4];                      /* last row */
for (j = nm4-1; j >= 0; --j)
   {  /* solve for row j */
   v[j] = (v[j] - offdiag * v[j+1]) / d[j];
   }

return;
}  /* ... end of function qsplin */



int QSplEval (x, yval, y, v, n, deriv, flag)
double x;
double *yval;
double y[];
double v[];
int    n;
int    deriv;
int    *flag;

/* Purpose ...
   -------
   Evaluate the quadratic spline data.  The data points
   are assumed to have a spacing of unity and be in
   ascending order of x (the independent variable).

   Input ...
   -----
   x -- value of abscissa at which the spline is to be evaluated.
	If x is outside the range of the data 0 -- n-1 then the
	appropriate end segment will be extrapolated.
   y -- vector of data points : y[0] .. y[n-1]
   n -- number of data points
   v -- vector of break points : v[0] .. v[n-4]
   deriv -- = 0, evaluate the spline
	    = 1, evaluate the derivative of the spline

   Output ...
   ------
   yval -- The value of the spline or its derivative at x.
   flag -- = 0, normal return
           = 1, x value outside range  0 <= x <= n-1.

   Version ... 1.0, may 1988
   -------

   Notes ...
   -----
   (1) Written by
       P.A. Jacobs    Department of Mechanical Engineering
		      University of Queensland

*/
{  /* begin function qspleval ... */
int i;
double fn, e, a, b, c;

fn = (double) n;
*flag = 0;
if ((x < 0.0) || (x > (n-1.0)))  *flag = 1;

if (x < 1.5)
   {  /* first segment e = -2; y = y[0]
		       e = 0 ; y = y[1]
		       e = 1 ; y = v[0]  */
   a = (2.0 * v[0] - 3.0 * y[1] + y[0]) / 6.0;
   b = (4.0 * v[0] - 3.0 * y[1] - y[0]) / 6.0;
   c = y[1];
   e = 2.0 * (x - 1.0);
   }
else if (x > (fn - 1.5))
   {  /* last segment e = -1 ; y = v[n-4]
		       e = 0 ; y = y[n-2]
		       e = 2 ; y = y[n-1]  */
   a = (2.0 * v[n-4] - 3.0 * y[n-2] + y[n-1]) / 6.0;
   b = (-4.0 * v[n-4] + 3.0 * y[n-2] + y[n-1]) / 6.0;
   c = y[n-2];
   e = 2.0 * (x - (fn-2.0));
   }
else
   {  /* general segment e = -1 ; y = v[i-1]
		          e = 0 ; y = y[i+1]
		          e = 1 ; y = v[i]  */
   i = (int) x;
   if (x > (0.5 + (double)i)) ++i;
   --i;
   /* the point x is now bounded by v[i-1], v[i] */
   a = (v[i] - 2.0 * y[i+1] + v[i-1]) * 0.5;
   b = (v[i] - v[i-1]) * 0.5;
   c = y[i+1];
   e = 2.0 * (x - (double) (i+1));
   }

if (deriv) *yval = b + 2.0 * e * a;
      else *yval = c + e * (b + e * a);

return;
}  /* ... end of function qspleval */
@
