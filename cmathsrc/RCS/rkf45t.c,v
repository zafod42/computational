head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* rkf45t.c
   development driver for rkf45() */

#include <math.h>
#include <stdio.h>

main ()
{    /* --- begin driver --- */

int     test1(), test2();             /* test functions */
int     rkf45(), rkfinit(), rkfend();
double  h, relerr, abserr, x1, x2;
int     neqn, flag, nfe, maxnfe;
#define n 3
double  y[n], yp[n];

printf ("\nTrial for rkf45().\n");
printf ("\nnonstiff equations ... \n");
printf ("\n       x      y[0]       y[1]\n");

neqn = 2;
rkfinit (neqn);
y[0] = 0.0;
y[1] = 0.0;

for (x2 = 2.0; x2 <= 10.0; x2 += 2.0)
   {
   x1     = x2 - 2.0;
   relerr = 1.0e-9;
   abserr = 1.0e-9;
   maxnfe = 500;
   flag   = 1;

   rkf45 (test1, neqn, y, yp, &x1, x2, &relerr, abserr,
          &h, &nfe, maxnfe, &flag);
   printf ("%10.6f %10.6f %10.6f \n", x1, y[0], y[1]);
   if (flag != 2) break;
   }
rkfend  ();

printf ("return flag : %d\n", flag);
printf ("\ncorrect answer : y[0] = 1.0,  y[1] = 2.0\n");

printf ("--------------------------------------------------\n\n\n");
printf ("stiff equations from Press et al section 15.6 ... \n");

printf ("\n");
printf ("       x      y[0]       y[1]\n");
neqn = 2;
rkfinit (neqn);
y[0] = 1.0;
y[1] = 0.0;

for (x2 = 0.4; x2 <= 2.0; x2 += 0.4)
   {
   x1     = x2 - 0.4;
   relerr = 1.0e-9;
   abserr = 1.0e-9;
   maxnfe = 2000;
   flag   = 1;

   rkf45 (test2, neqn, y, yp, &x1, x2, &relerr, abserr,
          &h, &nfe, maxnfe, &flag);
   printf ("%10.6f %10.6f %10.6f \n", x1, y[0], y[1]);
   if (flag != 2) break;
   }

rkfend ();
printf ("return flag : %d\n", flag);
printf ("\ncorrect answer : y[0] = 0.270671,  y[1] = -0.135335\n");
printf ("If the rkf45() does not reach final time, use ...\n");
printf ("y[0] = 2 * exp(-x),  y[1] = -exp(-x) \n");

}



int test1 (x, y, dydx)
double x;
double y[];
double dydx[];
{
dydx[0] = 1.0 - y[0] * y[0];
dydx[1] = 2.0 - y[1] * y[1] + 2.0 * y[0] * (y[1] - y[0]);
return;
}



int test2 (x, y, dydx)
double x;
double y[];
double dydx[];
{
dydx[0] = 998.0 * y[0] + 1998.0 * y[1];
dydx[1] = -999.0 * y[0] - 1999.0 * y[1];
return;
}
@
