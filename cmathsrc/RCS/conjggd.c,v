head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* conjggd.c
   Sample driver for the function minimizer conjgg().  */

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{

double f(), reqmin, fmin, x[2], xmax;
int    dfdx(), n, flag, itmax, iter, nfe, nje, mf;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nExercise the function minimizer conjgg().\n");
n       = 2;
mf      = 0;
reqmin  = 1.0e-6;
itmax   = 100;
xmax    = 100.0;
x[0]    = -1.0;
x[1]    =  1.0;
conjgg (f, mf, dfdx, x, n, reqmin, &fmin, &flag,
        itmax, xmax, &iter, &nfe, &nje);
printf ("\n%s\n", cmathmsg(CONJGG_C, flag));

if (flag == 0 || flag == 1)
   {
   printf ("\nMimimum objective value of %e found at ..\n", fmin);
   printf ("x[0] = %f .. x[1] = %f\n", x[0], x[1]);
   printf ("Expected objective value of 0.0 at (0.5, -1.0).\n");
   printf ("\nStatistics ...\n");
   printf ("nfe = %d .. nje = %d\n", nfe, nje);
   }

return (0);
}  /* end of main */



double f (n, x)
int    n;
double x[];
/* This function is taken from the text
   "Practical Optimization"  by P.E. Gill et al.
   It is also the example used in the NAG manuals.
   */
{
double r;
r = 4.0 * x[0] * (x[0] + x[1]) + 2.0 * x[1] * (x[1] + 1.0) + 1.0;
r *= exp(x[0]);
return (r);
}


int dfdx (n, x, dx)
int    n;
double x[], dx[];
{
double r, t;
t = exp(x[0]);
r = 4.0 * x[0] * (x[0] + x[1]) + 2.0 * x[1] * (x[1] + 1.0) + 1.0;
r *= t;
dx[0] = r + t * (8.0 * x[0] + 4.0 * x[1]);
dx[1] = t * (4.0 * (x[0] + x[1]) + 2.0);
return (0);
}
@
