head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* dftd.c
   Exercise the Discrete Fourier transform routine.   */

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
int    j, n, n2, flag, direct;
#define  ndim  64
static double zr[ndim], zi[ndim], wr[ndim], wi[ndim];
static double rr[ndim], ri[ndim], t, rmean, rmax;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nExercise Fourier transform routine dft().\n");

printf ("\nTime domain data ...\n");
n  = 17;
n2 = 64;
for (j = 0; j < n; ++j)
   {
   zr[j] = sin (6.283185 * ((double) j) / ((double) n));
   zi[j] = 0.0;
   rr[j] = zr[j];  ri[j] = zi[j];
   printf ("(%6.3f,%6.3f), ", zr[j], zi[j]);
   if (j % 4 == 0) printf ("\n");
   }
printf ("\n");

printf ("Set the Chirp function weights.\n");
chirp (n, n2, wr, wi, &flag);
printf ("%s\n\n", cmathmsg(CHIRP_C, flag));

if (flag == 0)
   {
   printf ("\nForward transform ...\n");
   direct = 1;
   dft (n, n2, zr, zi, wr, wi, direct, &flag);
   printf ("%s\n\n", cmathmsg(DFT_C, flag));

   if (flag == 0)
      {
      for (j = 0; j < n; ++j)
         {
         printf ("(%6.3f,%6.3f), ", zr[j], zi[j]);
         if (j % 4 == 0) printf ("\n");
         }
      printf ("\n");

      printf ("\nInverse transform ...\n");
      direct = -1;
      dft (n, n2, zr, zi, wr, wi, direct, &flag);
      printf ("%s\n\n", cmathmsg(DFT_C, flag));
      rmax  = 0.0;
      rmean = 0.0;
      for (j = 0; j < n; ++j)
         {
         rr[j] -= zr[j];  ri[j] -= zi[j];
         t = fabs(rr[j]);
         rmax = (t > rmax) ? t : rmax; rmean += t;
         t = fabs(ri[j]);
         rmax = (t > rmax) ? t : rmax; rmean += t;
         }
      rmean /= (double) n;
      printf ("Maximum error = %10.2e\n", rmax);
      printf ("Mean error    = %10.2e\n", rmean);
      printf ("\n");
      }
   }

return (0);
}  /* end of dftd.c */
@
