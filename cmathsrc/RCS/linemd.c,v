head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* linemd.c

   try out the numerical recipes function minimization
   in multi dimensions - minimise along a line  */

#include <math.h>

#include "braket.c"
#include "linem.c"

main ()
{

double ax, bx, cx, fa, fb, fc, object(), linem(), fmin, xmin;
double work[3], p[3], dirctn[3], xmax;
int flag, nfe, braket(), n;

ax = 1.0;
bx = 2.0;
xmax = 1000.0;
dirctn[0] = 0.5774;
dirctn[1] = 0.5774;
dirctn[2] = 0.5774;
p[0] = 0.0;
p[1] = 0.0;
p[2] = 0.0;
nfe = 0;
n = 3;

braket (object, p, dirctn, n, &ax, &bx, &cx, xmax, &fa, &fb, &fc,
        work, &nfe, &flag);

printf ("%d  %d\n", flag, nfe);
printf ("%f  %f\n", ax, fa);
printf ("%f  %f\n", bx, fb);
printf ("%f  %f\n", cx, fc);

nfe = 0;
fmin = linem (object, p, dirctn, 3, 1.0e-6, 100,
              &xmin, xmax, work, &nfe, &flag);

printf ("%d  %d\n", flag, nfe);
printf ("%f %f %f\n", p[0], p[1], p[2]);
printf ("%f  %f\n", xmin, fmin);

}  /* end of main */



double object (x)
double x[];

/*  test function to minimize */

{
double r;
r = sqrt(x[0]*x[0] + x[1]*x[1] + x[2]*x[2]);
/* well behaved */
return (sin(r));
/* a function with no minimum */
/*
return (-r*r);
*/
}@
