head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/*  bspline.c
    Calculation of B-spline control points for a given (x, y) data set.
*/

/************************************************/
/*                                              */
/*  CMATH.  Copyright (c) 1989 Design Software  */
/*                                              */
/************************************************/

#include <stdio.h>
#include <math.h>
#include "cmath.h"
#if (STDLIBH)
#include <stdlib.h>
#endif

/*-----------------------------------------------------------------*/

/*  Global data.  Used only for interv()  */

int         Ihi, Middle;
static int  Ilo;
double      *T, Param;

#define  INDEX(i,j,rowl)  ((i) * (rowl) + (j))

/*  Global data.  Used only for bsplvb()  */

static double  *Deltal, *Deltar;

/*  Global data.  Used only for bseval(), bspline  */

static double  *Bsplvalues;


/*---------------------------------------------------------------------------*/

#if (PROTOTYPE)

int  bspline (int number_of_data, double xdata[], double ydata[], int order,
              struct BSPLSTRC *xbspl, struct BSPLSTRC *ybspl, int *flag)

#else

int  bspline (number_of_data, xdata, ydata, order, xbspl, ybspl, flag)

int number_of_data;
double xdata[], ydata[];
int order;
struct BSPLSTRC *xbspl;
struct BSPLSTRC *ybspl;
int *flag;

#endif

/* Purpose ...
   -------
   Calculates the control points for the B-spline curve passing through the
   data supplied.  Knot points are at the data points with the exception of
   the first and last segments, where one data point is within the segment
   to supply problem closure (i.e.  the end conditions).


   Input ...
   -----
   number_of_data  :  number of (x, y) data points.
   xdata[]         :  x data points, in order of occurence.
   ydata[]         :  y data points, in order of occurence.
   order           :  order of spline to be fitted to the data, must be
                     <= number_of_data.

   Output ...
   ------
   xbspl     :  Structure containing the definition of the x coordinate of
                the fitted B-spline.
   ybspl     :  Structure containing the definition of the y coordinate of
                the fitted B-spline.
   *flag     :  Status flag.
                flag = 0  Successful completion of bspline().
                flag = 1  Unable to allocate memory.
                flag = 2  Parameter value outside range of knot vector.
                flag = 3  Unable to factorize banded matrix.



   This C code written by ...   Nigel and Peter.
   ----------------------       Design Software
                                42 Gubberley Street,
                                KENMORE, QLD, 4069.
                                AUSTRALIA.

   Version ...   1.0, July 1989.
   -------       2.0, October 1989.  Use structures.
                 2.1, February, 1990.  Correct return flags.
                      25 June, 1990.  Correct assignment of knots[number_cpnts].

   Notes ...
   -----

   (1)  Uses the CMATH routines interv(), bsplvb(), bandfac(), bandslv().

   (2)  A call to bsplend() should be made when no there is to be no further
        use of any routine which calls bsplvb (to free associated memory).

*/
/*-------------------------------------------------------------------------*/

{  /*  Beginning of procedure bspline().  */
int     i, j, number_cpnts, numberknots, band_width;
int     index, left;
double  *pval, *band, *bvector, *knots;
double  sum, float1, float2;


/*
  Before we get too involved ...

  memory for bsplvb()
*/
*flag = 0;
bsplinit (order, flag);
if (*flag == 1)  {
   *flag = 1;
   return (1);
   }

/*
  Memory for parameter values at data points.
*/
pval = (double *) malloc (number_of_data * sizeof (double));
if (pval == NULL)  {
   *flag = 1;
   return (1);
   }
/*
  Memory for banded matrix.
*/
band_width = 2*order - 1;
band = (double *) malloc (number_of_data * band_width * sizeof (double));
if (band == NULL)  {
   *flag = 1;
   return (1);
   }

/*printf ("Initializing knot vector.\n");*/
/*  Using "not a knot" condition for spline ends, hence.  */
number_cpnts = number_of_data;
/*  and hence ...  */
bvector = (double *)  malloc (number_cpnts * sizeof (double));
if (bvector == NULL)  {
   *flag = 1;
   return (1);
   }
/*  and always ...  */
numberknots = number_cpnts + order;
knots =  (double *) malloc (numberknots * sizeof (double));
if (knots == NULL)  {
   *flag = 1;
   return (1);
   }

/*  There is (number of control points + order) knots, numbered from 0.  */
for (i = 0; i <= order-1; i ++)  {
    knots[i] = 0.0e0;
    knots[number_cpnts + i] = 1.0e0;
}
/*
  Sum all the combinations of adjacent chord lengths, use to calculate
  good knot values.  cf:
      Parametrization of Bezier-type B-spline Curves and Surfaces.
      Hartley, P. J., Judd C. J.  CAD, Vol. 10 Number 2.  March 1978.
*/
sum = 0.0e0;
for ( i = 0 ; i <= number_cpnts - order;  i ++)
  for ( j = i ; j  <= i+order-2 ;  j ++)  {
      float1 = xdata[j+1] - xdata[j];
      float2 = ydata[j+1] - ydata[j];
      sum = sum + sqrt(float1 * float1 + float2 * float2);
  }
for ( i = 0 ; i < number_cpnts - order ;  i ++)  {
    knots[i + order] = 0.0e0;
    for ( j = i ; j  <= i+order-2 ;  j ++)  {
        float1 = xdata[j+1] - xdata[j];
        float2 = ydata[j+1] - ydata[j];
        knots[i + order] = knots[i + order] +
                            sqrt(float1 * float1 + float2 * float2);
    }
    knots[i + order] = knots[i + order]/sum + knots[i + order - 1];
}
/*   for ( i = 0 ; i < number_cpnts + order ; i ++)
        printf ("knot %d = %f\n", i, knots[i]);*/

/*   Use node points of the knot vector for parameter value at each data
     point.  cf.
      Parametrization and Shape of B-spline Curves for CAD.
      Hartley, P. J., Judd, C. J.  CAD Vol. 12 Number 5.  Sept. 1980.
*/
for ( i = 0 ; i < number_of_data ;  i ++)  {
   pval[i] = 0.0e0;
   for ( j = 1 ; j <= order-1 ; j ++)  pval[i] = pval[i] + knots[i+j];
   pval[i] = pval[i] / (double) (order-1);
}

/*  Initialize banded matrix to prevent WEIRD results.  */
for ( i = 0 ; i <= number_cpnts-1 ;  i ++)
   for ( j = 0 ; j <= (2*(order-1)) ; j ++)
      *(band + INDEX(i, j, band_width)) = 0.0;

index = 1;
for ( i = 0 ; i  <= number_of_data-1 ;  i ++)  {
   interv (knots, numberknots, pval[i], &left, flag);
   if (*flag == -1)  {
      *flag = 2;
      return (2);
      }
/*      printf ("pval[%d]=%f left=%d knot[%d]=%f\n", i, pval[i], left, left, knots[left]);*/
/*
  This line is a fix for when the parameter value is actually equal to the
  maximum knot value, in which case interv will correctly output left to be
  at the end of the knot vector, but bsplvb will not spit out the value we
  want, i.e. 1.0e0.  Flag will equal 1.
*/
   if ( pval[i] >= knots[number_cpnts+order-1] ) left = number_cpnts-1;
   bsplvb (knots, order, index, pval[i], left, Bsplvalues, flag);
/*  Store values in appropriate place in the banded matrix.  */
   for (j = 0; j < order; j ++)  {
      *(band + INDEX(i, left-i+j, band_width)) = Bsplvalues[j];
/*	printf ("band[%d] [%d] = Bsplvalues[%f]\n",
			  i,left-i+j, Bsplvalues[j]);*/
   }
/*       printf ("\n");*/
   bvector[i] = xdata[i];
}  /*  end of "for" each data point.  */


/*for (i = 0; i <= number_cpnts - 1; i ++)  {
   for (j = 0; j <= 2*order - 2; j ++)
      printf (" %f", *(band + INDEX (i, j, band_width)));
   printf ("\n");
}
*/
/*  Factorize matrix.  */
bandfac (band, band_width, number_cpnts, order-1, order-1, flag);
switch (*flag)  {
case 0:
/*  Solve for x control points if factorization successful.  */
   bandslv (band, band_width, number_cpnts, order-1, order-1, bvector);
/*  Assemble x coordinate B-spline.  */
   bsplmake (order, numberknots, knots, bvector, xbspl, flag);
   for ( i = 0 ; i  <= number_cpnts - 1;  i ++)  bvector[i] = ydata[i];

/*  Solve for y control points.  */
   bandslv (band, band_width, number_cpnts, order-1, order-1, bvector);
/*  Assemble y coordinate B-spline.  */
   bsplmake (order, numberknots, knots, bvector, ybspl, flag);
default:
/*  Free memory allocated for this routine.  */
   bsplend ();  /*  static local memory used by bsplvb().  */
   if (pval != NULL)  { free (pval);  pval = NULL; }
   if (band != NULL)  { free (band);  band = NULL; }
   if (bvector != NULL)  { free (bvector);  bvector = NULL; }
   if (knots != NULL)  { free (knots);  knots = NULL; }
}
if (*flag != 0)  {
   *flag = 3;
   return (3);
   }
  else  {
   *flag = 0;
   return (0);  /*  Successful completion of bspline()  */
   }

}  /*  End of procedure bspline().  */

/*-----------------------------------------------------------------*/
/*  bsplmake.c
    Set up structure for B-spline data.
*/

/*  Purpose ...
    -------
    Setup structure for B-spline data.


  Input ...
  -----
  nknot      :  Number of knots.
  knots[]    :  Knot vector of the B-spline.
  cpnts[]    :  Control points of the B-spline.
  order      :  Order of spline.

  Output ...
  ------
  bspldefn   :  Structure containing all the definition of a univariate
                B-spline.
  flag       :  Status indicator.
                flag = 0  Successful.
                flag = 1  Failed to assign memory required.

  This C code written by ...   Nigel and Peter.
  ----------------------       Design Software
                               42 Gubberley Street,
                               KENMORE, QLD, 4069.
                               AUSTRALIA.

  Version ...   1.0  October, 1989.

  Notes ...
  -----

*/

#if (PROTOTYPE)

int  bsplmake (int order, int number_knots, double knots[],
               double cpnts[], struct BSPLSTRC *bspldefn, int *flag)

#else

int  bsplmake (order, number_knots, knots, cpnts, bspldefn, flag)

int     order;
int     number_knots;
double  knots[];
double  cpnts[];
struct  BSPLSTRC *bspldefn;
int     *flag;

#endif

{  /*  Beginning of procedure bsplmake ().  */
int  i;

bspldefn->order = order;
bspldefn->nknot = number_knots;
bspldefn->knots = (double *) malloc (number_knots * sizeof (double));
bspldefn->cpnts = (double *) malloc ((number_knots - order) *
                                      sizeof (double));
if (bspldefn->knots == NULL || bspldefn->cpnts == NULL)  {
   *flag = 1;
   return (1);
}
for (i = 0; i < number_knots; i++)  bspldefn->knots[i] = knots[i];
for (i = 0; i < number_knots-order; i++)  bspldefn->cpnts[i] = cpnts[i];
return (0);

}  /*  End of procedure bsplmake ().  */

/*-----------------------------------------------------------------*/
/*  bspldest.c
    Release memory used to store arrays in B-spline data structure.
*/

/*  Purpose ...
    -------
    Release memory used to store arrays in B-spline data structure.


  Input ...
  -----
  bspldefn   :  Order of spline.

  Output ...
  ------
  flag       :  Status indicator.
                flag = 0  Successful.
                flag = 1  NULL pointer for array location.

  This C code written by ...   Nigel and Peter.
  ----------------------       Design Software
                               42 Gubberley Street,
                               KENMORE, QLD, 4069.
                               AUSTRALIA.

  Version ...   1.0  C, October, 1989.

  Notes ...
  -----

*/

#if (PROTOTYPE)

int  bspldest (struct BSPLSTRC *bspldefn, int *flag)

#else

int  bspldest (bspldefn, flag)

struct  BSPLSTRC *bspldefn;
int     *flag;

#endif

{  /*  Beginning of procedure bspldest ().  */

*flag = 0;
if (bspldefn->knots == NULL || bspldefn->cpnts == NULL)
   {
   *flag = 1;
   return (1);
   }
  else
   {
   if (bspldefn->knots != NULL)
      { free (bspldefn->knots); bspldefn->knots = NULL; }
   if (bspldefn->cpnts != NULL)
      { free (bspldefn->cpnts); bspldefn->cpnts = NULL; }
   return (0);
   }

}  /*  End of procedure bspldest ().  */

/*-----------------------------------------------------------------*/
/*  bseval.c
    Calculation of B-spline value.
*/

/*  Purpose ...
    -------
    Calculates the B-spline value at the location defined by the
    parameter, knot vector, control points and order passed to this
    routine.


  Input ...
  -----
  index      :  Control order of B-spline basis functions calculated.  Normally
                set to 1, unless the previous call to bsplvb or this routine
                was for the same parameter, and the order of basis functions
                one less than the previous call.  See bsplvb().
  parameter  :  Parameter value at which to calculate the B-spline value.
  left       :  Position in knot vector such that
                knot[left] <= parameter < knot[left+1]  Generally found by
                calling interv().
  bspldefn   :  Structure containing the data defining the B-spline.

  Output ...
  ------
  bseval     :  B-spline value.
  flag       :  Status indicator.
                flag = 0  Successful.
                flag = 1  Failed to assign memory required within this
                routine.

  This C code written by ...   Nigel and Peter.
  ----------------------       Design Software
                               42 Gubberley Street,
                               KENMORE, QLD, 4069.
                               AUSTRALIA.

  Version ...   1.0  FORTRAN, 1985.
  -------       2.0  C, July 1989.

  Notes ...
  -----
  (1)  Uses the CMATH routines bsplvb().

  (2)  A call to bsplinit() must be made prior to the first call of this
       routine, to allocate memory required by bsplvb() (based on the order
       of the spline).

  (3)  A call to bsplend() should be made when no there is to be no further
       use of any routine which calls bsplvb() (to free associated memory).

  (4)  If speed is of prime importance, then the code in this routine should
       be used in-line.

*/

#if (PROTOTYPE)

double  bseval (int index, double parameter,
		struct BSPLSTRC *bspldefn, int *flag)

#else

double  bseval (index, parameter, bspldefn, flag)

int     index;
double  parameter;
struct  BSPLSTRC *bspldefn;
int     *flag;

#endif

{  /*  Beginning of procedure bseval ().  */
int     left, i, orderm1;
double  coord;

*flag = 0;
interv (bspldefn->knots, bspldefn->nknot, parameter, &left, flag);
if (parameter == bspldefn->knots[bspldefn->nknot-1])
   {
   left = bspldefn->nknot - bspldefn->order - 1;
   *flag = 0;
   }
if (*flag != 0)
   {
   *flag = 1; return (0.0);
   }
bsplvb (bspldefn->knots, bspldefn->order, index, parameter, left, Bsplvalues,
	flag);
/*for (i = 0; i < bspldefn->order; i ++)  printf ("%8.6lf  ", Bsplvalues[i]);
printf ("\n");*/

if (*flag == 1)
   {
   *flag = 2;  return (0.0);
   }
coord = 0.0e0;
orderm1 = bspldefn->order - 1;
for ( i = 0; i  <= orderm1;  i ++)
   coord += Bsplvalues[i] * bspldefn->cpnts[left - orderm1 + i];
return (coord);

}  /*  End of procedure bseval()  */

/*-------------------------------------------------------------------------*/

/*  bsdcpnts.c
    Calculation of control points for B-spline derivatives.
*/

/* Purpose ...
   -------
   Calculates the control points required for the computation of the
   derivative(s) of a B-spline, from the control points and knot vector
   of the undifferentiated spline.


   Input ...
   -----


   Output ...
   ------
   deriv            :  Control points for the derivative of the B-spline.
   flag             :  Status indicator.
                       flag = 0  Successful.
                       flag = 1  Failed to assign memory required within this
                                 routine.

   Version ...   1.0, August 1989.
   -------       1.1, September 1989.  Implement check on zero denominator.

   Notes ...
   -----

   (1)  Vectors orignl_cpnts[], deriv_cpnts[] must have memory allocated to
        them prior to calling this routine.  Hopefully, there will also be
        something useful in orignl_cpnts[].

   (2)  If speed is of prime importance, then the code in this routine should
        be used in-line.

   (3)  For the x'th derivative, this routine must be called x times, using
        the output from the previous call as input.

   (4)  For a derivation of the relationship between a B-spline and its
        derivatives, see:
        de Boor, C.  On Calculating with B-splines.  J.  Approx. Theory.  6
        (1972)  pp50-62.


*/

#if (PROTOTYPE)

int  bsdcpnts (struct BSPLSTRC *orignl,
               struct BSPLSTRC *deriv, int *flag)
#else

int  bsdcpnts (orignl, deriv, flag)

struct BSPLSTRC *orignl;
struct BSPLSTRC *deriv;
int *flag;

#endif

{  /*  Beginning of procedure bsdcpnts ().  */
int     origkm1, num_cpntsm1, i;
double  temp_float;

num_cpntsm1 = orignl->nknot - orignl->order - 1;
/*  Difference number_cpnts, hence number_cpnts - 1 control points for
   derivative.
*/

deriv->order = orignl->order-1;
deriv->nknot = orignl->nknot - 2;
deriv->knots = (double *) malloc (deriv->nknot * sizeof (double));
deriv->cpnts = (double *) malloc ((deriv->nknot - deriv->order) *
                                      sizeof (double));
if (deriv->knots == NULL || deriv->cpnts == NULL)  {
   *flag = 1;
   return (1);
}
for (i = 0; i < deriv->nknot; i++) deriv->knots[i] = orignl->knots[i+1];

origkm1 = orignl->order - 1;
for ( i = 1; i  <= num_cpntsm1;  i ++)  {
  temp_float = orignl->knots[i + origkm1] - orignl->knots[i];
  if (temp_float <= 0.0)
     deriv->cpnts [i-1] = 0.0;
    else
     deriv->cpnts [i-1] = (orignl->cpnts[i] - orignl->cpnts[i-1]) /
                         temp_float * (float) origkm1;
}
return (0);
}  /*  End of procedure bsdcpnts()  */


/*-------------------------------------------------------------------------*/


/*  Bisection search once main routine has bracketed knot interval.  */

int  bisect ()

{  /*  Beginning of procedure bisect ().  */
  Middle = (Ilo + Ihi) / 2;
  while (Middle != Ilo) {
     if (Param < T[Middle])
        Ihi = Middle;
       else
        Ilo = Middle;
     Middle = (Ilo + Ihi) / 2;
  }
  return (Ilo);
}  /*  End of procedure bisect()  */

/*-------------------------------------------------------------------------*/

#if (PROTOTYPE)

int  interv (double knots[], int nknots, double parameter, int *left,
             int *flag)

#else

int  interv (knots, nknots, parameter, left, flag)

int    nknots, *left, *flag;
double  knots[], parameter;

#endif

/* Purpose ...
   Computes left = max(i, where 0 <= i < nknots and knots(i) <= parameter)
   The programme is designed to be efficient in the common situation that
   it is called repeatedly, with 'parameter' taken from an increasing or
   decreasing sequence.


   Input ...
   -----
   knots[]   :  A real sequence, of length nknots, assumed to be
                non-decreasing.
   nknots  :  Number of terms in the sequence knots.
   parameter :  The point whose location with respect to the sequence 'knots'
                is to be determined.

   Output ...
   ------
   left      :  max(i, where 0 <= i < nknots and knots(i) <= parameter)
   flag      :  status flag.
                flag =  0  Normal return.
                flag = -1  The parameter value is less than knot [0].
                flag =  1  The parameter value is greater than
                           knot [nknots - 1].


   This C code written by ...  Nigel and Peter,
   ----------------------      Design Software,
                               42 Gubberley St,
                               KENMORE, 4069,
                               Australia.

   Version ...   1.0, FORTRAN 1985.
   -------       2.0, Pascal  1987.
                 3.0, C April 1989.
                 3.1, 17 July 1989.  (array indexing from zero, case for
                                     index.)

    Notes ...
    -----
    (1)  Adapted from the FORTRAN code in:
         de Boor, C.  A Practical Guide to Splines.  Applied Mathematical
         Sciences Volume 27.  Springer-Verlag, New York.  1978.

    (2)  knots[0] must be less than knots[nknots-1].

*/
/*-------------------------------------------------------------------------*/

{  /*  Begin procedure interv()  */

int  istep;

  *flag = 0;
  Ihi = Ilo + 1;
  if ( Ihi >= nknots ) {
     Ihi = nknots - 1;
     Ilo = Ihi - 1;
  }

/*  Set up values for bisect.  */
  Param = parameter;
  T = knots;

  if ( Param < knots[Ihi] ) {
     if ( Param >= knots[Ilo] ) {  /*  have bracketed parameter - finished!  */
        *left = Ilo;
        return (0);
     };

/*  Param < knots[Ilo], decrease Ilo  */
     istep = 1;
     Decr_ilo:
        Ihi = Ilo;
        Ilo = Ihi - istep;
        if ( Ilo <= 0 ) {
/*  Check input data for validity.  Last resort.  */
           if (Param < knots[0])  {
              *flag = -1;
              *left = 0;
              return (-1);
           }
           Ilo = 0;
           *left = bisect ();
           return (0);
        };
        if ( Param >= knots[Ilo] ) {
           *left = bisect ();
           return (0);
        }
        istep = istep * 2;
     goto Decr_ilo;
     }
    else  {
/*  parameter >= knots[Ihi], increase Ihi  */
     istep = 1;
     Incr_ihi:
        Ilo = Ihi;
        Ihi = Ilo + istep;
        if ( Ihi >= nknots - 1 ) {
           Ihi = nknots - 1;
/*  Check input data for validity.  Last resort.  */
           if (Param >= knots[Ihi])  {
              *flag = 1;
              *left = Ihi;
              return (1);
           }
           *left = bisect ();
           return (0);
        };
        if ( Param < knots[Ihi] ) {
           *left = bisect ();
           return (0);
        }
        istep = istep * 2;
     goto Incr_ihi;
     }
}  /*  End on procedure interv()  */

/*-------------------------------------------------------------------------*/

/*  bsplvb.c
    Calculation of B-spline basis function values.
*/


#if (PROTOTYPE)

int  bsplinit (int order, int *flag)

#else

int  bsplinit (order, flag)

int  order, *flag;

#endif

/*  Purpose ...
    Assign memory for matrices within bsplvb().
    Done here for speed.
*/
{  /*  Beginning of procedure bsplinit()  */
*flag = 0;
/*  A little ditty to make sure interv() kicks off correctly.  */
Ilo = 0;
/*  Now fix startup for bsplvb().  */
Deltal = (double *) malloc (order * sizeof(double));
Deltar = (double *) malloc (order * sizeof(double));
/*  Memory for storing B-spline values in bspline() and bseval()  */
Bsplvalues = (double *) malloc (order * sizeof(double));
if (Deltal == NULL || Deltar == NULL || Bsplvalues == NULL)
   {
   *flag = 1;
   return (1);
   }

return (0);
}  /*  End of procedure bsplinit().  */

/*-------------------------------------------------------------------------*/

int  bsplend ()

/*  Purpose ...
    Free the memory used by bsplvb().
*/
{
if (Deltal != NULL)  { free (Deltal); Deltal = NULL; }
if (Deltar != NULL)  { free (Deltar); Deltar = NULL; }
if (Bsplvalues != NULL)  { free (Bsplvalues); Bsplvalues = NULL; }
return (0);

}  /* End of procedure bsplend().  */

/*-------------------------------------------------------------------------*/

#if (PROTOTYPE)

int  bsplvb (double knots[], int jhigh, int index, double parameter,
             int left, double biatp[], int *flag)

#else

int  bsplvb (knots, jhigh, index, parameter, left, biatp, flag)

double  knots[];
int     jhigh, index;
double  parameter;
int     left;
double  biatp[];
int     *flag;

#endif

/* Purpose ...
   Calculates the value of all possibly nonzero B-spline basis functions at
   parameter value 'parameter', of order
               jout = max (jhigh, (j+1)*(index-1))
   with knot sequence 'knots[]'.


   Input ...
   -----
   knots[]    :  Knot sequence, of length at least left+jout, assumed to be
                 non-decreasing.
   jhigh,
   index      :  Integers which determine the order jout of the B-splines
                 whose values at 'parameter' are to be returned.
                 Index is used to avoid recalculations when several columns
                 of the triangular array of B-spline values are needed.
                 eg. for calculation of derivatives.
                 If index = 1,
                 the calculations start from scratch and the entire triangular
                 array of B-spline values of orders 1, 2,......jhigh is
                 generated order by order, ie. column by column.
                 If index = 2,
                 only the B-spline values of order J+1, J+2,......,jout are
                 generated, the assumption being that biatp, j, Deltal, Deltar,
                 are, on entry, as they were on exit at the previous call.
                 If jhigh = 0,
                 then jout = j +  1, and just the next column of B-splines are
                 calculated.
   left      :  Unless you want STRANGE numbers, should be such that
                knots(left) <= parameter < knots(left+1)

   Output ...
   ------
   biatp      :  Vector of length jout, containing the values of the B-spline
                 basis functions of use at 'parameter', of the polynomial of
                 order jout.
   *flag      :  Status flag.
                 flag = 0  Normal return.
                 flag = 1  Memory not assigned to work arrays.
                 flag = 2  Invalid value of index passed.

   Notes ...
   -----
   (1)  Adapted from the FORTRAN code in:
        de Boor, C.  A Practical Guide to Splines.  Applied Mathematical
        Sciences Vol. 27.  Springer-Verlag, New York.  1978.

   (2)  A complete derivation of this (and one other) calculation technique
        is given in:
        de Boor, C.  On Calculating with B-splines.  J.  Approx. Theory.  6
        (1972)  pp50-62.

   (3)  Division by zero will result if knots[left] = knots[left+1]
*/
/*-------------------------------------------------------------------------*/

{
int     i, jp1, jm1;
static int  j;  /*  declared static to preserve for new call if required.  */
double  saved, term;

*flag = 0;
if (Deltal == NULL || Deltar == NULL)  {
   *flag = 1;
   return (1);
}
/*printf ("\n\nparameter = %f\n", parameter);*/
switch (index) {
  case 1:  j = 1;
           biatp[0] = 1.0e0;
  case 2:  while (j < jhigh) {
              jp1 = j + 1;
              jm1 = j - 1;
              Deltar[jm1] = knots[left + j] - parameter;
	      Deltal[jm1] = parameter - knots[left - jm1];
/*	      printf ("Deltar[%d] = %f, Deltal[%d] = %f\n", jm1, Deltar[jm1] ,
		       jm1, Deltal[jm1] );*/
              saved = 0.0e0;
              for (i = 0; i <= jm1; i++) {
                 term = biatp[i] / (Deltar[i] + Deltal[jm1 - i]);
                 biatp[i] = saved + Deltar[i] * term;
		 saved = Deltal [jm1 - i] * term;
/*		 printf ("term = %f, biatp[%d] = %f, saved = %f\n", term, i,
			   biatp[i], saved);*/
              }
	      biatp[j] = saved;
/*	      printf ("biatp[%d] = %f\n", j, biatp[j]);*/
              j = jp1;
	   }  /* end of while */
           return (0);
  default:  {
            *flag = 2;
            return (2);
            }
}

}  /*  End of procedure bsplvb()  */

/*-------------------------------------------------------------------------*/
@
