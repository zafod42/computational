head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* qk21.c
   Fixed rule Gaussian Quadrature.

   Although these routines are part of the adaptive quadrature
   routine qags(), they may be used separately as demonstrated
   in qk21d.c
   */

/************************************************/
/*                                              */
/*  CMATH.  Copyright (c) 1989 Design Software  */
/*                                              */
/************************************************/

#include "cmath.h"
#include <math.h>

/*-----------------------------------------------------------------*/

#define    zero       0.0
#define    half       0.5
#define    one        1.0
#define    MAX(a,b)   (((a) > (b)) ? (a) : (b))
#define    MIN(a,b)   (((a) < (b)) ? (a) : (b))

/*  epmach - the largest relative spacing.
    uflow  - the smallest positive magnitude.  */
#define    epmach     EPSILON
#define    uflow      UNDRFLOW

/* coefficients for qk21()  */
static double wg[5+1], wgk[11+1], xgk[11+1];

/*------------------------------------------------------------------*/

#if (PROTOTYPE)

int qk21 (double (*f)(double x), double a, double b,
          double *result, double *abserr,
          double *resabs, double *resasc)

#else

int qk21 (f, a, b, result, abserr, resabs, resasc)

double (*f)();
double a, b;
double *result, *abserr;
double *resabs, *resasc;

#endif

/* Purpose ...
   -------
   Compute I = integral of f over (a, b), with error estimate.
   j = integral of abs(f) over (a, b).  The user may safely call
   this function directly for fixed rule quadrature.

   Input ...
   -----
   f      : function subprogram defining the integrand function f(x).
   a      : lower limit of integration.
   b      : upper limit of integration.

   Output ...
   ------
   result : approximation to the integral I.
            result is computed by applying the 21-point
            Kronrod rule (resk) obtained by optimal addition
            of abscissae to the 10 point gauss rule (resg).
   abserr : estimate of the modulus of the absolute error,
            which should not exceed abs(I - result).
   resabs : approximation to the integral j.
   resasc : approximation to the integral of abs(f - I / (b - a))
            over (a, b).

   This C code written by ...  Peter & Nigel,
   ----------------------      Design Software,
                               42 Gubberley St,
                               Kenmore, 4069,
                               Australia.

   Notes ...
   -----
   (1) List of major variables ...
       centr  : mid point of interval.
       hlgth  : half-length of the interval.
       absc   : abscissa.
       fval*  : function value.
       resg   : result of the 10-point gauss formula.
       resk   : result of the 21-point kronrod formula.
       reskh  : approximation to the mean value of f over (a,b),
                i.e. to I / (b - a).

   (2) machine dependant constants...
       epmach is the largest relative spacing.
       uflow  is the smallest positive magnitude.
       oflow  is the largest magnitude.

   (3) The abscissae and weights are given for the interval (-1, 1).
       Because of symmetry only the positive abscissae and their
       corresponding weights are given.
       xgk    : abscissae of the 21-point kronrod rule
                xgk(2), xgk(4), ... abscissae of the 10-point
                gauss rule.
                xgk(1), xgk(3), ... abscissae which are optimally
                added to the 10-point gauss rule.
       wgk    : weights of the 21-point kronrod rule.
       wg     : weights of the 10 point gauss rule.

*/

{  /* begin function qk21() */

static double absc, centr, dhlgth, fc, fsum;
static double fval1, fval2, fv1[10+1], fv2[10+1], hlgth;
static double resg, resk, reskh;
extern double wg[5+1], wgk[11+1], xgk[11+1];
double temp1;

static int    j, jtw, jtwm1;

centr  = half * (a + b);
hlgth  = half * (b - a);
dhlgth = fabs(hlgth);

/* compute the 21-point kronrod approximation to the integral,
   and estimate the sbsolute error.  */

resg    = zero;
fc      = (*f)(centr);
resk    = wgk[11] * fc;
*resabs = fabs(resk);
for (j = 1; j <= 5; ++j)
  {
  jtw      = 2 * j;
  absc     = hlgth * xgk[jtw];
  fval1    = (*f)(centr - absc);
  fval2    = (*f)(centr + absc);
  fv1[jtw] = fval1;
  fv2[jtw] = fval2;
  fsum     = fval1 + fval2;
  resg    += wg[j] * fsum;
  resk    += wgk[jtw] * fsum;
  *resabs += wgk[jtw] * (fabs(fval1) + fabs(fval2));
  }
for (j = 1; j <= 5; ++j)
   {
   jtwm1      = 2 * j - 1;
   absc       = hlgth * xgk[jtwm1];
   fval1      = (*f)(centr - absc);
   fval2      = (*f)(centr + absc);
   fv1[jtwm1] = fval1;
   fv2[jtwm1] = fval2;
   fsum       = fval1 + fval2;
   resk      += wgk[jtwm1] * fsum;
   *resabs   += wgk[jtwm1] * (fabs(fval1) + fabs(fval2));
   }
reskh   = resk * half;
*resasc = wgk[11] * fabs(fc - reskh);
for (j = 1; j <= 10; ++j)
   {
   *resasc += wgk[j] * (fabs(fv1[j] - reskh) + fabs(fv2[j] - reskh));
   }
*result  = resk * hlgth;
*resabs *= dhlgth;
*resasc *= dhlgth;
*abserr  = fabs((resk - resg) * hlgth);
if (*resasc != zero && *abserr != zero)
   {
   temp1   = 200.0 * (*abserr) / (*resasc);
   temp1   = pow (temp1, 1.5);
   *abserr = (*resasc) * MIN(one, temp1);
   }
if (*resabs > (uflow / (50.0 * epmach)))
   {
   temp1   = epmach * 50.0 * (*resabs);
   *abserr = MAX(temp1, *abserr);
   }

return (0);
}  /* end of function qk21()  */

/*------------------------------------------------------------------*/

#if (PROTOTYPE)

int qk21init (void)

#else

int qk21init ()

#endif

/* Purpose ...
   -------
   Initialize the coefficients in the quadrature routine qk21().
   This routine must be called before qk21() is used.

   Input ... none
   -----

   Output ... none
   ------

   Notes ...
   -----
   (1) The abscissae and weights are given for the interval (-1, 1).
       Because of symmetry only the positive abscissae and their
       corresponding weights are given.
       xgk    : abscissae of the 21-point kronrod rule
                xgk(2), xgk(4), ... abscissae of the 10-point
                gauss rule.
                xgk(1), xgk(3), ... abscissae which are optimally
                added to the 10-point gauss rule.
       wgk    : weights of the 21-point kronrod rule.
       wg     : weights of the 10 point gauss rule.

*/

{  /* begin qk21init() */

extern double wg[5+1], wgk[11+1], xgk[11+1];

xgk[1]  = 9.956571630258081e-01;
xgk[2]  = 9.739065285171717e-01;
xgk[3]  = 9.301574913557082e-01;
xgk[4]  = 8.650633666889845e-01;
xgk[5]  = 7.808177265864169e-01;
xgk[6]  = 6.794095682990244e-01;
xgk[7]  = 5.627571346686047e-01;
xgk[8]  = 4.333953941292472e-01;
xgk[9]  = 2.943928627014602e-01;
xgk[10] = 1.488743389816312e-01;
xgk[11] = 0.000000000000000e+00;

wgk[1]  = 1.169463886737187e-02;
wgk[2]  = 3.255816230796473e-02;
wgk[3]  = 5.475589657435200e-02;
wgk[4]  = 7.503967481091995e-02;
wgk[5]  = 9.312545458369761e-02;
wgk[6]  = 1.093871588022976e-01;
wgk[7]  = 1.234919762620659e-01;
wgk[8]  = 1.347092173114733e-01;
wgk[9]  = 1.427759385770601e-01;
wgk[10] = 1.477391049013385e-01;
wgk[11] = 1.494455540029169e-01;

wg[1] = 6.667134430868814e-02;
wg[2] = 1.494513491505806e-01;
wg[3] = 2.190863625159820e-01;
wg[4] = 2.692667193099964e-01;
wg[5] = 2.955242247147529e-01;

return (0);
}  /* end of qk21init()  */

/*-----------------------------------------------------------------*/

@
