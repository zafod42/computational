head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* linem.c
   One dimensional function minimizer along a specified line.  */

double linem (f, pvect, direct, n,
              tol, itmax, xmin, bound,
              uvect, nfe, flag)

double (*f)();
double pvect[], direct[];
int    n;
double tol;
int    itmax;
double *xmin, bound;
double uvect[];
int    *nfe, *flag;

/* Purpose ...
   -------
   Given a function F, a starting point PVECT and a direction
   to search DIRECT, this routine first brackets and then
   isolates the minimum to a fractional precision of
   about TOL using Brent's method.

   Input ...
   -----
   f        : externally defined objective function f(x)
   pvect    : origin of line along which to search
   direct   : vector direction of search
   n        : number of elements in pvect
   tol      : precision to which the minimum should be found
              For well behaved functions the value of TOL should
              be set greater than the square root of the machine
              precision.
   itmax    : number of iterations allowed
              There is one function evaluation per iteration.
              For a well behaved function, 100 should be plenty.
   bound    : limit on the magnitude of the distance moved along
              the search line (say 1000.0)
   nfe      : number of function evaluations made before entry

   Output ...
   ------
   xmin     : parameter value at minimum
   pvect    : vector "abscissa" at minimum
   direct   : initial direction scaled by xmin
   linem    : minimum value of objective function
   nfe      : total number of function evaluations
   flag     : = 0, normal return
              = 1, exceeded maximum number of iterations
              = 2, out of bounds without bracketing, no valid
                   result is returned

   WorkSpace ...
   ---------
   uvect    : vector of dimension n defining a point
              It has elements
              uvect[jj] = pvect[jj] + u * direct[jj]
              where u is a parameter measuring along
              the line "DIRECT".

   Version ... 1.0  October, 1988
   -------

   Notes ...
   -----
   (1) Adapted from the text
       W.H. Press et al
       Numerical Recipes. The art of scientific computing.
       by
       P.A. Jacobs & N.J. Lott
       Department of Mechanical Engineering
       University of Queensland
   (2) Does not require derivative information.
-------------------------------------------------------------------*/

/* cgold = golden ratio */
#define   cgold   0.3819660
/* zeps  = a small number which protects against trying to achieve
           fractional accuracy for a minimum that happens to be
           exactly zero.  */
#define   zeps    1.0e-16
#define   SIGN(a,b)  ((b >= 0.0) ? fabs(a) : -fabs(a))

{  /* begin linem()  */

int    iter, jj, bflag;
int    braket();
int    fitp;
double ax, bx, cx, fa, fb, fc;
double a, b, v, w, x, e, fx, fv, fw;
double xm, tol1, tol2,r, q, p, etemp, d;
double u, fu;

*flag = 0;

/*  Bracket the minimum  */

/*  First, guess the bracket  */
ax = 1.0;
bx = 2.0;
/*  then, improve it  */
braket (f, pvect, direct, n, &ax, &bx, &cx, bound,
        &fa, &fb, &fc, uvect, nfe, &bflag);
if (bflag != 0)
   { /* Could not bracket minimum in bounds */
   *flag = 2;
   return (0.0);
   }

/* A and B must be in ascending order, though the abscissas
   need not be.  */
if (ax < cx)
   { a = ax;  b = cx; }
else
   { a = cx;  b = ax; }

/* Initializations ... */

v = bx;
w = v;
x = v;
/* e will be the distance moved on the step before the last */
e = 0.0;
for (jj = 0; jj < n; ++jj) uvect[jj] = pvect[jj] + x * direct[jj];
fx = (*f) (uvect);
++(*nfe);
fv = fx;
fw = fx;

/* Main Loop ... */

for (iter = 1; iter <= itmax; ++iter)
   {
   xm = 0.5 * (a + b);
   tol1 = tol * fabs(x) + zeps;
   tol2 = 2.0 * tol1;

   /* Test done here. */
   if (fabs(x-xm) <= (tol2-0.5*(b-a))) goto L3;

   if (fabs(e) > tol1)
      {  /* Construct a trial parabolic fit.  */
      fitp = 1;
      r = (x - w) * (fx - fv);
      q = (x - v) * (fx - fw);
      p = (x - v) * q - (x - w) * r;
      q = 2.0 * (q - r);
      if (q > 0.0) p = -p;
      q = fabs(q);
      etemp = e;
      e = d;
      }
   else fitp = 0;

   /* If the parabolic fit acceptable, then take it.  */
   if ((fabs(p) >= fabs(0.5 * q * etemp)) || (p <= q * (a-x))
       || (p >= q * (b-x)) || !fitp)
      {  /* Take a golden step into the larger of the two segments.  */
      if(x >= xm) e = a - x; else  e = b - x;
      d = cgold * e;
      }
   else
      {  /* The parabolic step is ok, use it.  */
      d = p / q;
      u = x + d;
      if ((u-a < tol2) || (b-u < tol2))
	 {
	 /* d = SIGN(tol1, (xm-x)); */
	 if ((xm - x) >= 0.0) d = fabs(tol1); else d = -fabs(tol1);
	 }
      }


   /* Arrive here with D computed either from the parabolic fit
      or the golden section  */

   if (fabs(d) >= tol1)
      u = x + d;
   else
      {  /* move at least a little. */
      /* u = x + SIGN(tol1, d); */
      if (d >= 0.0) u = x + fabs(tol1);
	       else u = x - fabs(tol1);
      }

   /* This is the one function evaluation per iteration. */
   for (jj = 0; jj < n; ++jj)  uvect[jj] = pvect[jj] + u * direct[jj];
   fu = (*f)(uvect);
   ++nfe;

   /* Now we have to decide what to do with the function value. */
   if (fu <= fx)
      {
      if (u >= x) a = x; else b = x;
      v = w;
      fv = fw;
      w = x;
      fw = fx;
      x = u;
      fx = fu;
      }
   else
      {
      if (u < x) a = u; else b = u;
      if ((fu <= fw) || fabs(w - x) < zeps)
	 {
         v = w;
         fv = fw;
         w = u;
         fw = fu;
	 }
      else if ((fu <= fv) || fabs(v - x) < zeps || fabs(v - w) < zeps)
	 {
         v = u;
         fv = fu;
	 }
      }

   }   /* Return for another iteration. */

/* have exceeded maximum iterations */
*flag = 1;

/* Return the best guess for the minimum even if we did not
   achieve the desired tolerance.  */

L3:  /* get out after recording the best estimate for the minimum. */
*xmin = x;
for (jj = 0; jj < n; ++jj)
   {
   direct[jj] *= x;
   pvect[jj] += direct[jj];
   }
return (fx);

}  /* end of linem()  */

#undef zeps
#undef cgold
#undef SIGN@
