head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* cdecompd.c
   Sample driver for cdecomp() and csolve().
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

#define mdim 10
#define INDX(i, j)  (i) * mdim + (j)

main ()
{
static struct COMPLEX a[mdim * mdim], b[mdim];
double cond;
int    n, pivot[mdim], i, flag;
double s;

n       = 3;

/* Set up real parts. */
s       = 1.0e-6;  /* as s ---> 0.0, matrix becomes singular */
b[0].re = 8.0;           b[1].re = 15.0+s;         b[2].re = 7.0;
a[INDX(0,0)].re = 1.0;   a[INDX(0,1)].re = 2.0;    a[INDX(0,2)].re = 2.0;
a[INDX(1,0)].re = 2.0+s; a[INDX(1,1)].re = 9.0;    a[INDX(1,2)].re = 4.0;
a[INDX(2,0)].re = 1.0;   a[INDX(2,1)].re = 7.0;    a[INDX(2,2)].re = 2.0;

/* Set up imaginary parts. */
b[0].im = 2.0;           b[1].im = 15.0+s;         b[2].im = 13.0;
a[INDX(0,0)].im = -1.0;  a[INDX(0,1)].im = -1.0;   a[INDX(0,2)].im = -1.0;
a[INDX(1,0)].im = 0;     a[INDX(1,1)].im = 0.0;    a[INDX(1,2)].im = 0.0;
a[INDX(2,0)].im = 1.0;   a[INDX(2,1)].im = 1.0;    a[INDX(2,2)].im = 1.0;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nTest driver for cdecomp() and csolve().\n\n");

cdecomp (n, mdim, a, &cond, pivot, &flag);
printf ("%s\n", cmathmsg(CDECOMP_C, flag));

if (flag == 0)
   {
   csolve (n, mdim, a, b, pivot);

   printf ("Solution    =     ");
   for(i = 0; i < n; i++) printf ("(%6.3f, %6.3f) ", b[i].re, b[i].im);
   printf ("\n");
   printf ("Correct answer is (1.0, 1.0), (1.0, 1.0), (1.0, 1.0)\n");

   printf ("\n");
   printf ("Condition number = %e\n", cond);
   }

return (0);
}
@
