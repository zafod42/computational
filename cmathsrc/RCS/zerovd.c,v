head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* zerovd.c
   Sample driver for the simultaneous eqn solver zerov().
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
#define ndim 9
double x[ndim], fvec[ndim], xtol, ftol, L2norm;
double NAG[ndim];
int    i, n, flag, nfe, method;
#if (PROTOTYPE)
int    f (int n, double *x, double *fv);
int    jacob (int n, double *x, double *rj);
#else
int    f ();
int    jacob ();
#endif

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nExercise the equation solver zerov().\n\n");

NAG[0] = -0.5707;  NAG[1] = -0.6816;  NAG[2] = -0.7017;
NAG[3] = -0.7042;  NAG[4] = -0.7014;  NAG[5] = -0.6919;
NAG[6] = -0.6658;  NAG[7] = -0.5960;  NAG[8] = -0.4164;

n      = 9;
nfe    = 200;
xtol   = 1.0e-5;
ftol   = 1.0e-5;
method = -2;
for (i = 0; i < n; ++i) x[i] = -1.0;  /* initial guess */

printf ("First, use minimizer...\n");
zerov (f, jacob, n, x, fvec, xtol, ftol, method, &nfe, &flag);
printf ("%s\n", cmathmsg(ZEROV_C, flag));

if (flag == 0 || flag == 3 || flag == 4)
   {
   printf ("Solution ...\n");
   printf ("    x           NAG        residual\n");
   printf ("-----------------------------------\n");
   for (i = 0; i < n; ++i)
      printf ("%10.5f  %10.4f  %10.3e\n", x[i], NAG[i], fvec[i]);

   L2norm = 0.0;
   for (i = 0; i < n; ++i) L2norm += fvec[i] * fvec[i];
   printf ("\nL2 norm of residuals     = %10.3e\n", L2norm);
   printf ("Number of fn evaluations = %d\n\n", nfe);
   }

nfe    = 100;
xtol   = 1.0e-10;
ftol   = 1.0e-10;
method = 1;

printf ("Second, improve solution with Newton-Raphson...\n");
zerov (f, jacob, n, x, fvec, xtol, ftol, method, &nfe, &flag);
printf ("%s\n", cmathmsg(ZEROV_C, flag));

if (flag == 0)
   {
   printf ("Solution ...\n");
   printf ("    x           NAG        residual\n");
   printf ("-----------------------------------\n");
   for (i = 0; i < n; ++i)
      printf ("%10.5f  %10.4f  %10.3e\n", x[i], NAG[i], fvec[i]);

   L2norm = 0.0;
   for (i = 0; i < n; ++i) L2norm += fvec[i] * fvec[i];
   printf ("\nL2 norm of residuals     = %10.3e\n", L2norm);
   printf ("Number of fn evaluations = %d\n", nfe);
   }

return (0);
}  /* end of main */


/* Set up the tridiagonal system given as the example in
   the NAG manual for C05NBF  */

int f (n, x, fvec)
int    n;
double *x;
double *fvec;

{
int i;

fvec[0] = (3.0 - 2.0 * x[0]) * x[0] - 2.0 * x[1] + 1.0;
for (i = 1; i < n-1; ++i)
   fvec[i] = -x[i-1] + (3.0 - 2.0 * x[i]) * x[i] - 2.0 * x[i+1] + 1.0;
fvec[n-1] = -x[n-2] + (3.0 - 2.0 * x[n-1]) * x[n-1] + 1.0;

return (0);
}



int jacob (n, x, jac)
int    n;
double *x;
double *jac;

{
int i, j;

for (i = 0; i < n; ++i)
   for (j = 0; j < n; ++j)
      jac[i * n + j] = 0.0;

jac[0] = 3.0 - 4.0 * x[0];
jac[1] = -2.0;

for (i = 1; i < n-1; ++i)
   {
   jac[i * n + i-1] = -1.0;
   jac[i * n + i]   = 3.0 - 4.0 * x[i];
   jac[i * n + i+1] = -2.0;
   }

jac[(n-1) * n + n-2] = -1.0;
jac[(n-1) * n + n-1] = 3.0 - 4.0 * x[n-1];

return (0);
}
@
