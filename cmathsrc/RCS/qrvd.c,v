head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* qrvd.c
   Sample driver for qrv() and qrvector().
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
#define  nm  4
#define  INDX(i, j)  (i) * nm + (j)
static double a[nm * nm], z[nm * nm], wr[nm], wi[nm];
static double a2[nm * nm], vr[nm], vi[nm];
double t, RHSr, RHSi, LHSr, LHSi, r;
int    n, flag, i, j, k;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nSample program for qrv() eigenvalue solver.\n");

n  = 4;
a[INDX(0,0)] =  4.0;  a[INDX(0,1)] = -5.0;
a[INDX(0,2)] =  0.0;  a[INDX(0,3)] =  3.0;
a[INDX(1,0)] =  0.0;  a[INDX(1,1)] =  4.0;
a[INDX(1,2)] = -3.0;  a[INDX(1,3)] = -5.0;
a[INDX(2,0)] =  5.0;  a[INDX(2,1)] = -3.0;
a[INDX(2,2)] =  4.0;  a[INDX(2,3)] =  0.0;
a[INDX(3,0)] =  3.0;  a[INDX(3,1)] =  0.0;
a[INDX(3,2)] =  5.0;  a[INDX(3,3)] =  4.0;

/* keep a copy of matrix a */
for (i = 0; i < n; ++i)
   for (j = 0; j < n; ++j) a2[INDX(i,j)] = a[INDX(i,j)];

qrv (nm, n, a, wr, wi, z, &flag);
printf ("\n%s\n", cmathmsg(QRV_C, flag));

if (flag == 0)
   {
   for (j = 0; j < n; ++j)
      {
      printf ("\nEigenvalue... (%6.2f, %6.2f)\n",wr[j], wi[j]);

      printf ("Eigenvector...\n");
      qrvector (j, nm, n, z, wr, wi, vr, vi, &flag);
      if (flag != 0) printf ("%s\n", cmathmsg (QRVECTOR_C, flag));
      for (i = 0; i < n; ++i)
         printf ("(%6.2f, %6.2f) ",vr[i], vi[i]);
      printf ("\n");

      /* return to eigenvalue definition and compute error
         in eigenvector */
      r = 0.0;
      for (k = 0; k < n; ++k)
         {
         LHSr = 0.0;  LHSi = 0.0;
         for (i = 0; i < n; ++i)
            {
            LHSr += a2[INDX(k,i)] * vr[i];
            LHSi += a2[INDX(k,i)] * vi[i];
            }
         cmultn (wr[j], wi[j], vr[k], vi[k], &RHSr, &RHSi);
         t = cabslt ((LHSr - RHSr), (LHSi - RHSi));
         r = (t > r) ? t : r;     /* select maximum value */
         }
      printf ("Maximum residual = %10.2e\n", r);
      }

   printf ("\nCorrect eigenvalues 12.0, 1.0+-5i & 2.0\n");
   }

return (0);
}  /* end of main() */
@
