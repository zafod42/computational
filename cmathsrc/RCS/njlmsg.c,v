head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@   case BANDFAC_C :
      switch (flag)
         {
         case 0  :  strcpy (s, "bandfac () :  normal return.");
                    break;
         case 1  :  strcpy (s, "bandfac () :  pivot of matrix = 0.0");
                    break;
         case 2  :  strcpy (s, "bandfac () :  nrow <= 1.");
                    break;
         case 3  :  strcpy (s, "bandfac () :  diagonal term in last row = 0.0");
                    break;
         default :  strcpy (s, "bandfac () :  no such error.");
         }
      break;

   case INIT_INTERV_C :
      switch (flag)
         {
         default :  strcpy (s, "init_interv () :  no such error.");
                    break;
         }
      break;
   case BISECT_C :
      switch (flag)
         {
         default :  strcpy (s, "bisect () :  no such error.");
                    break;
         }
      break;

   case INTERV_C :
      switch (flag)
         {
         case 0  :  strcpy (s, "interv () : normal return.");
                    break;
         case -1  :  strcpy (s, "interv () : parameter value less than knot[0].");
                    break;
         case 1  :  strcpy (s, "interv () : parameter value greater that knot[maxi].");
                    break;
         default  :  strcpy (s, "interv () : no such error.");
         }
      break;

   case INIT_BSPLVB_C :
      switch (flag)
         {
         case 0  :  strcpy (s, "init_bsplvb () : normal return.");
                    break;
         case 1  :  strcpy (s, "init_bsplvb () : unable to reserve memory for bsplvb.");
                    break;
         default :  strcpy (s, "init_bsplvb () : no such error.");
         }
      break;

   case BSPLVB_C :
      switch (flag)
         {
         case 0  :  strcpy (s, "bsplvb () : normal return.");
                    break;
         case 1  :  strcpy (s, "bsplvb () : invalid value for index.");
                    break;
         default :  strcpy (s, "bsplvb () : no such error.");
         }
      break;

   case FREE_BSPLVB_C :
      switch (flag)
         {
         default :  strcpy (s, "free_bsplvb () :  no such error.");
                    break;
         }
      break;

   case BSPLINE_C :
      switch (flag)
         {
         case 0  :  strcpy (s, "bspline () : normal return.");
                    break;
         case 1  :  strcpy (s, "bspline () : init_bsplvb () : unable to assign memory for bsplvb.");
                    break;
         case 2  :  strcpy (s, "bspline () : interv () : parameter outside valid knot range.");
                    break;
         case 3  :  strcpy (s, "bspline () : bandfac () : error in decompostion of banded matrix.");
                    break;
         default :  strcpy (s, "bspline () : no such error.");
         }
      break;

   case BSEVAL_C :
      switch (flag)
         {
         case 0  :  strcpy (s, "bseval () : normal return.");
                    break;
         case 1  :  strcpy (s, "bseval () : unable to allocate work space.");
                    break;
         case 2  :  strcpy (s, "bseval () : bsplvb () : invalid value for index.");
                    break;
         default :  strcpy (s, "bseval () : no such error.");
         }
      break;

    case BSDERIV_CPNTS_C :
       switch (flag)
          {
          case  0  :  strcpy (s, "bsderiv_cpnts () : normal return.");
                      break;
          case  1  :  strcpy (s, "bsderiv_cpnts () : NULL pointer to matrix of control points.");
                      break;
          case  2  :  strcpy (s, "bsderiv_cpnts () : NULL pointer to matrix for derivative control points.");
                      break;
          default  :  strcpy (s, "bsderiv_cpnts () : no such error.");
          }
       break;

    case BSDERIV_C :
      switch (flag)
         {
         case 0  :  strcpy (s, "bsderiv () : normal return.");
                    break;
         case 1  :  strcpy (s, "bsderiv () : unable to allocate work space.");
                    break;
         case 2  :  strcpy (s, "bsderiv () : bsplvb () : invalid value for index.");
                    break;
         default :  strcpy (s, "bsderiv () : no such error.");
         }
@
