head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* complexd.c
   Exercise the complex number routines.
*/

#include <math.h>
#include <stdio.h>

#include "complex.h"

main ()
{
int    WaitForMe ();
struct COMPLEX a, b, c, d;
struct COMPLEX Czero = {0.0, 0.0};
struct COMPLEX Cone  = {1.0, 0.0};
struct COMPLEX Cimg  = {0.0, 1.0};
double  x, y;

printf ("create a stack of 10 elements and reset it ..\n");
Cinit (10);
Creset();

x = 2.0;
y = 3.0;
Cmplx (x, y, &a);
Cmplx (3.0, 2.0, &b);

printf ("\nload stack ..\n");
if (Cpush(&a)) printf ("stack overflow\n");
if (Cpush(&b)) printf ("stack overflow\n");
Cdup();
Cdup();
Cprint (10);
WaitForMe();

printf ("\ninvert top element..\n");
Cinv();
Cprint(5);
printf ("\nmultiply top two elements..\n");
Cmult();
Cprint(5);
WaitForMe();

printf ("\nadd top two elements\n");
Cadd();
Cprint(5);
WaitForMe();

printf ("\nsubtract ... \n");
Csub();
Cprint (5);
WaitForMe();

printf ("\nadd past end of stack ... \n");
Cadd();
WaitForMe();

printf ("\n start again ...\n");
Cpush (&Cone);
Cpush (&Cimg);
Cpush (&Czero);
Cprint (5);
WaitForMe();

printf ("\ntry out a divide by zero ...\n");
Cdiv ();
Cprint (5);
WaitForMe();

printf ("\ndivide ... \n");
Cdiv ();
Cprint (5);

printf ("\nsquare root ...\n");
Cpush (&a);
Cprint (1);
Csqrt ();
Cprint (1);
printf ("\nsquare again\n");
Cdup ();
Cmult ();
Cprint (3);
WaitForMe ();

printf ("\nConjugate ...\n");
Conjg();
Cprint (3);

printf ("\nNegate ... \n");
Cneg ();
Cprint (3);
WaitForMe();

printf ("\nswap ...\n");
Cswap ();
Cprint (3);

printf ("\ndrop ... \n");
Cdrop ();
Cprint (3);
Cdrop ();
Cdrop ();
Cdrop ();
WaitForMe ();

printf ("\nreal number operations ... \n");
x = 3.5;
Cpushr (x);
Cprint (5);
Cpopr (&y);
printf ("\ny = %f\n", y);

printf ("\nPolar rectangular transformations ...\n");
Cmplx (x, y, &c);
Cpush (&c);
Cprint (5);
Cpolar ();
Cprint (5);
Cart ();
Cprint (5);
WaitForMe();

printf ("\ntake square root using logs and exp ... \n");
Clog ();
Cprint (5);
Cpushr (0.5);
Cmult ();
Cprint (5);
Cexp();
printf ("\nsquare again ..\n");
Cdup ();
Cmult ();
Cprint (5);
WaitForMe();

printf ("\ntrig functions ...\n");
Creset();
x = 1.0;
y = 0.0;
Cmplx (x, y, &a);
Cmplx (y, x, &b);
Cpush (&a);
Csin();
Cpush (&b);
Csin();
Cprint (5);

printf ("\n\n---- end of trial ----\n");

Cend();
}

int WaitForMe ()
{
char junk;
printf ("\npress <RETURN> to continue ...");
scanf ("%c", &junk);
}@
