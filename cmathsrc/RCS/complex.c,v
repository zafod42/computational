head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* complex.c
   Complex number arithmetic.
*/

/************************************************/
/*                                              */
/*  CMATH.  Copyright (c) 1989 Design Software  */
/*                                              */
/************************************************/

/*

Purpose ...
-------
This file provides a set of functions for complex number arithmetic
based on a stack (similar in operation to the Hewlett-Packard
calculators).  The operations generally involve one or two stack
elements as operands.  These operands are obtained from the top of
the stack and on return the result is left as the top element
on the stack.

Although the routines are not written for speed I hope that
they will be robust as their FORTRAN counterparts.

The list of functions follows.  Note that operands are stored
on the stack in cartesian form.  This format is assumed by
all routines except Cart() which expects the top element to be
in polar form.   Most of the functions return an integer
completion code.  For more details see the the notes at the
start of each function.

1. constants
   ---------
   zeroC = (0.0, 0.0)
   oneC  = (1.0, 0.0)
   imgC  = (0.0, 1.0)

2. data conversions
   ----------------
   Cmplx(x, y, *z)    -- convert the two real elements to a complex number
   x = Creal(*z)      -- return the real part of z
   y = Cimag(*z)      -- return the complex part of z

3. stack operations
   ----------------
   Cinit(n)       -- create a stack of n elements
   Cend()         -- remove the complex stack
   Creset()       -- reset the stack
   Cpush(*z)      -- push z onto the top of the stack
   Cpop(*z)       -- Pop the top element from the top of the stack and
		     store as z
   Cpushr(x)      -- push the real number x onto the stack
   Cpopr(*x)      -- pop the real number x from the top of the stack
   Cdrop()        -- drop top element from stack
   Cdup()         -- duplicate the top element of the stack
   Cswap()        -- swap the top two elements of the stack

   Cprint(n)      -- print the top n stack elements without consuming
		     them (useful for debugging)

4. arithmetic operations
   ---------------------
   Cadd()         -- pop the top two elements off the stack, add them
		     and push the result back onto the stack
   Csub()         -- subtract the second top element from the top
   Cmult()        -- multiplicatiom
   Cdiv()         -- divide the second top element by the top element
   Cinv()         -- invert the top element
   Cneg()         -- negate the top element
   Conjg()        -- take the conjugate of the top element

   Cmag(*x)       -- returns the magnitude of the top element in x
   Cpolar()       -- convert the top element into polar coordinate form
   Cart()         -- convert from polar to cartesian form

5. functions
   ---------
   Cpow(r)        -- (top element)**r
   Csqrt()        -- square root of top element

   Cexp()         -- complex exponential
   Clog()         -- natural logarithm

   Csin()         -- complex sine
   Ccos()         -- complex cosine
   Ctan()         -- complex tangent

This C code written by ...  Peter & Nigel,
----------------------      Design Software,
                            42 Gubberley St,
                            Kenmore, 4069,
                            Australia.

Version ... 1.0,  October 1987
-------     2.0,  April   1988
            2.1,  April   1989   stack now allocated dynamically
            2.2,  July    1989   full function prototypes

Notes ...
-----
(1) The COMPLEX structure definition appears in complex.h.
(2) This file needs the standard maths library and the standard I/O
    library.
(3) This is not the first such set of routines.  See, for example,
    [2].  See [3] for a stack (implemented as a linked-list) oriented
    set of routines.

References ...
----------
[1] J.H. Wilkinson & C. Reinsch : "Handbook for automatic computation.
    vol II. Linear Algebra".  Springer-Verlag 1971
[2] D. Gedeon : "Complex math in Pascal". Byte July 1987.
[3] J.T. Lapreste : "A Pascal tool for complex numbers". Journal of
    Pacsal, Ada & Modula-2, May-June 1985.
[4] P.H. Sterbenz : "Floating point computation". Prentice-Hall 1974.

-------------------------------------------------------------------
*/
#include "cmath.h"
#include "complex.h"

#if (STDLIBH)
#include <stdlib.h>
#endif
#include <stdio.h>
#include <math.h>

#ifndef NULL
#define  NULL  0
#endif

/*-----------------------------------------------------------------*/

/* global "COMPLEX" definitions */

struct COMPLEX zeroC = {0.0, 0.0};
struct COMPLEX oneC  = {1.0, 0.0};
struct COMPLEX imgC  = {0.0, 1.0};

struct COMPLEX *Zstack, *Ztop, *Zbot, *Zmax;
static int     ZstackMAX;

/*-----------------------------------------------------------------*/

/* -------------------
   2. data conversions
   ------------------- */

#if (PROTOTYPE)

int Cmplx (double x, double y, struct COMPLEX *z)

#else

int Cmplx (x, y, z)
double  x, y;
struct COMPLEX *z;

#endif

/* Purpose ... convert the two real values into a complex value
   Input   ... x  ... the real part
	       y  ... the imaginary part
               *z  ... pointer to the complex number
   Output  ... none
*/
{
z->re = x;
z->im = y;
return(0);
}



#if (PROTOTYPE)

double Creal (struct COMPLEX *z)

#else

double Creal (z)
struct COMPLEX *z;

#endif

/* Purpose ... return the real part of a complex value
   Input   ... *z  ... pointer to the complex number
   Output  ... real part of z
*/
{
return (z->re);
}



#if (PROTOTYPE)

double Cimag (struct COMPLEX *z)

#else

double Cimag (z)
struct COMPLEX *z;

#endif

/* Purpose ... return the imaginary part of a complex value
   Input   ... *z  ... pointer to the complex number
   Output  ... imaginary part of z
*/
{
return (z->im);
}


/* -------------------
   3. stack operations
   ------------------- */

#if (PROTOTYPE)

int Cinit (int n)

#else

int Cinit (n)
int n;

#endif

/* Purpose ... Create the complex stack
   Input   ... n = number of elements
   Output  ... 0 = successfully allocated stack
               1 = something has gone wrong
*/
{
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
Zstack = (struct COMPLEX *) NULL;
Zstack = (struct COMPLEX *) malloc(n * sizeof(struct COMPLEX));
if (Zstack == NULL)
   {
   printf ("\nCinit() -- Cannot allocate space for complex stack.");
   ZstackMAX = 0;
   return (1);
   }
ZstackMAX = n;
return(0);
}



#if (PROTOTYPE)

int Cend (void)

#else

int Cend ()

#endif

/* Purpose ... Create the complex stack
   Input   ... none
   Output  ... none
*/
{
extern struct COMPLEX *Zstack;
if (Zstack != NULL)
   {
   free (Zstack);
   Zstack = (struct COMPLEX *) NULL;
   }
return(0);
}



#if (PROTOTYPE)

int Creset (void)

#else

int Creset ()

#endif

/* Purpose ... Reset the stack and its pointers
   Input   ... none
   Output  ... none
*/
{
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
Zbot = &Zstack[0];
Ztop = Zbot - 1;
Zmax = &Zstack[ZstackMAX];
Zbot->re = 0.0;
Zbot->im = 0.0;
return(0);
}



#if (PROTOTYPE)

int Cpush (struct COMPLEX *z)

#else

int Cpush (z)
struct COMPLEX *z;

#endif

/* Purpose ... push the complex number z onto the stack
   Input   ... *z .. pointer to the complex number
   Output  ... return flag = 0 .. successful
			   = 1 .. stack overflow
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
if (Ztop < Zmax)
   {  /* push the element onto the stack */
   ++Ztop;
   Ztop->re = z->re;
   Ztop->im = z->im;
   flag = 0;
   }
else flag = 1;  /* stack overflow */
return (flag);
}



#if (PROTOTYPE)

int Cpop (struct COMPLEX *z)

#else

int Cpop (z)
struct COMPLEX *z;

#endif

/* Purpose ... pop the top stack element into the complex number z
   Input   ... *z .. pointer to the complex number
   Output  ... return flag = 0 .. successful
			   = 1 .. stack underflow
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
if (Ztop >= Zbot)
   {  /* get the element off the stack */
   z->re = Ztop->re;
   z->im = Ztop->im;
   --Ztop;
   flag = 0;
   }
else flag = 1;  /* stack underflow */
return (flag);
}



#if (PROTOTYPE)

int Cpushr (double x)

#else

int Cpushr (x)
double x;

#endif

/* Purpose ... push the real number x onto the stack
   Input   ... x .. the real number
   Output  ... return flag = 0 .. successful
			   = 1 .. stack overflow
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
if (Ztop < Zmax)
   {  /* push the element onto the stack */
   ++Ztop;
   Ztop->re = x;
   Ztop->im = 0.0;
   flag = 0;
   }
else flag = 1;  /* stack overflow */
return (flag);
}



#if (PROTOTYPE)

int Cpopr (double *x)

#else

int Cpopr (x)
double *x;

#endif

/* Purpose ... pop the real part of the top stack element into x
   Input   ... *x .. pointer to the real number
   Output  ... return flag = 0 .. successful
			   = 1 .. stack underflow
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
if (Ztop >= Zbot)
   {  /* get the element off the stack */
   *x = Ztop->re;
   --Ztop;
   flag = 0;
   }
else flag = 1;  /* stack underflow */
return (flag);
}



#if (PROTOTYPE)

int Cprint (int n)

#else

int Cprint (n)
int n;

#endif

/* Purpose ... print the top n elements of the stack
   Input   ... n .. number of elements to print
   Output  ... none
*/
{
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
int    i, used;
struct COMPLEX *Ztemp;
used = (int) (Ztop - Zbot) + 1;
printf ("\nComplex Stack size = %d, elements used = %d\n",
        ZstackMAX, used);
printf ("Stack Contents (z[1] is top of stack)...\n");
Ztemp = Ztop;
i = 1;
while ((i <= n) && (Ztemp >= Zbot))
   {
   printf ("z[%d] = (%f, %f)\n", i, Ztemp->re, Ztemp->im);
   ++i;
   --Ztemp;
   }
return (0);
}



#if (PROTOTYPE)

int Cdrop (void)

#else

int Cdrop ()

#endif

/* Purpose ... drop the top element from the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. stack was already empty
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
flag = 0;
if (Cpop(&z1)) {printf("\nCdrop -- stack was already empty\n"); flag = 1;}
return (flag);
}



#if (PROTOTYPE)

int Cdup (void)

#else

int Cdup ()

#endif

/* Purpose ... duplicate the top element of the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. stack is empty
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
flag = 0;
if (Cpop(&z1)) {printf("\nCdup -- stack is empty\n"); flag = 1;}
if (!flag)
   {
   Cpush(&z1);
   if (Cpush(&z1)) {printf ("\nCdup -- stack overflow\n"); flag = 1;}
   }
return (flag);
}



#if (PROTOTYPE)

int Cswap (void)

#else

int Cswap ()

#endif

/* Purpose ... swap the top two elements of the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. two elements are not available
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1, z2;
flag = 0;
if (Cpop(&z1)) {printf("\nCswap -- stack is empty\n"); flag = 1;}
if (Cpop(&z2)) {printf("\nCswap -- stack is empty\n"); flag = 1;}
if (!flag)
   {
   Cpush(&z1);
   Cpush(&z2);
   }
return (flag);
}


/* ------------------------
   3. arithmetic operations
   ------------------------ */

#if (PROTOTYPE)

int Cadd (void)

#else

int Cadd ()

#endif

/* Purpose ... add the top two stack elements together and place
               the result on the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1, z2;
flag = 0;
if (Cpop(&z1)) {printf("\nCadd -- Stack underflow\n"); flag = 1;}
if (Cpop(&z2)) {printf("\nCadd -- Stack underflow\n"); flag = 1;}
if (!flag)
   {
   z1.re += z2.re;
   z1.im += z2.im;
   Cpush(&z1);
   }
return (flag);
}



#if (PROTOTYPE)

int Csub (void)

#else

int Csub ()

#endif

/* Purpose ... subtract the second top element from the top element
               and place the result on the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1, z2;
flag = 0;
if (Cpop(&z1)) {printf("\nCsub -- Stack underflow\n"); flag = 1;}
if (Cpop(&z2)) {printf("\nCsub -- Stack underflow\n"); flag = 1;}
if (!flag)
   {
   z2.re -= z1.re;
   z2.im -= z1.im;
   Cpush(&z2);
   }
return (flag);
}



#if (PROTOTYPE)

int Cneg (void)

#else

int Cneg ()

#endif

/* Purpose ... negate the top element
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
flag = 0;
if (Cpop(&z1)) {printf("\nCneg -- nothing on stack\n"); flag = 1;}
if (!flag)
   {
   z1.re = -z1.re;
   z1.im = -z1.im;
   Cpush(&z1);
   }
return (flag);
}



#if (PROTOTYPE)

int Conjg (void)

#else

int Conjg ()

#endif

/* Purpose ... take the complex conjugate of the top element
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
flag = 0;
if (Cpop(&z1)) {printf("\nConjg -- nothing on stack\n"); flag = 1;}
if (!flag)
   {
   z1.im = -z1.im;
   Cpush(&z1);
   }
return (flag);
}



#if (PROTOTYPE)

int Cmult (void)

#else

int Cmult ()

#endif

/* Purpose ... multiply the top two elements together
               and place the result on the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
   Notes   ... operands scaled as per reference [4]
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1, z2, z3;
double scale, x1, y1, x2, y2;
flag = 0;
if (Cpop(&z1)) {printf("\nCmult -- Stack underflow\n"); flag = 1;}
if (Cpop(&z2)) {printf("\nCmult -- Stack underflow\n"); flag = 1;}
if (!flag)
   {  /* proceed with multiplication */
   x1 = z1.re;
   scale = fabs(x1);
   y1 = z1.im;
   if (fabs(y1) > scale) scale = fabs(y1);
   x2 = z2.re;
   if (fabs(x2) > scale) scale = fabs(x2);
   y2 = z2.im;
   if (fabs(y2) > scale) scale = fabs(y2);
   if (scale == 0.0)
      {
      z1.re = 0.0;
      z1.im = 0.0;
      }
   else
      {
      x1 /= scale;
      y1 /= scale;
      x2 /= scale;
      y2 /= scale;
      scale *= scale;
      z3.re = scale * (x1 * x2 - y1 * y2);
      z3.im = scale * (x1 * y2 + x2 * y1);
      }
   Cpush(&z3);
   }
return (flag);
}



#if (PROTOTYPE)

int Cinv (void)

#else

int Cinv ()

#endif

/* Purpose ... invert the top element of the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
   Notes   ... operands scaled as per reference [1]
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
double theta, x1, y1, temp;
flag = 0;
if (Cpop(&z1)) {printf("\nCinv -- Stack underflow\n"); flag = 1;}
if (!flag)
   {  /* proceed with division */
   x1 = z1.re;
   y1 = z1.im;
   if ((fabs(x1) < EPSILON) && (fabs(y1) < EPSILON))
      {
      printf ("\nCinv -- small or zero divisor\n");
      flag = 1;
      }
   else
      {
      if (fabs(x1) > fabs(y1))
         {
         theta = y1 / x1;
	 temp = 1.0 / (theta * y1 + x1);
         z1.re = temp;
         z1.im = -theta * temp;
         }
      else
         {
         theta = x1 / y1;
	 temp = 1.0 / (theta * x1 + y1);
         z1.re = theta * temp;
         z1.im = -1.0 * temp;
         }
      Cpush(&z1);
      }
   }
return (flag);
}


#if (PROTOTYPE)

int Cdiv (void)

#else

int Cdiv ()

#endif

/* Purpose ... divide the top element by the second top element
               and place the result on the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
   Notes   ... uses Cinv() and Cmult()
*/
{
int flag;
flag = 0;
if (Cinv())
   {
   printf ("\nCdiv -- problems inverting top element\n");
   flag = 1;
   }
else
   {
   if (Cmult())
      {
      printf ("\nCdiv -- problems multiplying elements\n");
      flag = 1;
      }
   }
return (flag);
}



#if (PROTOTYPE)

int Cmag (double *x)

#else

int Cmag (x)
double *x;

#endif

/* Purpose ... return the magnitude of the top element as x
   Input   ... *x .. pointer to the returned value
   Output  ... return flag = 0 .. successful
			   = 1 .. empty stack
   Notes   ... operands scaled as per reference [1]
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
double temp, x1, y1;
flag = 0;
if (Cpop(&z1)) {printf("\nCmag -- Stack underflow\n"); flag = 1;}
if (!flag)
   {
   x1 = fabs(z1.re);
   y1 = fabs(z1.im);
   if ((x1 == 0.0) && (y1 == 0.0))
      *x = 0.0;
   else
      {
      if (x1 > y1)
         {
	 temp = y1 / x1;
	 *x = x1 * sqrt(1.0 + temp * temp);
         }
      else
         {
	 temp = x1 / y1;
	 *x = y1 * sqrt(1.0 + temp * temp);
         }
      }
   }
return (flag);
}



#if (PROTOTYPE)

int Cart (void)

#else

int Cart ()

#endif

/* Purpose ... convert the top element to cartesian form
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. empty stack
   Note    ... the polar form is stored z.re = magnitude
					z.im = argument (radians)
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
double x1, y1;
flag = 0;
if (Cpop(&z1)) {printf("\nCart -- Stack underflow\n"); flag = 1;}
if (!flag)
   {
   x1 = z1.re;
   y1 = z1.im;
   z1.re = x1 * cos(y1);
   z1.im = x1 * sin(y1);
   Cpush(&z1);
   }
return (flag);
}



#if (PROTOTYPE)

int Cpolar (void)

#else

int Cpolar ()

#endif

/* Purpose ... convert the top element from cartesian to polar form
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. empty stack
   Note    ... the polar form is stored z.re = magnitude
					z.im = argument (radians)
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
double temp, x1, y1;
flag = 0;
if (Cdup()) { printf ("\nCpolar -- stack overflow\n"); flag = 1;}
if (Cpop(&z1)) { printf ("\nCpolar -- stack underflow\n"); flag = 1;}
if (!flag)
   {
   x1 = z1.re;
   y1 = z1.im;
   Cmag (&temp);
   z1.re = temp;
   z1.im = atan2 (x1, y1);
   Cpush(&z1);
   }
return (flag);
}


/* --------------------
   4. complex functions
   -------------------- */

#if (PROTOTYPE)

int Csqrt (void)

#else

int Csqrt ()

#endif

/* Purpose ... compute the square root of the top element
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
   Note    ... The returned value is in the right half plane.
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
double temp, x1, y1, x2, y2;
flag = 0;
if (Cdup()) { printf ("\nCexp -- stack overflow\n"); flag = 1; }
if (Cpop(&z1)) { printf ("\nCexp -- stack underflow\n"); flag = 1; }
if (!flag)
   {
   x1 = z1.re;
   y1 = z1.im;
   if ((x1 == 0.0) && (y1 == 0.0))
      {
      printf ("\nCsqrt -- zero operand\n");
      flag = 1;
      }
   else
      {
      Cmag(&temp);
      if (x1 >= 0.0)
	 {
	 x2 = sqrt((x1 + temp) / 2.0);
	 y2 = y1 / (2.0 * x2);
	 }
      else
	 {
	 y2 = sqrt((fabs(x1) + temp) / 2.0);
	 y2 = y1 < 0.0 ? -fabs(y2) : fabs(y2);
	 x2 = y1 / (2.0 * y2);
	 }
      z1.re = x2;
      z1.im = y2;
      Cpush(&z1);
      }
   }
return (flag);
}



#if (PROTOTYPE)

int Cexp (void)

#else

int Cexp ()

#endif

/* Purpose ... compute exp(ztop) and place the result on the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
double temp, y;
flag = 0;
if (Cpop(&z1)) {printf("\nCexp -- Stack underflow\n"); flag = 1;}
if (!flag)
   {
   temp = exp(z1.re);
   y = z1.im;
   z1.re = temp * cos(y);
   z1.im = temp * sin(y);
   Cpush(&z1);
   }
return (flag);
}



#if (PROTOTYPE)

int Clog (void)

#else

int Clog ()

#endif

/* Purpose ... compute ln(ztop) and place the result on the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
   Note    ... the branch cut is along the negative real axis.
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
double temp;
flag = 0;
if (Cpolar()) { printf ("\nClog -- problems with polar\n"); flag = 1;}
if (Cpop(&z1)) { printf ("\nClog -- stack underflow\n"); flag = 1;}
if (!flag)
   {
   temp = z1.re;    /* this is the magnitude */
   if (temp < EPSILON)
      {
      printf ("\nClog -- magnitude small or negative\n"); flag = 1;
      }
   else
      {
      z1.re = log(temp);
      Cpush (&z1);
      }
   }
return (flag);
}



#if (PROTOTYPE)

int Cpow (double y)

#else

int Cpow (y)
double y;

#endif

/* Purpose ... compute ztop**y and place the result on the stack
   Input   ... y .. real exponent
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
*/
{
int flag;
extern struct COMPLEX *Ztop, *Zbot, *Zmax, *Zstack;
struct COMPLEX z1;
double temp;
flag = 0;
if (Cpolar()) { printf ("\nCpow -- problems with Cpolar\n"); flag = 1;}
if (Cpop(&z1)) { printf ("\nCpow -- stack underflow\n"); flag = 1;}
if (!flag)
   {
   temp = z1.re;        /* polar magnitude */
   if (temp < 0.0)  /* you may change this test to <=0 if needed */
      {
      printf ("\nCpow -- magnitude negative\n");
      flag = 1;
      }
   else
      {
      z1.re = pow (temp, y);
      z1.im = (y) * z1.im;
      Cpush(&z1);
      Cart();
      }
   }
return (flag);
}



#if (PROTOTYPE)

int Csin (void)

#else

int Csin ()

#endif

/* Purpose ... compute sin(ztop) and place the result on the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
   Note    ... currently no checks are made for stack overflow.
*/
{
int flag;
flag = 0;
Cpush (&imgC);
Cmult();
Cexp();
Cdup();
Cinv();
Csub();
Cpushr(0.5);
Cmult();
Cpush(&imgC);
Cmult();
return (flag);
}



#if (PROTOTYPE)

int Ccos (void)

#else

int Ccos ()

#endif

/* Purpose ... compute cos(ztop) and place the result on the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
   Note    ... currently no checks are made for stack overflow.
*/
{
int flag;
flag = 0;
Cpush (&imgC);
Cmult();
Cexp();
Cdup();
Cinv();
Cadd();
Cpushr(0.5);
Cmult();
return (flag);
}



#if (PROTOTYPE)

int Ctan (void)

#else

int Ctan ()

#endif

/* Purpose ... compute tan(ztop) and place the result on the stack
   Input   ... none
   Output  ... return flag = 0 .. successful
			   = 1 .. problems
   Note    ... currently no checks are made for stack overflow.
*/
{
int flag;
double temp;
flag = 0;
Cdup();
Csin();
Cswap();
Ccos();
Cdup();
Cmag(&temp);
if (temp < EPSILON)
   {
   printf ("\nCtan -- the cosine is very small\n");
   flag = 1;
   }
if (!flag) Cdiv();
return (flag);
}

/*-----------------------------------------------------------------*/
@
