head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* squish.c
   Compact the C source file so that we fit as many statements
   per line as possible.  */

/************************************************/
/*                                              */
/*  CMATH.  Copyright (c) 1989 Design Software  */
/*                                              */
/************************************************/

#include "cmath.h"
#if (STDLIBH)
#include <stdlib.h>
#endif
#include <stdio.h>
#include <string.h>
#include <math.h>

#ifndef NULL
#define  NULL  0
#endif

/* Purpose ...
   -------
   Compact the file specified on the command line.  Write the
   compacted code out to a new file with up to 5 statements
   per line.

   Version ... 1.0, Sep 1989
   -------

   This C code written by ...  Peter & Nigel,
   ----------------------      Design Software,
                               42 Gubberley St,
                               Kenmore, 4069,
                               Australia.
   */


main (argc, argv)
int argc;
char *argv[];

{
FILE *fpin, *fpout;
char line[128], bigline[128], ch;
int  count, maxcount, length, space, i, j;
int blank;

if (argc != 3)
   {
   printf ("usage --- squish <infile> <outfile>\n");
   exit (0);
   }

if (strcmp (argv[1], argv[2]) == 0)
   {
   printf ("cannot have <infile> == <outfile>\n");
   exit (0);
   }

if ((fpin = fopen(argv[1],"r")) == NULL)
   {
   printf ("squish cannot open input file %s \n", argv[1]);
   exit(0);
   }
if ((fpout = fopen(argv[2],"w")) == NULL)
   {
   printf ("squish cannot open output file %s \n", argv[2]);
   exit(0);
   }

count = 0;              /* so far we have nothing */
strcpy (bigline, "");
maxcount = 72;          /* output text to 72 characters per line */

/* copyright notice into new file */
fprintf (fpout, "/**************************************************/\n");
fprintf (fpout, "/* Copyright (c) 1989, 1990, 1991                 */\n");
fprintf (fpout, "/*                          by Peter and Nigel,   */\n");
fprintf (fpout, "/*                             Design Software,   */\n");
fprintf (fpout, "/*                             42 Gubberley St,   */\n");
fprintf (fpout, "/*                             Kenmore, Qld 4069, */\n");
fprintf (fpout, "/*                             Australia.         */\n");
fprintf (fpout, "/**************************************************/\n");

while (!feof(fpin))
   {
   /* read a line */
   fgets (line, 126, fpin);
   length = strlen(line);
   if (length == 0) continue;

   /* replace tabs with spaces */
   for (i = 0; i < length; ++i)
      {
      if (line[i] == '\t') line[i] = ' ';
      }

   /* remove excess spaces */
   space = 0;
   j = 0;
   for (i = 0; i <= length; ++i)
      {
      ch = line[i];
      if (ch == ' ')
         ++space;
      else
         space = 0;
      if (space <= 1)
         {
         /* keep this character */
         line[j] = line[i];
         ++j;
         }
      }

   /* the number of characters before the new line */
   length = strcspn(line, "\n");

   /* if we have a blank line then don't do anything with it */
   blank = 1;
   for (i = 0; i < length; ++i)  if (line[i] != ' ') blank = 0;
   if (blank) continue;

   /* write out a macroprocessor command on a line by itself */
   if (strstr (line, "#") != NULL)
      {
      /* we have a macro line */
      if (count > 0)
         {
         /* first dump the remainder of bigline */
         fprintf (fpout, "%s\n", bigline);
         count = 0;
         strcpy (bigline, "");
         }
      /* now do the macro line */
      strncat (bigline, line, length);
      count += (length + 1);
      fprintf (fpout, "%s\n", bigline);
      count = 0;
      strcpy (bigline, "");
      continue;
      }

   /* if we get this far, then we have a nornal line */

   /* if the bigline is full write it out */
   if (count + length + 1 > maxcount)
      {
      fprintf (fpout, "%s\n", bigline);
      count = 0;
      strcpy (bigline, "");
      }

   /* add this line to bigline */
   if (count > 0) strncat (bigline, " ", 1);
   strncat (bigline, line, length);
   count += (length + 1);
   }

/* write out the last line (if any) */
if (count > 0) fprintf (fpout, "%s\n", bigline);

fclose (fpin);
fclose (fpout);

return (0);
}
@
