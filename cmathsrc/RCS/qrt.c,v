head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* qrt.c
   Test driver for qr().
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
#define  nm  4
double a[nm][nm], z[nm][nm], wr[nm], wi[nm];
int    n, flag, i, j;

/* Case 1 : real eigenvalues.
   ------                     */
n  = 3;

a[0][0] = 2.0;  a[0][1] = 2.0;  a[0][2] = 2.0;
a[1][0] = 0.0;  a[1][1] = 3.0;  a[1][2] = 1.0;
a[2][0] = 1.0;  a[2][1] = -2.0; a[2][2] = 1.0;

printf ("\n");
printf ("test for qr : case 1 : real eigenvectors\n");
qr (nm, n, a, wr, wi, z, &flag);
if (flag != 0)
   {
   printf ("error flag = %d\n", flag);
   exit(0);
   }

printf ("eigenvalues\n");
for (i = 0; i < n; ++i) printf ("(%6.2f, %6.2f) ",wr[i], wi[i]);
printf ("\n");

printf ("eigenvectors\n");
j = 0;
do {
   if (wi[j] == 0.0)
      {
      for (i = 0; i < n; ++i)
         printf ("(%6.2f, %6.2f) ",z[i][j], wi[i]);
      printf ("\n");
      }
   else
      {
      for (i = 0; i < n; ++i)
         printf ("(%6.2f, %6.2f) ",z[i][j], z[i][j+1]);
      printf ("\n");
      }
   if (wi[j] != 0.0)
      {
      for (i = 0; i < n; ++i)
         printf ("(%6.2f, %6.2f) ",z[i][j], -z[i][j+1]);
      printf ("\n");
      j += 2;
      }
   else
      ++j;
   }
while (j < n);
printf ("correct eigenvalues 1.0, 3.0 & 2.0\n");

/*  Case 2 : complex eigenvalues.
    ------                        */
n  = 4;

a[0][0] = 4.0;  a[0][1] = -5.0; a[0][2] = 0.0;  a[0][3] = 3.0;
a[1][0] = 0.0;  a[1][1] = 4.0;  a[1][2] = -3.0; a[1][3] = -5.0;
a[2][0] = 5.0;  a[2][1] = -3.0; a[2][2] = 4.0;  a[2][3] = 0.0;
a[3][0] = 3.0;  a[3][1] = 0.0;  a[3][2] = 5.0;  a[3][3] = 4.0;

printf ("\n");
printf ("test for qr : case 2 : complex eigenvalues\n");
qr (nm, n, a, wr, wi, z, &flag);
if (flag != 0)
   {
   printf ("error flag = %d\n", flag);
   exit(0);
   }

printf ("eigenvalues\n");
for (i = 0; i < n; ++i) printf ("(%6.2f, %6.2f) ",wr[i], wi[i]);
printf ("\n");

printf ("eigenvectors\n");
j = 0;
do {
   if (wi[j] == 0.0)
      {
      for (i = 0; i < n; ++i)
         printf ("(%6.2f, %6.2f) ",z[i][j], wi[i]);
      printf ("\n");
      }
   else
      {
      for (i = 0; i < n; ++i)
         printf ("(%6.2f, %6.2f) ",z[i][j], z[i][j+1]);
      printf ("\n");
      }
   if (wi[j] != 0.0)
      {
      for (i = 0; i < n; ++i)
         printf ("(%6.2f, %6.2f) ",z[i][j], -z[i][j+1]);
      printf ("\n");
      j += 2;
      }
   else
      ++j;
   }
while (j < n);
printf ("correct eigenvalues 12.0, 1.0+-5i & 2.0\n");

/* Case 3 : coincident eigenvalues.
   ------                           */
n  = 4;

a[0][0] = 6.0;  a[0][1] = 4.0;  a[0][2] = 4.0;  a[0][3] = 1.0;
a[1][0] = 4.0;  a[1][1] = 6.0;  a[1][2] = 1.0;  a[1][3] = 4.0;
a[2][0] = 4.0;  a[2][1] = 1.0;  a[2][2] = 6.0;  a[2][3] = 4.0;
a[3][0] = 1.0;  a[3][1] = 4.0;  a[3][2] = 4.0;  a[3][3] = 6.0;


printf ("\n");
printf ("test for qr : case 3 : coincident eigenvalues\n");
qr (nm, n, a, wr, wi, z, &flag);
if (flag != 0)
   {
   printf ("error flag = %d\n", flag);
   exit(0);
   }

printf ("eigenvalues\n");
for (i = 0; i < n; ++i) printf ("(%6.2f, %6.2f) ",wr[i], wi[i]);
printf ("\n");

printf ("eigenvectors\n");
j = 0;
do {
   if (wi[j] == 0.0)
      {
      for (i = 0; i < n; ++i)
         printf ("(%6.2f, %6.2f) ",z[i][j], wi[i]);
      printf ("\n");
      }
   else
      {
      for (i = 0; i < n; ++i)
         printf ("(%6.2f, %6.2f) ",z[i][j], z[i][j+1]);
      printf ("\n");
      }
   if (wi[j] != 0.0)
      {
      for (i = 0; i < n; ++i)
         printf ("(%6.2f, %6.2f) ",z[i][j], -z[i][j+1]);
      printf ("\n");
      j += 2;
      }
   else
      ++j;
   }
while (j < n);
printf ("correct eigenvalues 15.0, 5.0, 5.0 & -1.0\n");

}  /* end of main() */
@
