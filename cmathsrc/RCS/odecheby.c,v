head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* odecheby.c
   Ordinary Differential Equation solver using collocation.  */

/************************************************/
/*                                              */
/*  CMATH.  Copyright (c) 1989 Design Software  */
/*                                              */
/************************************************/

#include "cmath.h"
#if (STDLIBH)
#include <stdlib.h>
#endif
#include <stdio.h>
#include <math.h>

#ifndef NULL
#define  NULL  0
#endif

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int odecheby (int (*f)(), int (*fbc)(),
              int n, double a, double b,
              double c[], int m, int ndim,
              int *flag)

#else

int odecheby (f, fbc, n, a, b, c[], m, ndim, *flag)

int (*f)(), (*fbc)();
int n;
double a, b, c[];
int m, ndim, *flag;


#endif

/* Purpose ...
   -------
   Compute the solution for a boundary value problem for a system
   of n ODE's and n boundary conditions.
   The routine is expensive in both storage and processing time and
   so should be used for small systems of nonstiff (and otherwise
   well behaved) equations.
   The solution is returned as an array of Chebyshev coefficients
   with one set of m coefficients for each dependent variable.

   Input ...
   -----
   (*f)()   : User supplied function defining the ODE's y' = f(x, y)
              int f (int n, double x, double y, double yp)
              {
              yp[i] = ...
              return (0);
              }
   (*fbc)() : User supplied function defining the boundary conditions
              inf fbc (int n, double a, double b, double ybc[])
              {
              ybc[i] = function (a or b) ...
              return (0);
              }
              There is one boundary condition for each dependent variable.
   n        : The number of equations.
   a        : The left boundary value of x.
   b        : The right boundary value of x.
   m        : The number of chebyshev coefficients to use in the
              series for each y element.
   ndim     : The declared dimension of the rows of the array of
              Chebyshev coefficients c[].

   Output ...
   ------
   c[]      : The array of Chebyshev coefficients defining the solution.
              The ith solution variable is defined as a Chebyshev series
                      m-1
              y[i] =  sum  c[i][j] Tj(z) + c[i][0] / 2
                      j=1
              Where Tj(z) is the Chebyshev polynomial of the first kind
              and -1 <= z <= +1,  z = ((x - a) - (b - x)) / (b - a).
              The coefficient c[i][j] can be accessed as c[i * ndim + j],
              i = 0 ... n-1, j = 0 ... m-1.
              The accuracy of the solution may be checked by varying
              the number of coefficients in each expansion.  If the
              coefficients decrease rapidly then the accuracy can be
              inferred from the size of the last two or three coefficients.
              If the coefficients do not decay rapidly, it is likely that
              the solution cannot be well represented by a Chebyshev
              series.
   flag     : Status indicator.
              = 0, Normal return.
              = 1, illegal user input.
                   n < 1, m < 1, ndim < m, c == NULL, a == b
              = 2, could not allocate workspace.
              = 3, iterations did not converge

   Work Space ...
   ----------

   This C code written by ...  Peter & Nigel,
   ----------------------      Design Software,
                               42 Gubberley St,
                               Kenmore, 4069,
                               Australia.

   Version  ... 1.0 , 23-Oct-89
   -------

   Notes ...
   -----
   (1) Needs the function cheby(), chebyd(), zerov(), conjgg() and
       nelmin().

*/

#define CINDX(i,j) (i * ndim + j)

{   /* begin function odecheby() */

double *y, *ybc;
int    i, j, k;

/* Check user input */
*flag = 0;
if (n < 1 || m < 1 || ndim < m || a == b || c == NULL)
   {
   *flag = 1;
   return (0);
   }

/* Allocate workspace */
ybc = (double *) NULL;
y   = (double *) NULL;

ybc = (double *) malloc(n * sizeof(double));
if (ybc == NULL)
   {
   *flag = 2;
   return (0);
   }
y = (double *) malloc(n * sizeof(double));
if (y == NULL)
   {
   *flag = 2;
   return (0);
   }

/* Set up initial guess for the chebyshev coefficients */
for (i = 0; i < n; ++i)
   for (j = 0; j < n; ++j) c[CINDX(i,j)] = 0.0;

/* Free workspace */
if (ybc != NULL) { free (ybc); ybc = (double *) NULL; }
if (y != NULL)   { free (y); y = (double *) NULL; }
return (0);
}   /* end of function odecheby() */

/*-----------------------------------------------------------------*/


@
