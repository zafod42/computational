head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/*  stint1.c   -- Ordinary Differential Equation solver
                  for stiff equations.
*/

int stint1 (n, t, tout, hi, error, mf, y, y0,
            ydot, saved, rj, ymax, rw, ipiv, kflag,
	    deriv, jacob)

int     n;
double  *t, tout, hi, error;
int     mf;
double  y[ndim], y0[8][4][ndim], ydot[4][ndim];
double  saved[13][ndim], rj[ndim][ndim], ymax[ndim], rw[ndim][ndim];
int     ipiv[ndim], *kflag;
int     (*deriv)(), (*jacob)();

/* Purpose ...
   -------
   Easy to use version of STINT: a stiff differential equation
   integrator.  A set of ODE's is integrated from t to tout
   using a cyclic composite multistep method as described in [1]
   and [2].  The algorithm includes variable step-size and variable
   order integration of the ODE's and tries to take as large a step
   size as possible without producing a single step error larger
   that requested.

   Input ...
   -----
   n       :order of system.  Equations are numbered 0 .. n-1.
   t,tout  :initial,final values of independent variable,t
   hi      :initial step size.
   error   :relative error tolerance requested.
   mf      :method flag.
            = 1, jacobian must be supplied.
            = 2, no jacobian need be supplied.
   y       :initial value of dependent variables, y[i], i=0 .. n-1.
	    declared as ... double y[ndim].

   Output ...
   ------
   t       :(=tout), value of independent variable.
   y       :value of dependent variables at t.
   kflag   :completion code.
	    >  0  then the integration was successful.
            = -2, -3, -4 then 2, 3 or 4 mesh points respectively,
		  have been computed with abs(h) = 0.01 abs(hi) but
		  the requested error was not achieved. (h is the
		  step size used within stint)
	    = -5, the requested error was smaller than can be
		  handled for this problem
	    = -6, corrector convergence could not be achieved for
		  abs(h) > 0.01 abs(hi).

   Workspace ...
   ---------
   y0      : double y0[8][4][ndim]
   ydot    : double ydot[4][ndim]
   saved   : double saved[13][ndim]
   rj      : double rj[ndim][ndim]
   rw      : double rw[ndim][ndim]
   ymax    : double ymax[ndim]
   ipiv    : int    ipiv[ndim]

   Global Variables ...
   ----------------
   nstep   : number of steps taken
   nfe     : number of function evaluations
   nje     : number of jacobian evaluations
   ninvs   : number of LU decompositions

   User supplied functions ...
   -----------------------
   deriv(n, t, y, dy) : evaluates the derivatives of the dependent
			variables y[i], i=0 .. n-1 with respect to t
			and stores the result in dy[i], i=0 .. n-1.
   jacob(n, t, y, rj) : evaluates the partial derivatives of the
			differential equations at the values y[i]
			and t and stores the result in rj[][].
			Thus rj[j][i] is the partial of dy[j] with
			respect to y[k] for i,j = 0 .. n-1.
			If the analytic expressions for the partial
			derivatives are not available, their
			approximate values can be obtained by numerical
			differencing (see mf).  In this case function
			jacob() may be

                        int jacob(n, t, y, rj)
			int n;
			double t, y[], rj[];
			{
			return;
			}

   Version ... 1.0 April-May 1988
   -------

   Notes ...
   -----
   (1) This C code adapted from the original FORTRAN code [1]
       by
       P. A. Jacobs   Department of Mechanical Engineering
		      University of Queensland
   (2) Requires the functions Decomp() and Solve() from the
       CMATH library.
   (3) The algorithm is split into three files
       stint1.c : this file, a simple interface function
       stint.h  : global definitions
       stint.c  : the hard working part
   (4) Some global declarations such as the declared dimension of
       the arrays (ndim) are contained in the file "stint.c".
   (5) For more details on the Input/Output and workspace variables
       see the documentation in function stint().

   References ...
   ----------
   [1] J.M Tendler, T.A. Bickart & Z Picel 1978 : "Algorithm 534
       STINT: STiff (differential equations) INTegrator".  Collected
       Algorithms of the ACM.
   [2] J.M. Tendler, T.A. Bickart & Z. Picel 1978 : "A stiffly stable
       integration process using cyclic composite methods".  ACM
       Trans. Math. Software Vol.4 (4), 339-368.
   [3] P.A. Jacobs 1988 : "CMATH (release 1.0): Numerical routines
       in C".  Report 6/88, Dept. Mechanical Engineering, Uni of Qld.

*/
{  /* begin function stint1 */
double hmax, hnext, hmin, h0, ts, s, d;
int    i, j, kflgp1, ii, maxder, jstart;
int    finished;
int    knext, ind;
int    stint();

/*  set the normalizing vector matrix ymax. */
for (i = 0; i < n; ++i)
   {
   ymax[i] = MAX(fabs(y[i]),1.0);
   y0[0][0][i] = y[i];
   }
hmax = (tout - *t) * 10.0;
hnext = hi;
hmin = hi * 0.01;
maxder = 7;
jstart = 0;
finished = 0;

/* call stint as many times as necessary to reach the finish
   point  */

do {
   stint(n, t, y0, ydot, saved, &h0, &hnext, hmin, hmax, error,
         ymax, kflag, &knext, &jstart, maxder, rw, rj, mf, ipiv,
         deriv, jacob);
   if (*kflag < 0) return (1);   /* stint failed */
   kflgp1 = *kflag + 1;

   /* check whether the computed solution reached beyond the
   interpolation point tout. */
   ii = 0;
   for (i = 1; i <= kflgp1; ++i)
      {
      ++ii;
      ts = tout - *t + h0 * (i - 1);
      if (ts >= 0.0)
         {
	 finished = (i > 1);  /* at least one mesh point was
				 computed past the finish point */
	 break;
         }
      }
} while (!finished);

/* The solution reached beyond tout.
   Perform interpolation at tout.
*/
ind = *kflag + 3 - ii;
if (ii == 2) ind = 1;
s = (ts - h0) / h0;
*t = tout;
for (i = 0; i < n; ++i)
   {
   d = 1.0;
   y[i] = y0[0][ind-1][i];
   for (j = 1; j <= jstart; ++j)
      {
      d = d * ((j - 1) + s) / j;
      y[i] += d * y0[j][ind-1][i];
      }
   }

return (0);
} /* end of stint1 */
@
