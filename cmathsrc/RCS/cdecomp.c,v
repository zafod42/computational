head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* cdecomp.c
   COMPLEX Matrix decomposition by Gaussian elimination */

/************************************************/
/*                                              */
/*  CMATH.  Copyright (c) 1989 Design Software  */
/*                                              */
/************************************************/

#include "cmath.h"
#if (STDLIBH)
#include <stdlib.h>
#endif
#include <stdio.h>
#include <math.h>

#ifndef NULL
#define  NULL  0
#endif


/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int cdecomp (int n, int ndim,
             struct COMPLEX *a, double *cond,
             int pivot[], int *flag)

#else

int cdecomp (n, ndim, a, cond, pivot, flag)

int    n,
       ndim;
struct COMPLEX *a;
double *cond;
int    pivot[],
       *flag;

#endif

/* Purpose ...
   -------
   Decomposes a COMPLEX matrix by gaussian elimination
   and estimates the condition of the matrix.

   Use Solve to compute solutions to linear systems.

   Input ...
   -----
   n    = order of the matrix
   ndim = row dimension of matrix as defined in the calling program
   *a   = pointer to the COMPLEX matrix to be triangularized

   Output ...
   ------
   *a        = pointer to  an upper triangular matrix U and a
	       permuted version of a lower triangular matrix I-L
	       so that
	       (permutation matrix) * a = L * U
   cond      = an estimate of the condition of a .
	       For the linear system a * x = b, changes in a and b
	       may cause changes cond times as large in x.
	       If cond+1.0 .eq. cond , a is singular to working
	       precision, cond is set to 1.0e+32 if exact (or near)
	       singularity is detected.
   pivot     = the pivot vector.
   pivot[k]  = the index of the k-th pivot row
   pivot[n-1]= (-1)**(number of interchanges)
   flag      = Status indicator
               0 : successful execution
               1 : could not allocate memory for workspace
               2 : illegal user input n < 1, a == NULL,
                   pivot == NULL, n > ndim.
               3 : matrix is singular

   Work Space ...
   ----------
   The vector work[0..n] is allocated internally by cdecomp().

   This C code written by ...  Peter & Nigel,
   ----------------------      Design Software,
                               42 Gubberley St,
                               Kenmore, 4069,
                               Australia.

   Version  ... 1.0 , 29-Oct-89
   -------

   Notes ...
   -----
   (1) Subscripts range from 0 through (ndim-1).

   (2) The determinant of a can be obtained on output by
       det(a) = pivot[n-1] * a[0][0] * a[1][1] * ... * a[n-1][n-1].

   (3) This routine has been adapted from that in the text
       G.E. Forsythe, M.A. Malcolm & C.B. Moler
       Computer Methods for Mathematical Computations.

   (4) Uses the functions fabs(), free() and malloc().
       the structure COMPLEX, and cmath routines cabslt, cdivsn
       cmultn.
*/

#define AINDEX(i,j) (i * ndim + j)

{   /* --- begin function cdecomp() --- */

struct COMPLEX ek, t, pvt;
double anorm, ynorm, znorm, tr, ti, pvtr, resr, resi;
int    i, j, k, m;
struct COMPLEX *pa, *pb;      /* temporary pointers */
struct COMPLEX *work;

*flag = 0;
work = (struct COMPLEX *) NULL;

if (a == NULL || pivot == NULL || n < 1 || ndim < n)
   {
   *flag = 2;
   return (0);
   }

pivot[n-1] = 1;
if (n == 1)
   {
   /* One element only */
   *cond = 1.0;
   if (a[0].re == 0.0 && a[0].im == 0.0)
      {
      *cond = 1.0e+32;  /* singular */
      *flag = 3;
      return (0);
      }
   return (0);
   }

work = (struct COMPLEX *) malloc(n * sizeof(struct COMPLEX));
if (work == NULL)
   {
   *flag = 1;
   return (0);
   }

/* --- compute 1-norm of a --- */

anorm = 0.0;
for (j = 0; j < n; ++j)
   {
   tr = 0.0;
   for (i = 0; i < n; ++i)
      {
      pa = a + AINDEX(i,j);
      tr += cabslt(pa->re, pa->im);
      }
   if (tr > anorm) anorm = tr;
   }

/* Apply Gaussian elimination with partial pivoting. */

for (k = 0; k < n-1; ++k)
   {
   /* Find pivot and label as row m.
      This will be the element with largest magnitude in
      the lower part of the kth column. */
   m = k;
   pa = a + AINDEX(m,k);
   pvtr = cabslt(pa->re, pa->im);
   for (i = k+1; i < n; ++i)
      {
      pa = a + AINDEX(i,k);
      tr = cabslt(pa->re, pa->im);
      if ( tr > pvtr )  { m = i; pvtr = tr; }
      }
   pivot[k] = m;
   pa = a + AINDEX(m,k);
   pvt.re = pa->re;
   pvt.im = pa->im;
   if (m != k) pivot[n-1] = -pivot[n-1];

   /* Interchange rows m and k for the lower partition. */
   for (j = k; j < n; ++j)
      {
      pa = a + AINDEX(m,j);
      pb = a + AINDEX(k,j);
      tr = pa->re; pa->re = pb->re; pb->re = tr;
      ti = pa->im; pa->im = pb->im; pb->im = ti;
      }
   /* row k is now the pivot row */

   /* Bail out if pivot is too small */
   if (cabslt(pvt.re, pvt.im) < anorm * EPSILON)
      {
      /* Singular or nearly singular */
      *cond = 1.0e+32;
      *flag = 3;
      goto DecompExit;
      }

   /* eliminate the lower matrix partition by rows
      and store the multipliers in the k sub-column */
   for (i = k+1; i < n; ++i)
      {
      pa = a+AINDEX(i,k);          /* element to eliminate */
      /* t = -( *pa / pvt );          compute multiplier   */
      cdivsn (pa->re, pa->im, pvt.re, pvt.im, &tr, &ti);
      tr *= -1.0;  ti *= -1.0;
      pa->re = tr; pa->im = ti;    /* store multiplier     */
      for (j = k+1; j < n; ++j)    /* eliminate i th row */
         {
         if (cabslt(tr, ti) > anorm * EPSILON)
            {
            pa = a + AINDEX(k,j);
            cmultn (pa->re, pa->im, tr, ti, &resr, &resi);
            pa = a + AINDEX(i,j);
	    pa->re += resr;
	    pa->im += resi;
            }
         }
      }

   }  /* End of Gaussian elimination. */

/* cond = (1-norm of a)*(an estimate of 1-norm of a-inverse)
   estimate obtained by one step of inverse iteration for the
   small singular vector. This involves solving two systems
   of equations, (a-transpose)*y = e and a*z = y where e
   is a vector of +1 or -1 chosen to cause growth in y.
   estimate = (1-norm of z)/(1-norm of y)

   Solve (a-transpose)*y = e   */

for (k = 0; k < n; ++k)
   {
   t.re = 0.0;  t.im = 0.0;
   if (k != 0)
      {
      for (i = 0; i < k; ++i)
         {
         pb = a + AINDEX(i,k);
         cmultn (pb->re, pb->im, work[i].re, work[i].im, &resr, &resi);
         t.re += resr;
         t.im += resi;
         }
      }
   ek.im = 0.0;
   if (t.re < 0.0) ek.re = -1.0; else  ek.re = 1.0;
   pa = a+AINDEX(k,k);
   if (cabslt(pa->re, pa->im) < anorm * EPSILON)
      {
      /* Singular */
      *cond = 1.0e+32;
      *flag = 3;
      goto DecompExit;
      }

   /* work[k] = -(ek + t) / *pa; */
   tr = -(ek.re + t.re);
   ti = -(ek.im + t.im);
   cdivsn (tr, ti, pa->re, pa->im, &work[k].re, &work[k].im);
   }

for (k = n-2; k >= 0; --k)
   {
   t.re = 0.0;  t.im = 0.0;
   for (i = k+1; i < n; i++)
      {
      pa = a + AINDEX(i,k);
      cmultn (pa->re, pa->im, work[i].re, work[i].im, &tr, &ti);
      t.re += tr;  t.im += ti;
      /* we have used work[i] here, however the use of work[k]
	 makes some difference to cond */
      }
   work[k].re = t.re;  work[k].im = t.im;
   m = pivot[k];
   if (m != k)
      {
      tr = work[m].re; work[m].re = work[k].re; work[k].re = tr;
      ti = work[m].im; work[m].im = work[k].im; work[k].im = ti;
      }
   }

ynorm = 0.0;
for (i = 0; i < n; ++i) ynorm += cabslt(work[i].re, work[i].im);

/* --- solve a * z = y */
csolve (n, ndim, a, work, pivot);

znorm = 0.0;
for (i = 0; i < n; ++i) znorm += cabslt(work[i].re, work[i].im);

/* --- estimate condition --- */
*cond = anorm * znorm / ynorm;
if (*cond < 1.0) *cond = 1.0;
if (*cond + 1.0 == *cond) *flag = 3;

DecompExit:
if (work != NULL) { free (work); work = (struct COMPLEX *) NULL; }
return (0);
}   /* --- end of function cdecomp() --- */

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int csolve (int n, int ndim,
           struct COMPLEX *a, struct COMPLEX b[],
           int pivot[])

#else

int csolve (n, ndim, a, b, pivot)

int    n,
       ndim,
       pivot[];
struct COMPLEX *a, b[];

#endif

/* Purpose :
   -------
   Solution of a COMPLEX linear system, a * x = b.
   Do not use if cdecomp() has detected singularity.

   Input..
   -----
   n     = order of matrix
   ndim  = row dimension of a
   a     = triangularized matrix obtained from cdecomp()
   b     = right hand side vector
   pivot = pivot vector obtained from decomp()

   Output..
   ------
   b = solution vector, x

*/

{   /* --- begin function solve() --- */

int    i, j, k, m;
struct COMPLEX t, *pa;
double tr, ti;

if (n == 1)
   {
   /* trivial  b[0] /= a[0] */
   cdivsn (b[0].re, b[0].im, a[0].re, a[0].im, &b[0].re, &b[0].im);
   }
else
   {
   /* Forward elimination: apply multipliers. */
   for (k = 0; k < n-1; k ++)
      {
      m = pivot[k];
      t.re = b[m].re; b[m].re = b[k].re; b[k].re = t.re;
      t.im = b[m].im; b[m].im = b[k].im; b[k].im = t.im;
      for (i = k+1; i < n; ++i)
         {
         /* b[i] += a[AINDEX(i,k)] * t; */
         pa = a + AINDEX(i,k);
         cmultn (pa->re, pa->im, t.re, t.im, &tr, &ti);
         b[i].re += tr;
         b[i].im += ti;
         }
      }

   /* Back substitution. */
   for (k = n-1; k >= 0; --k)
      {
      t.re = b[k].re;
      t.im = b[k].im;
      for (j = k+1; j < n; ++j)
         {
         /* t -= a[AINDEX(k,j)] * b[j]; */
         pa = a + AINDEX(k,j);
         cmultn (pa->re, pa->im, b[j].re, b[j].im, &tr, &ti);
         t.re -= tr;  t.im -= ti;
         }
      /* b[k] = t / a[AINDEX(k,k)]; */
      pa = a + AINDEX(k,k);
      cdivsn (t.re, t.im, pa->re, pa->im, &tr, &ti);
      b[k].re = tr;  b[k].im = ti;
      }
   }

return(0);
}  /* --- end function solve() --- */

/*-----------------------------------------------------------------*/

@
