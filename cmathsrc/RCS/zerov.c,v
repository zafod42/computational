head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* zerov.c
   Solve a set of simultaneous equations using function
   minimization or Newton-Raphson iteration.
*/

/************************************************/
/*                                              */
/*  CMATH.  Copyright (c) 1989 Design Software  */
/*                                              */
/************************************************/

#include "cmath.h"
#if (STDLIBH)
#include <stdlib.h>
#endif
#include <stdio.h>
#include <math.h>

#ifndef NULL
#define  NULL  0
#endif


/*-----------------------------------------------------------------*/

/* another name for the user defined function */
#if (PROTOTYPE)
int    (*userf) (int n, double *x, double *fv);
#else
int    (*userf) ();
#endif
double *fv;             /* vector of function residuals */

static int mf;

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int zerov (int (*f)(int n, double *x, double *fv),
           int (*jac) (int n, double *x, double *df),
           int n,
           double x[], double fvec[],
           double xtol, double ftol,
           int method, int *nfe, int *ifail)

#else

int zerov (f, jac, n, x, fvec, xtol, ftol, method, nfe, ifail)

int    (*f)(), (*jac)();
int    n;
double x[], fvec[], xtol, ftol;
int    method, *nfe, *ifail;

#endif

/* Purpose ...
   -------
   Solve a set of (nonlinear) simultaneous equations (i.e. f(x) = 0
   where f and x are vectors) defined in a user supplied function f.
   This is done by
   method -1. formulating an objective function that is the sum
   of the absolute values of the function residuals (L1 norm) and then
   minimizing this objective using nelmin().
   method -2. as for -1 but using conjgg() and sum of the squares
   of the residuals
   method 1. Newton-Raphson iteration with analytic derivatives.
   method 2. Newton-Raphson iteration with finite-difference derivatives.

   Input ...
   -----
   (*f)()   : User supplied function that computes the vector function
              f(x) given x.
              int f (n, x, fvec)
              int n;
              double x[], fvec[];
              {
              f[0]   = ...
              ...
              f[n-1] = ...
              return (0);
              }
   (*jac)() : User supplied function that computes the Jacobian
              of the vector function.  These are the partial
              derivatives df[i * n + j] = d(f[i])/d(x[j]),
              i, j = 0 ... n-1.
              int jac (n, x, df)
              int n;
              double x[], df[];
              {
              ...
              df[i * n + j] = ...;
              ...
              return (0);
              }
              These function is only required to do something if
              method 1 is selected.
   n        : The number of elements in x[] and fvec[].
   x[]      : An initial guess for the solution variables.
   ftol     : The required tolerance in the solution.
              For method < 0 it is not worth putting too small
              a value for this tolerance.
              Iteration for the Newton-Raphson scheme is stopped
              when the sum of the absolute values of the function
              reaches ftol.
   xtol     : Iteration for the Newton-Raphson scheme is stopped
              when the sum of the absolute values of the x-step
              reaches xtol.
   *nfe     : Maximum allowed number of function evaluations.
              Note that estimation of the Jacobian requires n
              function evaluations each step.
   method   : = -1, Use the nelmin() function minimizer.
                    This is good for a start or where the Jacobian
                    is not available.
                    method < 0 should be used to get close to a zero
                    and then method > 1 (a Newton-Raphson scheme) may
                    be used to refine the solution.
              = -2, Use the conjgg() function minimizer.
              = 1,  Use Newton-Raphson iteration.  For best results
                    a good guess for x[] is required.  Analytic
                    expressions for the partial derivatives are
                    required.
              = 2,  Use Newton-Raphson iteration.  For best results
                    a good guess for x[] is required.  Finite-difference
                    approximations for the partial derivatives are
                    computed by zerov().

   Output ...
   ------
   x[]      : The solution vector.
              For method < 0, there are no guarantees that
              this is even close to a true solution as the minimizer
              may find an unrelated local minimum in its objective
              function. If the solution looks promising, call zerov()
              again with method > 0 to improve the solution with the
              Newton-Raphson scheme.
   fvec[]   : The values of the function residuals at x[].
   *nfe     : Number of function evaluations used.
   *ifail   : A status flag
              ifail = 0 : normal return
              ifail = 1 : illegal user input (i.e. n < 1, x == NULL,
                          fvec == NULL, xtol <= 0.0, ftol <= 0.0,
                          method < 0, method > 2, nfe == NULL)
              ifail = 2 : could not allocate sufficient memory for
                          workspace.
              ifail = 3 : could not converge in the allowed number
                          of steps.
              ifail = 4 : minimizer found a local minimum in the
                          objective function, but it is not a zero to
                          the user specified precision.
              ifail = 5 : Newton-Raphson scheme diverging.
              ifail = 6 : Singular Jacobian.

   This C code written by ...  Peter & Nigel,
   ----------------------      Design Software,
                               42 Gubberley St,
                               Kenmore, 4069,
                               Australia.

   Version ... 1.0  28 April 1989
   -------     2.0  August   1989,  Newton-Raphson added.
               2.1  August 26 '89,  Finite difference Jacobian.
               2.2  Sep 10   1989   conjgg() added
               2.3  Nov 13   1989   halve steps if NR iteration has
                                    trouble

   Workspace ...
   ---------
   method -1 :
   zerov() allocates a vector of n double elements while nelmin()
   which is called by zerov() allocates a further n*n + 6n double
   elements.
   method 1 :
   zerov() allocates a vector of n double elements, another
   vector of n*n double elements for the jacobian and a vector of
   n integer elements for the pivot vector. (Add another vector of
   n double elements for method 2).

*/

{  /* begin zerov() */

double *dx, *rj, *xlast;
double rmin, reqmin, reltol, abstol;
double dxold, fold, cond, L1dx, L1f;
int    konvge, kcount, numres, flag, icount;
int    i, j, iter, *pivot, decompflag, maxit;
int    nje, halves;

*ifail = 0;
dx    = (double *) NULL;
xlast = (double *) NULL;
rj    = (double *) NULL;
pivot = (int *) NULL;

if (n < 1 || x == NULL || fvec == NULL || xtol <= 0.0 ||
    ftol <= 0.0 || method == 0 || method > 2 ||
    method < -2 || nfe == NULL)
   {
   *ifail = 1;
   goto LeaveZerov;
   }

dx = (double *) malloc(n * sizeof(double));
if (dx == NULL)
   {
   *ifail = 2;
   goto LeaveZerov;
   }

fv    = fvec;         /* copy user supplied pointers */
userf = f;

if (method > 0)
   {
   /* Newton-Raphson iteration */

   rj = (double *) malloc(n * n * sizeof(double));
   if (rj == NULL)
      {
      *ifail = 2;
      goto LeaveZerov;
      }
   xlast = (double *) malloc(n * sizeof(double));
   if (xlast == NULL)
      {
      *ifail = 2;
      goto LeaveZerov;
      }
   pivot = (int *) malloc(n * sizeof(int));
   if (pivot == NULL)
      {
      *ifail = 2;
      goto LeaveZerov;
      }

   maxit = (*nfe);

   (*f) (n, x, fvec);
   (*nfe) = 1;

   L1dx = 0.0;
   L1f = 0.0;
   for (j = 0; j < n; ++j)  L1f += fabs(fvec[j]);

   for (iter = 1; iter <= maxit; ++iter)
      {
      /* Record the current position. */
      dxold = L1dx;
      fold  = L1f;
      for (j = 0; j < n; ++j) xlast[j] = x[j];

      /* try to take a step */
      if (method == 1)
         {
         /* analytic jacobian evaluation */
         (*jac) (n, x, rj);
         }
      else
         {
         /* finite-difference Jacobian evaluation */
         if (jacobn (n, n, f, x, fvec, rj, nfe) != 0)
            {
            *ifail = 2;
            goto LeaveZerov;
            }
         }

      /* Now solve for the x-step. */
      decomp (n, n, rj, &cond, pivot, &decompflag);
      if (decompflag != 0)
         {
         *ifail = 2;
         goto LeaveZerov;
         }
      if (cond + 1.0 == cond)
         {
         *ifail = 5;
         goto LeaveZerov;
         }
      solve (n, n, rj, fvec, pivot);
      for (j = 0; j < n; ++j) dx[j] = fvec[j];

      /* Try to take the full x-step. */
      L1dx = 0.0;
      for (j = 0; j < n; ++j)
         {
         L1dx += fabs(dx[j]);
         x[j] -= dx[j];
         }

      /* What does the function look like at this new position. */
      (*f) (n, x, fvec);
      ++(*nfe);
      L1f = 0.0;
      for (j = 0; j < n; ++j)  L1f += fabs(fvec[j]);

      if (L1f <= ftol || L1dx <= xtol)
         {
         /* we have converged */
         goto LeaveZerov;
         }

      if (L1f > fold)
         {
         /* The most recent step did not move any closer to a solution.
            Try halving the step size until we achieve a smaller
            function value or until the stepsize is too small.
            Note that we assume that the signs of the dx steps
            are correct. */
         halves = 0;
         do {
            ++halves;
            /* Try to take half a step. */
            L1dx = 0.0;
            for (j = 0; j < n; ++j)
               {
               dx[j] *= 0.5;
               L1dx += fabs(dx[j]);
               x[j] = xlast[j] - dx[j];
               }

            /* What does the function look like at this new position. */
            (*f) (n, x, fvec);
            ++(*nfe);
            L1f = 0.0;
            for (j = 0; j < n; ++j)  L1f += fabs(fvec[j]);

            } while (halves < 10 && L1f > fold && L1dx > (n * EPSILON));
         }

      if (iter > 6 && (L1dx > dxold || L1f > fold))
         {
         /* we are diverging */
         *ifail = 5;
         goto LeaveZerov;
         }

      }   /* end of main loop -- taking a step */

   /* if we reach this point then we have not converged */
   *ifail = 3;
   }  /* end of Newton-Raphson section */

else if (method == -1)
   {
   /* Function Minimization using nelmin() */

   reqmin  = ftol * ftol + sqrt(EPSILON);
   abstol  = 0.0;
   reltol  = 0.0;
   konvge  = 5;
   kcount  = (*nfe);
   for (i = 0; i < n; ++i) dx[i] = 0.1 * fabs(x[i]) + 0.01;
   mf = method;

   nelmin (residsq, n, x, &rmin, reqmin, dx,
	   konvge, &icount, kcount, &numres, &flag,
           reltol, abstol);

   (*nfe) = icount;

   (*f) (n, x, fvec);
   ++(*nfe);

   switch (flag)
      {
      case 0  : break;
      case 1  : *ifail = 1; goto LeaveZerov;
      case 2  : *ifail = 3; goto LeaveZerov;
      case 3  : *ifail = 2; goto LeaveZerov;
      default : *ifail = 1; goto LeaveZerov;
      }

   if (rmin >= ftol)
      {
      /* we have found a local minimum but it is not a zero */
      *ifail = 4;
      }
   }  /* end of nelmin section */

else if (method == -2)
   {
   /* Function Minimization using conjgg() */

   reqmin  = ftol * ftol + sqrt(EPSILON);
   mf = method;
   conjgg (residsq, 1, dresid, x, n, reqmin, &rmin,
	   &flag, 5*n, 100.0, &numres, nfe, &nje);

   (*f) (n, x, fvec);
   ++(*nfe);

   switch (flag)
      {
      case 0  : break;
      case 1  : *ifail = 3; goto LeaveZerov;
      case 2  : *ifail = 3; goto LeaveZerov;
      case 3  : *ifail = 2; goto LeaveZerov;
      case 4  : *ifail = 1; goto LeaveZerov;
      default : *ifail = 1; goto LeaveZerov;
      }

   if (rmin >= ftol)
      {
      /* we have found a local minimum but it is not a zero */
      *ifail = 4;
      }
   }  /* end of conjgg() section */
else
   *ifail = 1;

LeaveZerov:
if (pivot != NULL) { free (pivot); pivot = NULL; }
if (xlast != NULL) { free (xlast); xlast = NULL; }
if (rj != NULL) { free (rj); rj = NULL; }
if (dx != NULL) { free (dx); dx = NULL; }

return(0);
}  /* end of zerov() */

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

double residsq (int n, double x[])

#else

double residsq (n, x)
int    n;
double x[];

#endif

/* Compute the L1 norm the residuals for nelmin() but the
   L2norm for conjgg().  */
{
/* extern int mf; */
int    i;
double Lnorm;
(*userf) (n, x, fv);
Lnorm = 0.0;
for (i = 0; i < n; ++i)
   {
   if (mf == -1) Lnorm += fabs(fv[i]);
           else  Lnorm += fv[i] * fv[i];
   }
return (Lnorm);
}

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int dresid (int n, double x[], double dfdx[])

#else

int dresid (n, x, dfdx)
int    n;
double x[], dfdx[];

#endif

/*  Dummy function for the conjgg() minimizer.  */
{
dfdx[n-1] = x[n-1];  /* avoid compiler warning messages */
return (0);
}

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int jacobn (int n, int ndim, int (*f)(int n, double *x, double *fv),
            double *x, double *fv, double *dfdx, int *nfe)

#else

int jacobn (n, ndim, f, x, fv, dfdx, nfe)
int    n, ndim;
int    (*f)();
double *x, *fv, *dfdx;
int    *nfe;

#endif

/* Purpose ...
   -------
   Evaluate the partial derivatives of the vector function
   using finite differences.

   Input ...
   -----
   n     : number of elements in the independent variable array
   ndim  : length of the rows in matrix dfdx
   f     : user supplied function (see zerov())
   x     : the current position
   fv    : the current function value
   nfe   : current function call count

   Output ...
   ------
   dfdx  : the partial derivatives
           dfdx[i][j] = d f[i](x) / dx[j],  i, j = 0 ... n-1
   nfe   : new function call count

   Version ... 1.0  August 1989
   -------          April  1990.  Insert missing free of memory on exit.

   This C code written by ...  Peter & Nigel,
   ----------------------      Design Software,
                               42 Gubberley St,
                               Kenmore, 4069,
                               Australia.

*/

{  /* begin jacobn() */
double step, xold, *fdelx, t;
int    i, j;

fdelx = (double *) NULL;
fdelx = (double *) malloc (n * sizeof(double));
if (fdelx == NULL)
   {
   /* could not allocate memory; warn the main program */
   return (1);
   }

/* in selecting the step size for the finite differences, we assume
   that the function variables are reasonably well scaled */
t = 0.0;
for (i = 0; i < n; ++i) t += fabs(fv[i]);
t /= (double) n;
step = sqrt(EPSILON) * (1.0 + t);

for (j = 0; j < n; ++j)
   {
   /* compute differences along the x[j] coordinate direction */
   xold = x[j];
   x[j] += step;
   (*f) (n, x, fdelx);
   for (i = 0; i < n; ++i)
      {
      /* finite difference for each function */
      dfdx[i * ndim + j] = (fdelx[i] - fv[i]) / step;
      }
   x[j] = xold;
   }

(*nfe) += n;
if (fdelx != NULL) { free (fdelx); fdelx = NULL; }
return (0);
}

/*-----------------------------------------------------------------*/
@
