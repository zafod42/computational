head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* bandfac.c
   Banded matrix factorization and solution.   */

/************************************************/
/*                                              */
/*  CMATH.  Copyright (c) 1989 Design Software  */
/*                                              */
/************************************************/

#include "cmath.h"
#include <stdio.h>
#ifndef NULL
#define NULL 0
#endif

#define  MIN(arg1,arg2)  ( ((arg1) < (arg2)) ? (arg1) : (arg2) )
#define  WINDEX(i,j,rowl)  ((i) * (rowl) + (j))

/*-----------------------------------------------------------------------------*/

#if (PROTOTYPE)

int  bandfac (double *w, int ndim, int n, int nbandl,
             int nbandu, int *flag)

#else

int  bandfac (w, ndim, n, nbandl, nbandu, flag)

double  *w;
int     ndim, n, nbandl, nbandu, *flag;

#endif

/* Purpose ...
   -------
   Returns in w the lu-factorization (obtained without pivoting), of the
   banded matrix A of order n with (nbandl + 1 + nbandu) bands or columns
   in the work array w.

   Input ...
   -----
   w         :  Work array of size (n, ndim) containing the
                interesting part of a banded matrix A, with the diagonals
                of A stored in the columns of w, while rows of A
                correspond to rows of w.
                Generally, each row of A has
                   nbandl bands left (below) of the diagonal,
                   1 main diagonal,
                   nbandu bands right (above) of the diagonal,
                and thus, with middle = nbandl,
                A (i+j,j) is in w(j,i+middle) for i = -nbandl,....,nbandu
                                                  j = 0,....,n-1.
                All other entries of w not referenced in this way with an
                entry of A are never referenced.
   ndim      :  Row length of the work array w, must be
                ndim >= nbandl + 1 + nbandu
   n         :  Number of rows in the banded matrix.
                i.e. the order of the matrix
   nbandl    :  Number of bands of A below the main diagonal.
   nbandu    :  Number of bands of A above the main diagonal.

   Output ...
   -----
   flag      :  Integer indicating success or failure.
                If flag = 1, one of the pivots was found to be zero
                indicating that A does not have an LU-factorization.
                If flag = 2, the number of rows, n, was < 1.
                If flag = 3, the last diagonal term was zero.
   w         :  Contains the lu-factorization of A into a unit lower triangular
                matrix l and an upper triangular matrix u (both banded) and
                stored over the corresponding entries of A.  This makes it
                possible to solve any particular linear system A*x = b for x by
                a call of bandslv (w, ndim, n, nbandl, nbandu, b)
                with the solution x contained in b on return.


   This C code written by ...  Nigel and Peter,
   ----------------------      Design Software,
                               42 Gubberley St,
                               KENMORE, 4069,
                               AUSTRALIA.

   Version ...  1.0  FORTRAN, 1987.
   -------      2.0  September, 1989.
                2.1  14 October, 1989.  pj changed the addressing slightly
                                        (and a few other bits and pieces)

   Notes  ...
   -----
   (1)  Gaussian elimination without pivoting is used.  The routine is
        intended for use with matrices A which do not require row interchanges
        during factorization, especially for the totally positive matrices
        which occur in spline calculations.
        NOT FOR USE WITH ARBITRARY BANDED MATRICES.

   (2)  Adapted from the FORTRAN code in:
        de Boor, C.  A Practical Guide to Splines.  Applied Mathematical
        Sciences Vol. 27.  Springer-Verlag, New York.  1978.

*/
/*-------------------------------------------------------------------------*/

{  /*  Beginning of procedure bandfac().  */
int    i, j, jmax, k, kmax, middle;
double factor, pivot;

*flag = 0;
/*for (i = 0; i < n; i++) for (j = 0; j < ndim; j++)
  printf ("w[%d] [%d] = %f\n", i, j, w[WINDEX(i,j,ndim)]);*/

/* Check user input. */
if (n < 1 || w == NULL || /*n < ndim ||*/ ndim < nbandl+1+nbandu)
   {
   *flag = 1;
   return (1);
   }

/* w(.,middle) contains the main diagonal of A. */
middle = nbandl;

if ( n > 1 )
   {
   /* we have a nontrivial case */
   if ( nbandl <= 0 )
      {
      /*  a is upper triangular, check that diagonal is nonzero. */
      for ( i = 0; i < n-1; i++)
         {
         if ( w[WINDEX(i,middle,ndim)] == 0.0 )
            {
            *flag = 2;
            return (2);
            }
         }
      }
   else if ( nbandu <= 0 )
      {
      /*  a is lower triangular.
          Check that diagonal is nonzero and divide each element
          in the column below the diagonal by the diagonal.
          This than becomes the multiplier to be saved for
          the forward pass in bandslv(). */
      for ( i = 0; i < n-1; i++)
         {
         pivot = w[WINDEX(i,middle,ndim)];
         if ( pivot == 0.0 )
            {
            *flag = 2;
            return (2);
            }
         jmax = MIN(nbandl, n - 1 - i);
         for ( j = 1; j <= jmax; j++)
            w[WINDEX(i+j,middle-j,ndim)] /= pivot;
         }
      }
   else
      {
      /*  a is not just a triangular matrix.
          Construct lu-factorization. */
      for ( i = 0;  i < n-1;  i++)
         {
         /*  The diagonal, w(i,middle) is pivot for i-th step.*/
         pivot = w[WINDEX(i,middle,ndim)];
         if ( pivot == 0.0 )
            {
            *flag = 2;
            return (2);
            }

         jmax = MIN(nbandl, n - 1 - i);  /* jmax is the number of (nonzero)
                                            entries in column i below the
                                            diagonal.*/
         kmax = MIN(nbandu, n - 1 - i);  /* kmax is the number of (nonzero)
                                            entries in row i to the
                                            right of the diagonal.*/

         for (j = 1; j <= jmax; j++)
            {
            /* divide each entry in column i below the diagonal by pivot.
               This is the multiplier that is used in the forward
               elimination.  It needs to be remembered for bandslv(). */
            factor = w[WINDEX(i+j,middle-j,ndim)] / pivot;
            w[WINDEX(i+j,middle-j,ndim)] = factor;

            /* Subtract a(i,i+k)*(i-th column multiplier) from
               (i+k)-th column below row i.*/
            for ( k = 1; k <= kmax; k++)
               w[WINDEX(i+j,middle-j+k,ndim)] -=
                              w[WINDEX(i,middle+k,ndim)] * factor;
            }

         }     /* all number rows minus 1. */
      }        /* end of LU factorization */

   }  /* end of nontrivial case */

/*  check last diagonal entry.  */
if ( w[WINDEX(n-1,middle,ndim)] == 0.0 )
   {
   *flag = 3;
   return (3);
   }

return (0);
}  /*  End of bandfac().  */

/*------------------------------------------------------------------------------*/

#if (PROTOTYPE)

int bandslv (double *w, int ndim, int n, int nbandl, int nbandu,
               double b[])

#else

int bandslv (w, ndim, n, nbandl, nbandu, b)

double  *w;
int     ndim, n, nbandl, nbandu;
double  b[];

#endif

/* Purpose ...
   -------
   Companion routine to bandfac.  It returns the solution x of the
   linear system A*x = b in place of b, given the lu-factorization
   for A in the work array w.

   Input ...
   -----
   w,
   ndim,
   n,
   nbandl,
   nbandu    :  Describe the lu-factorization of a
                banded matrix A of order n as constructed in bandfac.
                For details see banfac.
   b         :  Right hand side of the system to be solved.

   Output ...
   ------
   b         :  Contains the solution x, of order n.

   Notes ...
   -----
   (1)  With A = l*u as stored in w, the unit lower triangular system l(u*x) = b
        is solved for y =u*x, and y stored in b.  Then the upper triangular
        system u*x = y is solved for x.  The calculations are so
        arranged that the innermost loops stay within columns.

   (2)  Adapted from the FORTRAN code in:
        de Boor, C.  A Practical Guide to Splines.  Applied Mathematical
        Sciences Vol. 27.  Springer-Verlag, New York.  1978.

*/
/*-------------------------------------------------------------------------*/

{  /*  Beginning of procedure bandslv().  */

int    i, j, jmax, middle;

middle = nbandl;

if (n == 1)
   {  /* this is our trivial one element case */
   b[0] /= w[0];   /* just divide by the only diagonal element */
   return (0);
   }

if ( nbandl != 0 )
   {
   /* Forward pass.
      for i = 0, 1,....,n-2, subtract right side(i)*(i-th column of l)
      from right side (below i-th row) */
   for ( i = 0; i < n-1; i++)
      {
      jmax = MIN (nbandl, n-1-i);
      for (j = 1; j <= jmax; j++)
         b[i+j] -= b[i] * w[WINDEX(i+j,middle-j,ndim)];
      }
   }

/*  backward pass.
   for i = n, n-1,....,1, divide right side(i) by i-th diagonal
   entry of u, then subtract right side(i)*(i-th column of u) from right side
   (above i-th row)*/

if ( nbandu == 0 )
   {
   /* a is lower triangular and the forward elimination has been done,
      so just divide the RHS vector by the diagonal elements */
   for ( i = 0; i < n; i ++)
      {
      b[i] /= w[WINDEX(i,middle,ndim)];
      }
   return (0);
   }

/* Backsubstitution in earnest. */
for ( i = n-1; i >= 0; i--)
   {
   b[i] /= w[WINDEX(i,middle,ndim)];
   jmax = MIN (nbandu, i);
   for ( j = 1; j <= jmax; j++)
      b[i-j] -= b[i] * w[WINDEX(i-j,middle+j,ndim)];
   }

return (0);
}  /*  End of procedure bandslv().  */
/*-------------------------------------------------------------------------*/
@
