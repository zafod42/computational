head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* invertd.c
   Sample driver for invert().
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

#define mdim 10
#define INDX(i, j)  (i) * mdim + (j)
#define MAX(a, b)   (((a) > (b)) ? (a) : (b))

main ()
{
static double a[mdim * mdim], ainv[mdim * mdim], b[mdim];
double t, cond, aL1, ainvL1;
int n, i, j, flag;

n = 3;
b[0]    = 5.0; b[1]    = 12.0; b[2]    = 10.0;

a[INDX(0,0)] = 1.0; a[INDX(0,1)] = 2.0;  a[INDX(0,2)] = 2.0;
a[INDX(1,0)] = 3.0; a[INDX(1,1)] = 4.0;  a[INDX(1,2)] = 5.0;
a[INDX(2,0)] = 1.0; a[INDX(2,1)] = 7.0;  a[INDX(2,2)] = 2.0;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nTest driver for invert().\n");
invert (n, mdim, a, ainv, &flag);
printf ("\n%s\n", cmathmsg(INVERT_C, flag));

if (flag == 0)
   {
   /* Now, use inverse to solve equations */
   printf ("\nSolution    =     [ ");
   for(i = 0; i < n; i++)
      {
      t = 0.0;
      for (j = 0; j < n; ++j) t += ainv[INDX(i,j)] * b[j];
      printf ("%8.3f, ", t);
      }
   printf ("]\n");
   printf ("Correct answer is [    1.000,    1.000,    1.000, ]\n");

   /* compute condition number using L1 norms */
   aL1 = 0.0;
   ainvL1 = 0.0;
   for (i = 0; i < n; ++i)
      {
      for (j = 0; j < n; ++j)
         {
         aL1    = MAX(fabs(a[INDX(i,j)]), aL1);
         ainvL1 = MAX(fabs(ainv[INDX(i,j)]), ainvL1);
         }
      }
   cond = aL1 * ainvL1;
   printf ("\nCondition number = %e\n", cond);
   }

return (0);
}
@
