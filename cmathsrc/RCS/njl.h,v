head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@
/*  B-spline knot vector interval search.  */
int  interv (double knots[],
             int numknots,
             double parameter,
             int *left, int *flag);
int  init_interv (void);
int  bisect (void);

/*  B-spline basis function calculation.  */
int  init_bsplvb (int order, int *flag);
int  bsplvb (double t[],  int jhigh, int index,
             double parameter, int left,
             double biatp[], int *flag);
int  free_bsplvb (void);



/*  Banded matrix solver.  */
int bandfac (double *w, int nroww, int nrow, int nbandl,
            int nbandu, int *flag);
int bandsolve (double *w, int nroww, int nrow, int nbandl, int nbandu,
               double b[]);

/*  Fit B-spline to (x,y) data set.  */
int  bspline (int number_of_data, double *xdata, double *ydata, int order,
              double *knots, int number_cpnts, double *xcpnts,
              double *ycpnts, int *flag);

/*  B-spline evaluation.  */
double  bseval (int index, double parameter, int left, double *knots,
                double *cpnts, int order, int *flag);

/*  B-spline derivative control points.  */
int  bs_deriv_cpnts (double knots[], int number_cpnts,
                     double derivm1_cpnts[], int order, int ith_deriv,
                     double deriv_cpnts[]);

 /*  B-spline derivative evaluation.  */
double  bsderiv (int index, double parameter, int left, double knots[],
                double cpnts[], int order, int ith_deriv, int *flag);


int    init_bsplvb ();
int    bsplvb ();                /*  B-spline basis function calculation.  */
int    free_bsplvb ();

int    interv ()                 /*  B-spline knot vector interval search.  */
int    init_interv();
int    bisect ();

int    bandfac ();               /*  Banded matrix factorization    */
int    bandsolve ();

int    bspline ();               /*  Fit B-spline to (x,y) data set.  */

double bseval ();                /*  B-spline evaluation.  */

int  bs_deriv_cpnts ();          /*  B-spline derivative control points.  */

double  bsderiv ();              /*  B-spline derivative evaluation.  */
@
