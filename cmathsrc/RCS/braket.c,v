head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* braket.c
   Bracket a minimum along a line.  */

int braket (f, pvect, direct, n,
            ax, bx, cx, bound, fa, fb, fc,
            uvect, nfe, flag)

double  (*f) ();
double  pvect[], direct[];
int     n;
double  *ax, *bx, *cx, bound, *fa, *fb, *fc;
double  uvect[];
int     *nfe, *flag;

/* Purpose ...
   -------
   Given a function F, a point in N-dimensional space,
   a direction to search and given distinct initial parameter
   values AX and BX, this routine searches in the downhill
   direction (defined by the function evaluated at the initial points)
   and returns new parameter values AX, BX, CX which bracket
   a minimum of the function.

   Input ...
   -----
   f      : user defined objective function that returns
            a double precision value for each n-dimensional point
   pvect  : origin for line along which to search
   direct : direction vector for search
   n      : number of elements in pvect
   ax     : guess for left bracketing parameter
   bx     : guess for right bracketing parameter
   bound  : limit on magnitude of ax, bx, cx (say 1000.0)
   nfe    : number of function evaluations so far

   Output ...
   ------
   ax, bx, cx : values of parameter bracketing a minimum
                such that fc < fb < fa and cx lies between
                ax and bx
   fa, fb, fc : values of the objective function at ax, bx and cx
   nfe        : number of function evaluations
   flag       : = 0, normal return
		= 1, could not bracket within bounds

   Workspace ...
   ---------
   uvect  : n-dimensional points corresponding to parameter u
            where uvect[jj] = pvect[jj] + u * direct[jj]

   Version ... 1.0, October 1988.
   -------

   Notes ...
   -----
   (1) gold = default ratio by which successive intervals are
              magnified
   (2) glimit = maximum magnification allowed by the parabolic-fit
                step
   (3) Adapted from the FORTRAN code MNBRAK in
       W.H. Press et al
       Numerical Recipes. The art of scientific computing.
       by
       P.A. Jacobs & N.J. Lott
       Department of Mechanical Engineering
       University of Queensland
----------------------------------------------------------------------*/

#define  gold       1.618034
#define  glimit     100.0
#define  tiny       1.0e-20
#define  zero       0.0
#define  MAX(a,b)   (a > b) ? a : b
#define  SIGN(a,b)  ((b >= 0.0) ? fabs(a) : -fabs(a))

{  /* begin braket() */

/* local variables */
double axL, bxL, cxL, faL, fbL, fcL;
int jj;
double  u, fu, temp, r, q, ulim;

*flag = 0;
axL = *ax;
bxL = *bx;

for (jj = 0; jj < n; ++jj)  uvect[jj] = pvect[jj] + axL * direct[jj];
faL = (*f) (uvect);
for (jj = 0; jj < n; ++jj)  uvect[jj] = pvect[jj] + bxL * direct[jj];
fbL = (*f) (uvect);
(*nfe) += 2;

if (fbL > faL)
   {
   /* Switch roles of A and B so that we go downhill in the
      direction from A to B  */
   temp = axL;
   axL = bxL;
   bxL = temp;
   temp = fbL;
   fbL = faL;
   faL = temp;
   }

/*  First guess for C  */
cxL = bxL + gold * (bxL - axL);
for (jj = 0; jj < n; ++jj)  uvect[jj] = pvect[jj] + cxL * direct[jj];
fcL = (*f) (uvect);
++(*nfe);

/* keep returning here until we bracket */
while (fbL >= fcL)
   {
   /* Compute U by parabolic extrapolation until we bracket.  */
   r = (bxL - axL) * (fbL - fcL);
   q = (bxL - cxL) * (fbL - faL);
   /* Tiny is used to prevent possible division by zero. */
   /*
   u = bxL - ((bxL - cxL) * q - (bxL - axL) * r) /
             (2.0 * SIGN(MAX(fabs(q-r),tiny),q-r));
   */
   temp = fabs(q-r);
   if (tiny > temp) temp = tiny;
   if ((q-r) < 0.0) temp = -temp;
   u = bxL - ((bxL - cxL) * q - (bxL - axL) * r) / (2.0 * temp);

   for (jj = 0; jj < n; ++jj)  uvect[jj] = pvect[jj] + u * direct[jj];
   /* We won't go farther than ulim.  */
   ulim = bxL + glimit * (cxL - bxL);

   /* Now test various possibilities... */
   if ((bxL - u) * (u-cxL) > zero)
      {
      /* Parabolic U is between B and C, try it */
      fu = (*f) (uvect);
      if (fu < fcL)
         { /* Got a minimum between B and C */
         axL = bxL;
         faL = fbL;
         bxL = u;
         fbL = fu;
         /* exit from this step (iteration) */
         continue;
	 }
      else if (fu > fbL)
	 { /* Got a minimum between A and U  */
         cxL = u;
         fcL = fu;
         /* exit from this step */
         continue;
         }
      /* Parabolic fit was no use. Use default magnification. *
      u = cxL + gold * (cxL - bxL);
      for (jj = 0; jj < n; ++jj)  uvect[jj] = pvect[jj] + u * direct[jj];
      fu = (*f) (uvect);
      ++(*nfe);
      }

   elseif ((cxL - u) * (u - ulim) > zero)
      {  /* Parabolic fit is between C and its allowed limit. */
      fu = (*f) (uvect);
      ++(*nfe);
      if (fu < fcL)
	 {
         bxL = cxL;
         fbL = fcL;
         cxL = u;
         fcL = fu;
         u = cxL + gold * (cxL - bxL);
         for (jj = 0; jj < n; ++jj) uvect[jj] = pvect[jj] + u * direct[jj];
         fu = (*f) (uvect);
         ++(*nfe);
         }
      }

   else if ((u - ulim) * (ulim - cxL) >= zero)
      { /* Limit parabolic U to its maximum allowed value. */
      u = ulim;
      for (jj = 0; jj < n; ++jj)  uvect[jj] = pvect[jj] + u * direct[jj];
      fu = (*f) (uvect);
      ++(*nfe);
      }

   else
      { /* Reject parabolic U, use default magnification. */
      u = cxL + gold * (cxL - bxL);
      for (jj = 0; jj < n; ++jj)  uvect[jj] = pvect[jj] + u * direct[jj];
      fu = (*f) (uvect);
      ++(*nfe);
      }

   /* Eliminate oldest point and continue.  */
   axL = bxL;
   faL = fbL;
   bxL = cxL;
   fbL = fcL;
   cxL = u;
   fcL = fu;

   /* Check limit on parameter values  */
   if (fabs(u) > bound)
      { /* We are out of bounds without bracketing  */
      *flag = 1;
      *ax = axL;
      *bx = bxL;
      *cx = cxL;
      *fa = faL;
      *fb = fbL;
      *fc = fcL;
      return(0);
      }

   /*  Take another step  */
   }

*ax = axL;
*bx = bxL;
*cx = cxL;
*fa = faL;
*fb = fbL;
*fc = fcL;
return(0);
}   /* end of braket() */

#undef  gold
#undef  glimit
#undef  tiny
#undef  zero
#undef  MAX
#undef  SIGN@
