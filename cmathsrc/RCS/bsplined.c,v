head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/*  bsplined.c
    Sample driver for B-spline fitting routine bspline().
*/

#include  <stdio.h>
#include  <math.h>
#include  "cmath.h"
#if (STDLIBH)
#include <stdlib.h>
#endif

/*  Order of b-splines.  Must be <= number of data points.  */
#define  ORDER  4

main ()  /*  Beginning of program bsplined.c */

{
#define  ndim 11

int     i, j, flag, index;
int     number_of_data;
double  temp_float, xdata[ndim], ydata[ndim];
double  param, deltaparam, xcoord, ycoord;
struct  BSPLSTRC  xbspl, ybspl, xdbspl, ydbspl;
double  dxdu, dydu;
printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nSample driver for bspline(), bseval(), bsdcpnts().\n\n");
printf ("Fit a %1dth order B-spline to f(x) = exp (x), x = 0, 0.1,  ... 1.0\n",
         ORDER);

number_of_data = 11;
temp_float = 1.0 / (double) (number_of_data-1);
xdata[0] = 0.0;  ydata[0] = 1.0;
for (i = 1; i < number_of_data; ++i)
   {
   xdata[i] = xdata[i-1] + temp_float;
   ydata[i] = exp (xdata[i]);
   }

/*
  Solve for the control points of a B-spline of order ORDER for the
  above data.
*/
bspline (number_of_data, xdata, ydata, ORDER, &xbspl, &ybspl, &flag);
printf ("%s\n\n", cmathmsg (BSPLINE_C, flag));
if (flag != 0)  {
   printf ("Solution for control points unsuccesful.");
   exit (1);
}

for ( i = 0 ; i  < number_of_data ;  i ++)
   printf ("xdata %8.3lf -> xcp %8.3lf,  ydata %8.3lf -> ycp %8.3lf\n",
            xdata[i], xbspl.cpnts[i],  ydata[i], ybspl.cpnts[i]);
/*
  Set up static local memory for bseval(), bsplvb().
*/
bsplinit (ORDER, &flag);
cmathmsg (BSPLINIT_C, flag);
index = 1;
param = 0.0e0;
number_of_data = 11;
deltaparam = (double) (xbspl.knots[xbspl.nknot-1]) /
                                         (double) (number_of_data - 1);
bsdcpnts (&xbspl, &xdbspl, &flag);
if (flag != 0)  cmathmsg (BSDCPNTS_C, flag);
bsdcpnts (&ybspl, &ydbspl, &flag);
if (flag != 0)  cmathmsg (BSDCPNTS_C, flag);
printf ("\nParameter     x       dx/du       y       dy/du     dy/dx");
printf ("      exp(x)\n");
printf ("--------------------------------------------------------------");
printf ("----------\n");
for (j = 1; j <= number_of_data; j++)  {
   xcoord = bseval (index, param, &xbspl, &flag);
   if (flag != 0)  printf ("%s\n\n", cmathmsg (BSEVAL_C, flag));
   dxdu = bseval (index, param, &xdbspl, &flag);
   if (flag != 0)  printf ("%s\n\n", cmathmsg (BSEVAL_C, flag));

   ycoord = bseval (index, param, &ybspl, &flag);
   if (flag != 0)  printf ("%s\n\n", cmathmsg (BSEVAL_C, flag));
   dydu = bseval (index, param, &ydbspl, &flag);
   if (flag != 0)  printf ("%s\n\n", cmathmsg (BSEVAL_C, flag));

   printf ("%8.4f  %8.4f  %8.4f  %8.4f  %8.4f  %8.4f  %8.4f\n",
	    param, xcoord, dxdu, ycoord, dydu, dydu/dxdu, exp(xcoord));
   param = param + deltaparam;
   if (param > 1.0)  param = 1.0e0;
}
bsplend ();
bspldest (&xbspl, &flag);  bspldest (&ybspl, &flag);
bspldest (&xdbspl, &flag); bspldest (&ydbspl, &flag);

return (0);
}  /*  End of program bsplined.c */
@
