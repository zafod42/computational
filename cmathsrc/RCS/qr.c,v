head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	98.08.08.11.36.05;	author peterj;	state Exp;
branches;
next	;


desc
@CMATH 1989 code
@


1.1
log
@Initial revision
@
text
@/* qr.c
   QR eigenvalue and eigenvector solver.
*/

/************************************************/
/*                                              */
/*  CMATH.  Copyright (c) 1989 Design Software  */
/*                                              */
/************************************************/


#include "cmath.h"
#if (STDLIBH)
#include <stdlib.h>
#endif
#include <stdio.h>
#include <math.h>

#ifndef NULL
#define  NULL  0
#endif


#define  zero  0.0
#define  one   1.0
#define  two   2.0
#define  MINDX(i,j,rowsize)  (((i)-1) * (rowsize) + (j)-1)
#define  VINDX(j)            ((j)-1)
#define  MIN(a,b)            (((a) < (b)) ? (a) : (b))
#define  SIGN(a,b)           (((b) >= 0.0) ? fabs(a) : -fabs(a))

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int qr (int nm, int n, double *a,
        double *wr, double *wi, int *ierr)

#else

int qr (nm, n, a, wr, wi, ierr)
int    nm, n;
double *a;
double *wr, *wi;
int    *ierr;

#endif

/* Purpose ...
   -------
   Computes eigenvalues of real general matrix by the qr method.

   Input...
   -----
   nm    : declared dimension of arrays.
   n     : order of system. n <= nm.
   a     : matrix to be analysed. Minimum dimension a[n][nm].
           The contents of a are changed by qrv().
           Elements of a are a[0..n-1][0..n-1].

   Output...
   ------
   wr    : vector containing real parts of eigenvalues of a.
           There is no particular order but conjugate pairs appear
           together with the value having positive imaginary part
           first.
           Minimum dimension wr[n].
           Elements of wr are wr[0..n-1].
   wi    : vector containing imaginary parts of eigenvalues.
           Minimum dimension wi[n].
           Elements of wi are wi[0..n-1].
   ierr  : error flag.
           =  0, normal return.
           = -1, could not allocate work space
           = -2, incorrect user input: e.g. nm < 1, n > nm,
                 or null pointers for the user arrays
           >  0, more than 30 iterations required to determine
                 an eigenvalue.  The eigenvalues in wr ,wi are
                 correct for ierr,ierr+1,..,n-1.

   Workspace ...
   ---------
   work  : Minimum dimension work[n].
   iwork : Minimum dimension iwork[n].

   This C code written by ...  Peter & Nigel,
   ----------------------      Design Software,
                               42 Gubberley St,
                               Kenmore, 4069,
                               Australia.

   Version ... 1.0, September 1989
   -------

   Notes ...
   -----
   (1) The FORTRAN version of this program was published in :
       B.T.Smith, J.M.Boyle, J.J.Dongarra, B.S.Garbow, Y.Ikebe,
       V.C.Klema, C.B.Moler "Matrix eigensystem routines - eispack
       guide"  Lecture notes in computer science, vol 6,
       Springer-Verlag,Berlin (1976).
   (2) Recall that the FORTRAN code used arrays with indices 1..n.
       The looping indices in the following routines use the 1..n
       convention but the macros MINDX and VINDX translate any
       array indices to 0..n-1.

*/

{  /* begin qr() */

int    Low, igh;
int    *iwork;
double *work;

*ierr = 0;
iwork = (int *) NULL;
work = (double *) NULL;

if (a == NULL || wr == NULL || wi == NULL || nm < 1 || n > nm)
    {
    *ierr = -2;
    goto Bailout;
    }

iwork = (int *) malloc (nm * sizeof(int));
if (iwork == NULL)
   {
   *ierr = -1;
   goto Bailout;
   }
work = (double *) malloc (nm * sizeof(double));
if (work == NULL)
   {
   *ierr = -1;
   goto Bailout;
   }

balanc (nm, n, a, &Low, &igh, work);
elmhes (nm, n, Low, igh, a, iwork);
hqr    (nm, n, Low, igh, a, wr, wi, ierr);

Bailout:
if (iwork != NULL) { free(iwork); iwork = (int *) NULL; }
if (work != NULL) { free(work); work = (double *) NULL; }
return(0);
}

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int qrv (int nm, int n, double *a,
         double *wr, double *wi, double *z,
         int *ierr)

#else

int qrv (nm, n, a, wr, wi, z, ierr)
int    nm, n;
double *a;
double *wr, *wi, *z;
int    *ierr;

#endif

/* Purpose ...
   -------
   Computes eigenvalues and eigenvectors of real general matrix
   by the qr method.

   Input...
   -----
   nm    : declared dimension of arrays.
   n     : order of system. n <= nm.
   a     : matrix to be analysed. Minimum dimension a[n][nm].
           The contents of a are changed by qr().
           Elements of a are a[0..n-1][0..n-1].

   Output...
   ------
   wr    : vector containing real parts of eigenvalues of a.
           There is no particular order but conjugate pairs appear
           together with the value having positive imaginary part
           first.
           Minimum dimension wr[n].
           Elements of wr are wr[0..n-1].
   wi    : vector containing imaginary parts of eigenvalues.
           Minimum dimension wi[n].
           Elements of wi are wi[0..n-1].
   z     : If wi[j] is 0.0 (real eigenvalue),then z[i][j]
           contains corresponding eigenvector.
           If wi[j] is not 0.0 (complex eigenvalue) then z[i][j]
           and z[i][j+1] contain real and imaginary parts of
           eigenvector corresponding to eigenvalue with positive
           imaginary part.
           The conjugate of this vector corresponds to the conjugate
           of this eigenvalue,but is not listed.
           Minimum dimension z[n][nm]. Elements are z[0..n-1][0..n-1].
   ierr  : error flag.
           =  0, normal return.
           = -1, could not allocate work space
           = -2, incorrect user input: e.g. nm < 1, n > nm,
                 or null pointers for the user arrays
           >  0, more than 30 iterations required to determine
                 an eigenvalue.  The eigenvalues in wr ,wi are
                 correct for ierr,ierr+1,..,n-1, but no
                 vectors are computed.

   Workspace ...
   ---------
   work  : Minimum dimension work[n].
   iwork : Minimum dimension iwork[n].

   This C code written by ...  Peter & Nigel,
   ----------------------      Design Software,
                               42 Gubberley St,
                               Kenmore, 4069,
                               Australia.

   Version ... 1.0, July 1989
   -------

   Notes ...
   -----
   (1) The FORTRAN version of this program was published in :
       B.T.Smith, J.M.Boyle, J.J.Dongarra, B.S.Garbow, Y.Ikebe,
       V.C.Klema, C.B.Moler "Matrix eigensystem routines - eispack
       guide"  Lecture notes in computer science, vol 6,
       Springer-Verlag,Berlin (1976).
   (2) Recall that the FORTRAN code used arrays with indices 1..n.
       The looping indices in the following routines use the 1..n
       convention but the macros MINDX and VINDX translate any
       array indices to 0..n-1.

*/

{  /* begin qr() */

int    Low, igh;
int    *iwork;
double *work;

*ierr = 0;
iwork = (int *) NULL;
work = (double *) NULL;

if (a == NULL || z == NULL || wr == NULL || wi == NULL ||
    nm < 1 || n > nm)
    {
    *ierr = -2;
    goto Bailout;
    }

iwork = (int *) malloc (nm * sizeof(int));
if (iwork == NULL)
   {
   *ierr = -1;
   goto Bailout;
   }
work = (double *) malloc (nm * sizeof(double));
if (work == NULL)
   {
   *ierr = -1;
   goto Bailout;
   }

balanc (nm, n, a, &Low, &igh, work);
elmhes (nm, n, Low, igh, a, iwork);
eltran (nm, n, Low, igh, a, iwork, z);
hqr2   (nm, n, Low, igh, a, wr, wi, z, ierr);

if (*ierr == 0) balbak (nm, n, Low, igh, work, n, z);

Bailout:
if (iwork != NULL) { free(iwork); iwork = (int *) NULL; }
if (work != NULL) { free(work); work = (double *) NULL; }
return(0);
}

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int balanc (int nm, int n, double *a, int *low, int *igh,
            double *scale)

#else

int balanc (nm, n, a, low, igh, scale)
int    nm, n;
double *a;
int    *low, *igh;
double *scale;

#endif

/* Purpose ...
   -------
   Balance a real general matrix and isolate the eigenvalues
   whenever possible.

   Input ...
   -----
   nm    : declared dimension of arrays
   n     : order of matrix
   a     : matrix to be balanced.

   Output ...
   ------
   a     : balanced matrix
   low   : boundary index for the scaled matrix
   igh   : boundary index for the scaled matrix
   scale : vector containing infomation about the transformations
*/

{  /* begin balanc() */

int    i, j, k, L, m;
double c, f, g, r, s, b2, radix;
int    noconv;

/* radix is a machine dependent parameter specifying
   the base of the machine floating point representation.  */

radix = 2.0;
b2 = radix * radix;

k = 1;
L = n;
goto L100;

/* Search for rows isolating an eigenvalue and push them down */

L80:
if (L == 1) goto L280;
--L;

L100:
for (j = L; j >= 1; --j)
   {
   for (i = 1; i <= L; ++i)
      {
      if (i != j) { if (a[MINDX(j,i,nm)] != zero) goto L120; }
      }

   m = L;

   /* In-line procedure for row and column exchange */
   scale[VINDX(m)] = (double) j;
   if (j != m)
      {
      for (i = 1; i <= L; ++i)
         {
         f = a[MINDX(i,j,nm)];
         a[MINDX(i,j,nm)] = a[MINDX(i,m,nm)];
         a[MINDX(i,m,nm)] = f;
         }
      for (i = k; i <= n; ++i)
         {
         f = a[MINDX(j,i,nm)];
         a[MINDX(j,i,nm)] = a[MINDX(m,i,nm)];
         a[MINDX(m,i,nm)] = f;
         }
      }

   goto L80;
   L120:;
   }

goto L140;

L130:

/* Search for columns isolating an eigenvalue and push them left */
++k;

L140:
for (j = k; j <= L; ++j)
   {
   for (i = k; i <= L; ++i)
      {
      if (i != j) { if (a[MINDX(i,j,nm)] != zero) goto L170; }
      }
   m = k;

   /* In-line procedure for row and column exchange */
   scale[VINDX(m)] = (double) j;
   if (j != m)
      {
      for (i = 1; i <= L; ++i)
         {
         f = a[MINDX(i,j,nm)];
         a[MINDX(i,j,nm)] = a[MINDX(i,m,nm)];
         a[MINDX(i,m,nm)] = f;
         }
      for (i = k; i <= n; ++i)
         {
         f = a[MINDX(j,i,nm)];
         a[MINDX(j,i,nm)] = a[MINDX(m,i,nm)];
         a[MINDX(m,i,nm)] = f;
         }
      }

   goto L130;

   L170:;
   }

/* Now balance the submatrix in rows k to L */
for (i = k; i <= L; ++i)  scale[VINDX(i)] = one;

/* Iterative loop for norm reduction. */
L190:
noconv = 0;

for (i = k; i <= L; ++i)
   {
   c = zero;
   r = zero;
   for (j = k; j <= L; ++j)
      {
      if (j != i)
         {
         c += fabs(a[MINDX(j,i,nm)]);
         r += fabs(a[MINDX(i,j,nm)]);
         }
      }

   g = r / radix;
   f = one;
   s = c + r;

   L210:
   if (c < g)
      {
      f *= radix;
      c *= b2;
      goto L210;
      }
   g = r * radix;
   L230:
   if (c >= g)
      {
      f /= radix;
      c /= b2;
      goto L230;
      }

   /* Now balance */
   if (((c + r) / f) < (0.95 * s))
      {
      g = one / f;
      scale[VINDX(i)] *= f;
      noconv = 1;
      for (j = k; j <= n; ++j) a[MINDX(i,j,nm)] *= g;
      for (j = 1; j <= L; ++j) a[MINDX(j,i,nm)] *= f;
      }

   L270:;
   }

if (noconv) goto L190;

L280:
*low = k;
*igh = L;

return(0);
}

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int elmhes (int nm, int n, int low, int igh, double *a, int *intg)

#else

int elmhes (nm, n, low, igh, a, intg)
int    nm, n, low, igh;
double *a;
int    *intg;

#endif

/* Purpose ...
   -------
   Reduce a real general matrix to upper Hessenberg form using
   elementary similarity transformations.

   Input ...
   -----
   n     : order of matrices
   nm    : declared dimension of arrays
   low   : boundary index from balanc()
   igh   : boundary index from balanc()
   a     : matrix to be reduced

   Output ...
   ------
   a     : upper Hessenberg matrix and the multipliers used
           in the reduction
   intg  : vector identifying row and column interchanges

*/

{  /* begin elmhes() */

int    i, j, m, la, kp1, mm1, mp1;
double x, y;

la = igh - 1;
kp1 = low + 1;
if (la < kp1) goto L200;

for (m = kp1; m <= la; ++m)
   {
   mm1 = m - 1;
   x = zero;
   i = m;

   for (j = m; j<= igh; ++j)
      {
      if (fabs(a[MINDX(j,mm1,nm)]) > fabs(x))
         {
         x = a[MINDX(j,mm1,nm)];
         i = j;
         }
      }

   intg[VINDX(m)] = i;
   if (i != m)
      {
      /* Interchange for rows and columns of a */
      for (j = mm1; j <= n; ++j)
         {
         y = a[MINDX(i,j,nm)];
         a[MINDX(i,j,nm)] = a[MINDX(m,j,nm)];
         a[MINDX(m,j,nm)] = y;
         }

      for (j = 1; j <= igh; ++j)
         {
         y = a[MINDX(j,i,nm)];
         a[MINDX(j,i,nm)] = a[MINDX(j,m,nm)];
         a[MINDX(j,m,nm)] = y;
         }
      }

   L130:
   if (x != zero)
      {
      mp1 = m + 1;
      for (i = mp1; i <= igh; ++i)
         {
         y = a[MINDX(i,mm1,nm)];
         if (y != zero)
            {
            y /= x;
            a[MINDX(i,mm1,nm)] = y;
            for (j = m; j <= n; ++j)
               a[MINDX(i,j,nm)] -= (y * a[MINDX(m,j,nm)]);
            for (j = 1; j <= igh; ++j)
               a[MINDX(j,m,nm)] += (y * a[MINDX(j,i,nm)]);
            }
         }
      }
   }

L200: return(0);
}  /* end of elmhes() */

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int eltran (int nm, int n, int low, int igh, double *a,
            int *intg, double *z)

#else

int eltran (nm, n, low, igh, a, intg, z)
int    nm, n, low, igh;
double *a;
int    *intg;
double *z;

#endif

/* Purpose ...
   -------
   Accumulate the stabilized elementary similarity transformations
   used in the reduction of a real general matrix to upper
   Hessenberg form by elmhes().

   Input ...
   -----
   n     : order of matrices
   nm    : declared dimension of arrays
   low   : boundary index from balanc()
   igh   : boundary index from balanc()
   a     : matrix from elmhes()
   intg  : vector identifying row and column interchanges in a

   Output ...
   ------
   a     : transformation matrix

*/

{  /* begin eltran() */

int i, j, kl, mp, mp1;

/* Initialize z to identity matrix */
for (i = 1; i <= n; ++i)
   {
   for (j = 1; j <= n; ++j) z[MINDX(i,j,nm)] = zero;
   z[MINDX(i,i,nm)] = one;
   }

kl = igh - low - 1;
if (kl < 1) goto L200;

for (mp=igh-1; mp >= low+1; --mp)
   {
   mp1 = mp + 1;

   for (i = mp1; i <= igh; ++i)  z[MINDX(i,mp,nm)] = a[MINDX(i,mp-1,nm)];

   i = intg[VINDX(mp)];
   if (i != mp)
      {
      for (j = mp; j <= igh; ++j)
         {
         z[MINDX(mp,j,nm)] = z[MINDX(i,j,nm)];
         z[MINDX(i,j,nm)] = zero;
         }
      z[MINDX(i,mp,nm)] = one;
      }
   }

L200: return(0);
}  /* end of eltran() */

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int hqr (int nm, int n, int Low, int igh, double *h,
         double *wr, double *wi, int *ierr)

#else

int hqr (nm, n, Low, igh, h, wr, wi, ierr)
int    nm, n, Low, igh;
double *h;
double *wr, *wi;
int    *ierr;

#endif

/* Purpose ...
   -------
   Compute the eigenvalues and eigenvectors of a real upper
   Hessenberg matrix using the QR method.

   Input ...
   -----
   nm    : declared dimension of arrays
   n     : order of matrix
   Low   : boundary index for the balanced matrix
   igh   : boundary index for the balanced matrix
   h     : upper Hessenberg matrix

   Output ...
   ------
   h     : the contents are changed by hqr2()
   wr    : real parts of the eigenvalues
   wi    : imaginary parts of the eigenvalues
   z     : transformation matrix

*/

{  /* begin hqr() */

int    i, j, k, L, m, en, LL, mm, na;
int    its, mp2, enm2;
double p, q, r, s, t, w, x, y, zz, machep;
int    notlas;

/* machep is a machine dependent parameter specifying
   the relative precision of floating point arithmetic. */

machep = EPSILON;

*ierr = 0;

/* store roots isolated by balanc */
for (i = 1; i <= n; ++i)
   {
   if (i < Low || i > igh)
      {
      wr[VINDX(i)] = h[MINDX(i,i,nm)];
      wi[VINDX(i)] = zero;
      }
   }

en = igh;
t = zero;

/* Search for next eigenvalue */
L60:
if (en < Low) return(0);
its = 0;
na = en - 1;
enm2 = en - 2;

/* Look for single small sub-diagonal element */

/* for L=en step -1 until Low do ... */
L70:
for (LL = Low; LL <= en; ++LL)
   {
   L = en + Low - LL;
   if (L == Low) break;
   if (fabs(h[MINDX(L,L-1,nm)]) <= machep * (fabs(h[MINDX(L-1,L-1,nm)])
       + fabs(h[MINDX(L,L,nm)]))) break;
   }

/* Form shift */

L100:
x = h[MINDX(en,en,nm)];
if (L == en) goto L270;
y = h[MINDX(na,na,nm)];
w = h[MINDX(en,na,nm)] * h[MINDX(na,en,nm)];
if (L == na) goto L280;
if (its == 30)
   {
   /* Set error -- no convergence to an
      eigenvaLue after 30 iterations */
   *ierr = en;
   return (0);
   }

if (its == 10 || its == 20)
   {
   /* Form exceptional shift */
   t += x;
   for (i = Low; i <= en; ++i)  h[MINDX(i,i,nm)] -= x;
   s = fabs(h[MINDX(en,na,nm)]) + fabs(h[MINDX(na,enm2,nm)]);
   x = 0.75 * s;
   y = x;
   w = -0.4375 * s * s;
   }

++its;

/* Look for two consecutive small sub-diagonal elements. */

/* for m=en-2 step -1 untiL L do ... */
for (mm = L; mm <= enm2; ++mm)
   {
   m = enm2 + L - mm;
   zz = h[MINDX(m,m,nm)];
   r = x - zz;
   s = y - zz;
   p = (r * s - w) / h[MINDX(m+1,m,nm)] + h[MINDX(m,m+1,nm)];
   q = h[MINDX(m+1,m+1,nm)] - zz - r - s;
   r = h[MINDX(m+2,m+1,nm)];
   s = fabs(p) + fabs(q) + fabs(r);
   p /= s;
   q /= s;
   r /= s;
   if (m == L) break;
   if (fabs(h[MINDX(m,m-1,nm)]) * (fabs(q) + fabs(r)) <=
       machep * fabs(p) * (fabs(h[MINDX(m-1,m-1,nm)]) + fabs(zz) +
       fabs(h[MINDX(m+1,m+1,nm)]))) break;
   }

L150:
mp2 = m + 2;

for (i = mp2; i <= en; ++i)
   {
   h[MINDX(i,i-2,nm)] = zero;
   if (i != mp2) h[MINDX(i,i-3,nm)] = zero;
   }

/* double qr step involving rows L to en and coLumns m to en  */
for (k = m; k <= na; ++k)
   {
   notlas = (k != na);
   if (k != m)
      {
      p = h[MINDX(k,k-1,nm)];
      q = h[MINDX(k+1,k-1,nm)];
      r = zero;
      if (notlas) r = h[MINDX(k+2,k-1,nm)];
      x = fabs(p) + fabs(q) + fabs(r);
      if (x == zero) continue;
      p /= x;
      q /= x;
      r /= x;
      }
   s = SIGN(sqrt(p*p+q*q+r*r),p);
   if (k == m)
      {
      if (L != m) h[MINDX(k,k-1,nm)] = -h[MINDX(k,k-1,nm)];
      }
   else
      {
      h[MINDX(k,k-1,nm)] = -s * x;
      }
   p += s;
   x = p / s;
   y = q / s;
   zz = r / s;
   q /= p;
   r /= p;
   /* Row modification */
   for (j = k; j <= en; ++j)
      {
      p = h[MINDX(k,j,nm)] + q * h[MINDX(k+1,j,nm)];
      if (notlas)
         {
         p += (r * h[MINDX(k+2,j,nm)]);
         h[MINDX(k+2,j,nm)] -= (p * zz);
         }
      h[MINDX(k+1,j,nm)] -= (p * y);
      h[MINDX(k,j,nm)] -= (p * x);
      }

   j = MIN(en,k+3);

   /* Column modification */
   for (i = L; i <= j; ++i)
      {
      p = x * h[MINDX(i,k,nm)] + y * h[MINDX(i,k+1,nm)];
      if (notlas)
         {
         p += (zz * h[MINDX(i,k+2,nm)]);
         h[MINDX(i,k+2,nm)] -= (p * r);
         }
      h[MINDX(i,k+1,nm)] -= (p * q);
      h[MINDX(i,k,nm)] -= p;
      }
   }

goto L70;

L270: /* One root found. */
wr[VINDX(en)] = x + t;
wi[VINDX(en)] = zero;
en = na;
goto L60;

L280: /* Two roots found. */
p = (y - x) / two;
q = p * p + w;
zz = sqrt(fabs(q));
x = x + t;

if (q >= zero)
   {  /* Real pair. */
   zz = p + SIGN(zz,p);
   wr[VINDX(na)] = x + zz;
   wr[VINDX(en)] = wr[VINDX(na)];
   if (zz != zero) wr[VINDX(en)] = x - w / zz;
   wi[VINDX(na)] = zero;
   wi[VINDX(en)] = zero;
   }
else
   { /* Complex pair */
   wr[VINDX(na)] = x + p;
   wr[VINDX(en)] = x + p;
   wi[VINDX(na)] = zz;
   wi[VINDX(en)] = -zz;
   }

en = enm2;
goto L60;

}  /* end of hqr() */

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int hqr2 (int nm, int n, int Low, int igh, double *h,
          double *wr, double *wi, double *z, int *ierr)

#else

int hqr2 (nm, n, Low, igh, h, wr, wi, z, ierr)
int    nm, n, Low, igh;
double *h;
double *wr, *wi;
double *z;
int    *ierr;

#endif

/* Purpose ...
   -------
   Compute the eigenvalues and eigenvectors of a real upper
   Hessenberg matrix using the QR method.

   Input ...
   -----
   nm    : declared dimension of arrays
   n     : order of matrix
   Low   : boundary index for the balanced matrix
   igh   : boundary index for the balanced matrix
   h     : upper Hessenberg matrix

   Output ...
   ------
   h     : the contents are changed by hqr2()
   wr    : real parts of the eigenvalues
   wi    : imaginary parts of the eigenvalues
   z     : transformation matrix

*/

{  /* begin hqr2() */

int    i, j, k, L, m, en, ii, jj, LL, mm, na, nn;
int    its, mp2, enm2;
double p, q, r, s, t, w, x, y, ra, sa, vi, vr, zz, norm, machep;
int    notlas;
double t3r, t3i;

/* machep is a machine dependent parameter specifying
   the relative precision of floating point arithmetic. */

machep = EPSILON;

*ierr = 0;

/* store roots isolated by balanc */
for (i = 1; i <= n; ++i)
   {
   if (i < Low || i > igh)
      {
      wr[VINDX(i)] = h[MINDX(i,i,nm)];
      wi[VINDX(i)] = zero;
      }
   }

en = igh;
t = zero;

/* Search for next eigenvalue */
L60:
if (en < Low) goto L340;
its = 0;
na = en - 1;
enm2 = na - 1;

/* Look for single small sub-diagonal element */

/* for L=en step -1 until Low do ... */
L70:
for (LL = Low; LL <= en; ++LL)
   {
   L = en + Low - LL;
   if (L == Low) break;
   if (fabs(h[MINDX(L,L-1,nm)]) <= machep * (fabs(h[MINDX(L-1,L-1,nm)])
       + fabs(h[MINDX(L,L,nm)]))) break;
   }

/* Form shift */

L100:
x = h[MINDX(en,en,nm)];
if (L == en) goto L270;
y = h[MINDX(na,na,nm)];
w = h[MINDX(en,na,nm)] * h[MINDX(na,en,nm)];
if (L == na) goto L280;
if (its == 30)
   {
   /* Set error -- no convergence to an
      eigenvaLue after 30 iterations */
   *ierr = en;
   goto L1001;
   }

if (its == 10 || its == 20)
   {
   /* Form exceptional shift */
   t += x;
   for (i = Low; i <= en; ++i)  h[MINDX(i,i,nm)] -= x;
   s = fabs(h[MINDX(en,na,nm)]) + fabs(h[MINDX(na,enm2,nm)]);
   x = 0.75 * s;
   y = x;
   w = -0.4375 * s * s;
   }

++its;

/* Look for two consecutive small sub-diagonal elements. */

/* for m=en-2 step -1 untiL L do ... */
for (mm = L; mm <= enm2; ++mm)
   {
   m = enm2 + L - mm;
   zz = h[MINDX(m,m,nm)];
   r = x - zz;
   s = y - zz;
   p = (r * s - w) / h[MINDX(m+1,m,nm)] + h[MINDX(m,m+1,nm)];
   q = h[MINDX(m+1,m+1,nm)] - zz - r - s;
   r = h[MINDX(m+2,m+1,nm)];
   s = fabs(p) + fabs(q) + fabs(r);
   p /= s;
   q /= s;
   r /= s;
   if (m == L) break;
   if (fabs(h[MINDX(m,m-1,nm)]) * (fabs(q) + fabs(r)) <=
       machep * fabs(p) * (fabs(h[MINDX(m-1,m-1,nm)]) + fabs(zz) +
       fabs(h[MINDX(m+1,m+1,nm)]))) break;
   }

L150:
mp2 = m + 2;

for (i = mp2; i <= en; ++i)
   {
   h[MINDX(i,i-2,nm)] = zero;
   if (i != mp2) h[MINDX(i,i-3,nm)] = zero;
   }

/* double qr step involving rows L to en and coLumns m to en  */
for (k = m; k <= na; ++k)
   {
   notlas = (k != na);
   if (k != m)
      {
      p = h[MINDX(k,k-1,nm)];
      q = h[MINDX(k+1,k-1,nm)];
      r = zero;
      if (notlas) r = h[MINDX(k+2,k-1,nm)];
      x = fabs(p) + fabs(q) + fabs(r);
      if (x == zero) continue;
      p /= x;
      q /= x;
      r /= x;
      }
   s = SIGN(sqrt(p*p+q*q+r*r),p);
   if (k == m)
      {
      if (L != m) h[MINDX(k,k-1,nm)] = -h[MINDX(k,k-1,nm)];
      }
   else
      {
      h[MINDX(k,k-1,nm)] = -s * x;
      }
   p += s;
   x = p / s;
   y = q / s;
   zz = r / s;
   q /= p;
   r /= p;
   /* Row modification */
   for (j = k; j <= n; ++j)
      {
      p = h[MINDX(k,j,nm)] + q * h[MINDX(k+1,j,nm)];
      if (notlas)
         {
         p += (r * h[MINDX(k+2,j,nm)]);
         h[MINDX(k+2,j,nm)] -= (p * zz);
         }
      h[MINDX(k+1,j,nm)] -= (p * y);
      h[MINDX(k,j,nm)] -= (p * x);
      }

   j = MIN(en,k+3);

   /* Column modification */
   for (i = 1; i <= j; ++i)
      {
      p = x * h[MINDX(i,k,nm)] + y * h[MINDX(i,k+1,nm)];
      if (notlas)
         {
         p += (zz * h[MINDX(i,k+2,nm)]);
         h[MINDX(i,k+2,nm)] -= (p * r);
         }
      h[MINDX(i,k+1,nm)] -= (p * q);
      h[MINDX(i,k,nm)] -= p;
      }

   /* Accumulate transformations  */
   for (i = Low; i <= igh; ++i)
      {
      p = x * z[MINDX(i,k,nm)] + y * z[MINDX(i,k+1,nm)];
      if (notlas)
         {
         p += (zz * z[MINDX(i,k+2,nm)]);
         z[MINDX(i,k+2,nm)] -= (p * r);
         }
      z[MINDX(i,k+1,nm)] -= (p * q);
      z[MINDX(i,k,nm)] -= p;
      }

   }

goto L70;

L270: /* One root found. */
h[MINDX(en,en,nm)] = x + t;
wr[VINDX(en)] = h[MINDX(en,en,nm)];
wi[VINDX(en)] = zero;
en = na;
goto L60;

L280: /* Two roots found. */
p = (y - x) / two;
q = p * p + w;
zz = sqrt(fabs(q));
h[MINDX(en,en,nm)] = x + t;
x = h[MINDX(en,en,nm)];
h[MINDX(na,na,nm)] = y + t;

if (q >= zero)
   {  /* Real pair. */
   zz = p + SIGN(zz,p);
   wr[VINDX(na)] = x + zz;
   wr[VINDX(en)] = wr[VINDX(na)];
   if (zz != zero) wr[VINDX(en)] = x - w / zz;
   wi[VINDX(na)] = zero;
   wi[VINDX(en)] = zero;
   x = h[MINDX(en,na,nm)];
   r = sqrt(x * x + zz * zz);
   p = x / r;
   q = zz / r;

   /* Row modification. */
   for (j = na; j <= n; ++j)
      {
      zz = h[MINDX(na,j,nm)];
      h[MINDX(na,j,nm)] = q * zz + p * h[MINDX(en,j,nm)];
      h[MINDX(en,j,nm)] = q * h[MINDX(en,j,nm)] - p * zz;
      }

   /* Column modification. */
   for (i = 1; i <= en; ++i)
      {
      zz = h[MINDX(i,na,nm)];
      h[MINDX(i,na,nm)] = q * zz + p * h[MINDX(i,en,nm)];
      h[MINDX(i,en,nm)] = q * h[MINDX(i,en,nm)] - p * zz;
      }

   /* Accumulate transformations. */
   for (i = Low; i <= igh; ++i)
      {
      zz = z[MINDX(i,na,nm)];
      z[MINDX(i,na,nm)] = q * zz + p * z[MINDX(i,en,nm)];
      z[MINDX(i,en,nm)] = q * z[MINDX(i,en,nm)] - p * zz;
      }
   }
else
   { /* Complex pair */
   wr[VINDX(na)] = x + p;
   wr[VINDX(en)] = x + p;
   wi[VINDX(na)] = zz;
   wi[VINDX(en)] = -zz;
   }

en = enm2;
goto L60;

L340: /* All roots found.  backsubstitute to find
         vectors of upper triangular form  */
norm = zero;
k = 1;

for (i = 1; i <= n; ++i)
   {
   for (j = k; j <= n; ++j)   norm += fabs(h[MINDX(i,j,nm)]);
   k = i;
   }

if (norm == zero) goto L1001;

/* for en=n step -1 untiL 1 do ... */
for (nn = 1; nn <= n; ++nn)
   {
   en = n + 1 - nn;
   p = wr[VINDX(en)];
   q = wi[VINDX(en)];
   na = en - 1;

   if (q == zero)
      { /* Real vector. */
      m = en;
      h[MINDX(en,en,nm)] = one;
      if (na == 0) goto L800;
      /* for i=en-1 step -1 untiL 1 do ... */
      for (ii = 1; ii <= na; ++ii)
         {
         i = en - ii;
         w = h[MINDX(i,i,nm)] - p;
         r = h[MINDX(i,en,nm)];
         if (m <= na)
            {
            for (j = m; j <= na; ++j)
               r += h[MINDX(i,j,nm)] * h[MINDX(j,en,nm)];
            }

         if (wi[VINDX(i)] < zero)
            {
            zz = w;
            s = r;
            goto L700;
            }

         m = i;
         if (wi[VINDX(i)] == zero)
            {
            t = w;
            if (w == zero) t = machep * norm;
            h[MINDX(i,en,nm)] = -r / t;
            goto L700;
            }

         /* Solve real equations */
         x = h[MINDX(i,i+1,nm)];
         y = h[MINDX(i+1,i,nm)];
         q = (wr[VINDX(i)] - p) * (wr[VINDX(i)] - p) +
             wi[VINDX(i)] * wi[VINDX(i)];
         t = (x * s - zz * r) / q;
         h[MINDX(i,en,nm)] = t;
         if (fabs(x) > fabs(zz))
            {
            h[MINDX(i+1,en,nm)] = (-r - w * t) / x;
            goto L700;
            }
         h[MINDX(i+1,en,nm)] = (-s - y * t) / zz;

         L700:;
         }
      }  /* End real vector. */
   else if (q < zero)
      {  /* Complex vector. */
      m = na;
      /* Last vector component chosen imaginary so that
         eigenvector matrix is triangular */
      if (fabs(h[MINDX(en,na,nm)]) <= fabs(h[MINDX(na,en,nm)]))
         {
         cdivsn (zero, -h[MINDX(na,en,nm)], h[MINDX(na,na,nm)]-p, q,
                 &t3r, &t3i);
         h[MINDX(na,na,nm)] = t3r;
         h[MINDX(na,en,nm)] = t3i;
         }
      else
         {
         h[MINDX(na,na,nm)] = q / h[MINDX(en,na,nm)];
         h[MINDX(na,en,nm)] = -(h[MINDX(en,en,nm)] - p) /
                              h[MINDX(en,na,nm)];
         }

      h[MINDX(en,na,nm)] = zero;
      h[MINDX(en,en,nm)] = one;
      enm2 = na - 1;
      if (enm2 == 0) goto L800;

      for (ii = 1; ii <= enm2; ++ii)
         {
         i = na - ii;
         w = h[MINDX(i,i,nm)] - p;
         ra = zero;
         sa = h[MINDX(i,en,nm)];

         for (j = m; j <= na; ++j)
            {
            ra += (h[MINDX(i,j,nm)] * h[MINDX(j,na,nm)]);
            sa += (h[MINDX(i,j,nm)] * h[MINDX(j,en,nm)]);
            }

         if (wi[VINDX(i)] < zero)
            {
            zz = w;
            r = ra;
            s = sa;
            goto L790;
            }

         m = i;
         if (wi[VINDX(i)] == zero)
            {
            cdivsn (-ra, -sa, w, q, &t3r, &t3i);
            h[MINDX(i,na,nm)] = t3r;
            h[MINDX(i,en,nm)] = t3i;
            goto L790;
            }

         /* Solve complex equations */
         x = h[MINDX(i,i+1,nm)];
         y = h[MINDX(i+1,i,nm)];
         vr = (wr[VINDX(i)] - p) * (wr[VINDX(i)] - p) +
               wi[VINDX(i)] * wi[VINDX(i)] - q * q;
         vi = (wr[VINDX(i)] - p) * two * q;
         if (vr == zero && vi == zero)
            vr = machep * norm *
                 (fabs(w) + fabs(q) + fabs(x) + fabs(y) + fabs(zz));
         cdivsn (x*r-zz*ra+q*sa, x*s-zz*sa-q*ra, vr, vi, &t3r, &t3i);
         h[MINDX(i,na,nm)] = t3r;
         h[MINDX(i,en,nm)] = t3i;
         if (fabs(x) > fabs(zz) + fabs(q))
            {
            h[MINDX(i+1,na,nm)] = (-ra - w * h[MINDX(i,na,nm)] +
                                   q * h[MINDX(i,en,nm)]) / x;
            h[MINDX(i+1,en,nm)] = (-sa - w * h[MINDX(i,en,nm)] -
                                   q * h[MINDX(i,na,nm)]) / x;
            goto L790;
            }

         cdivsn(-r-y*h[MINDX(i,na,nm)], -s-y*h[MINDX(i,en,nm)], zz, q,
                &t3r, &t3i);
         h[MINDX(i+1,na,nm)] = t3r;
         h[MINDX(i+1,en,nm)] = t3i;

         L790:;
         }
      }  /* End complex vector. */
   L800:;
   }
/* End back substitution. */

/* vectors of isolated roots. */
for (i = 1; i <= n; ++i)
   {
   if (i < Low || i > igh)
      {
      for (j = i; j <= n; ++j) z[MINDX(i,j,nm)] = h[MINDX(i,j,nm)];
      }
   }

/* Multiply by transformation matrix to give
   vectors of original full matrix.  */

/* for j=n step -1 until Low do ... */
for (jj = Low; jj <= n; ++jj)
   {
   j = n + Low - jj;
   m = MIN(j,igh);

   for (i = Low; i <= igh; ++i)
      {
      zz = zero;
      for (k = Low; k <= m; ++k)
         zz += (z[MINDX(i,k,nm)] * h[MINDX(k,j,nm)]);
      z[MINDX(i,j,nm)] = zz;
      }
   }

L1001: return(0);

}  /* end of hqr2() */

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int balbak (int nm, int n, int low, int igh, double *scale,
            int m, double *z)

#else

int balbak (nm, n, low, igh, scale, m, z)
int    nm, n, low, igh;
double *scale;
int    m;
double *z;

#endif

/* Purpose ...
   -------
   Form the eigenvectors of a real general matrix from the
   eigenvectors of that matrix transformed by balanc().

   Input ...
   -----
   nm    : declared dimension of arrays
   n     : order of matrix
   low   : boundary index for the balanced matrix
   igh   : boundary index for the balanced matrix
   scale : vector of information on transformations
   m     : number of columns of z to be back-transformed
   z     : matrix of eigenvectors

   Output ...
   ------
   z     : backtransformed matrix of eigenvectors

*/

{  /* begin balbak() */

int    i, j, k, ii;
double s;

if (igh != low)
   {
   for (i = low; i <= igh; ++i)
      {
      s = scale[VINDX(i)];
      /*
      left hand eigenvectors are back transformed
      if the foregoing statement is replaced by
      s = one / scale[VINDX(i)];
      */
      for (j = 1; j <= m; ++j)  z[MINDX(i,j,nm)] *= s;
      }
   }

/* for i=low-1 step -1 until 1,
      for igh+1 step 1 until n do ... */
for (ii = 1; ii <= n; ++ii)
   {
   i = ii;
   if (i < low || i > igh)
      {
      if (i < low) i = low - ii;
      k = scale[VINDX(i)];
      if (k != i)
         {
         for (j = 1; j <= m; ++j)
            {
            s = z[MINDX(i,j,nm)];
            z[MINDX(i,j,nm)] = z[MINDX(k,j,nm)];
            z[MINDX(k,j,nm)] = s;
            }
         }
      }
   }

return(0);
}  /* end of balbak() */

/*-----------------------------------------------------------------*/

#if (PROTOTYPE)

int qrvector (int k, int nm, int n,
              double *z, double wr[], double wi[],
              double vr[], double vi[], int *flag)

#else

int qrvector (k, nm, n, z, wr, wi, vr, vi, flag)
int    k, nm, n;
double *z, wr[], wi[], vr[], vi[];
int    *flag;

#endif

/* Purpose ...
   -------
   Extract the kth eigenvector from the packed matrix as
   returned by qr().

   Input ...
   -----
   k     : index of eigenvector required
   nm    : declared dimension of arrays
   n     : order of matrix
   z     : packed matrix of eigenvectors
   wr,wi : eigenvalues as returned by qr()

   Output ...
   ------
   vr,vi : real and imaginary parts of the jth eigenvector
           (with corresponding eigenvalue wr[j] + i wi[j])
   flag  : status indicator
           flag == 0, normal return
           flag == 1, invalid user input
           flag == 2, could not locate complex conjugate eigenvalue.

   This C code written by ...  Peter & Nigel,
   ----------------------      Design Software,
                               42 Gubberley St,
                               Kenmore, 4069,
                               Australia.

   Version ... 1.0, August 1989
   -------

   Notes ...
   -----
   The eigenvector matrix is packed as follows ...
   if wi[j] == 0.0  (real eigenvalue) the real parts of the
                    eigenvector are stored as z[i][j] while
                    the imaginary parts are zero.
   if wi[j] > 0.0   (complex eigenvalue) the real parts of the
                    eigenvector is stored as z[i][j] and the
                    imaginary parts as z[i][j+1].
   if wi[j] < 0.0   (complex eigenvalue) the eigenvector is the
                    conjugate of the eigenvector stored for the
                    conjugate of this eigenvalue

*/

{  /* begin qrvector() */
int i, j;
double diff, size, small;

*flag = 0;

if (n < 1 || n > nm || nm < 1 || z == NULL || wr == NULL ||
    wi == NULL || vr == NULL || vi == NULL || k < 0 || k >= n)
    {
    *flag = 1;
    return (0);
    }

if (wi[k] == 0.0)
   {
   /* real eigenvalue */
   for (i = 0; i < n; ++i)
      {
      vr[i] = z[i * nm + k];
      vi[i] = 0.0;
      }
   }

if (wi[k] > 0.0)
   {
   /* complex eigenvalue */
   for (i = 0; i < n; ++i)
      {
      vr[i] = z[i * nm + k];
      vi[i] = z[i * nm + k + 1];
      }
   }

if (wi[k] < 0.0)
   {
   /* complex eigenvalue not stored in z */
   /* First, find the conjugate eigenvalue */
   j = 0;
   small = 1000.0;
   size = cabslt (wr[k], wi[k]);
   for (i = 0; i < n; ++i)
      {
      diff = fabs (cabslt(wr[i], wi[i]) - size);
      if (i != k && diff < small)
         {
         small = diff;
         j = i;
         }
      }
   if (small > sqrt(EPSILON))
      {
      /* did not find conjugate (to a satisfactory precision) */
      *flag = 2;
      return (0);
      }
   /* Now, unpack eigenvector */
   for (i = 0; i < n; ++i)
      {
      vr[i] = z[i * nm + j];
      vi[i] = -z[i * nm + j + 1];
      }
   }

return(0);
}  /* end of qrvector() */

/*-----------------------------------------------------------------*/

@
